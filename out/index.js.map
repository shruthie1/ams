{"version":3,"file":"index.js","mappings":"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","sources":[".././src/app.controller.ts",".././src/app.module.ts",".././src/app.service.ts",".././src/config/swagger.config.ts",".././src/files/config/file.config.ts",".././src/files/config/view.config.ts",".././src/files/dto/requests.dto.ts",".././src/files/dto/responses.dto.ts",".././src/files/file.controller.ts",".././src/files/file.module.ts",".././src/files/file.service.ts",".././src/files/utils/file-operation-error.ts",".././src/files/utils/file-operation-monitor.ts",".././src/files/utils/file-operation-wrapper.ts",".././src/files/utils/file-validators.ts",".././src/files/utils/json-path.validator.ts","../external commonjs \"@nestjs/common\"","../external commonjs \"@nestjs/core\"","../external commonjs \"@nestjs/platform-express\"","../external commonjs \"@nestjs/schedule\"","../external commonjs \"@nestjs/swagger\"","../external commonjs \"archiver\"","../external commonjs \"class-validator\"","../external commonjs \"dotenv\"","../external commonjs \"mime-types\"","../external commonjs \"multer\"","../external commonjs \"sharp\"","../external node-commonjs \"fs\"","../external node-commonjs \"path\"","../webpack/bootstrap",".././src/main.ts"],"sourcesContent":["import { Controller, Get } from '@nestjs/common';\r\nimport { AppService } from './app.service';\r\n\r\n@Controller()\r\nexport class AppController {\r\n  constructor(private readonly appService: AppService) {}\r\n\r\n  @Get()\r\n  getHello(): string {\r\n    return this.appService.getHello();\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { AppController } from './app.controller';\r\nimport { AppService } from './app.service';\r\nimport { FileModule } from './files/file.module';\r\n\r\n@Module({\r\n  imports: [FileModule],\r\n  controllers: [AppController],\r\n  providers: [AppService],\r\n})\r\nexport class AppModule {}\r\n","import { Injectable } from '@nestjs/common';\r\n\r\n@Injectable()\r\nexport class AppService {\r\n  getHello(): string {\r\n    return 'Hello World!';\r\n  }\r\n}\r\n","import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';\r\nimport { INestApplication } from '@nestjs/common';\r\nimport * as fs from 'fs';\r\n\r\nexport function setupSwagger(app: INestApplication): void {\r\n    const config = new DocumentBuilder()\r\n        .setTitle('File Storage API')\r\n        .setVersion('1.0')\r\n        .addTag('Folder Management', 'Create, delete, and manage folders')\r\n        .addTag('File Operations', 'Upload, download, and manage files')\r\n        .addTag('File Metadata', 'View and modify file information')\r\n        .addTag('File Versions', 'Manage file versions')\r\n        .addTag('File Sharing', 'Generate and manage file sharing')\r\n        .addTag('File Locking', 'Lock and unlock files for editing')\r\n        .addTag('Search & Browse', 'Search and browse files and folders')\r\n        .addTag('JSON Operations', 'Special operations for JSON files')\r\n        .addServer('http://localhost:8000', 'Development Server')\r\n        .addServer('https://api.example.com', 'Production Server (Coming Soon)')\r\n        .addBearerAuth()\r\n        .build();\r\n\r\n    const document = SwaggerModule.createDocument(app, config);\r\n    fs.writeFileSync('./swagger-spec.json', JSON.stringify(document, null, 2));\r\n\r\n    SwaggerModule.setup('api-docs', app, document, {\r\n        swaggerOptions: {\r\n            persistAuthorization: true,\r\n            docExpansion: 'none',\r\n            filter: true,\r\n            showRequestDuration: true,\r\n            syntaxHighlight: {\r\n                theme: 'monokai'\r\n            },\r\n            tryItOutEnabled: true,\r\n            displayRequestDuration: true,\r\n        },\r\n        customSiteTitle: 'File Storage API Documentation',\r\n        customCss: `\r\n            .swagger-ui .topbar { display: none }\r\n            .swagger-ui .info { margin: 20px 0 }\r\n            .swagger-ui .info .title { color: #2c3e50 }\r\n            .swagger-ui .info__contact { padding: 1rem 0 }\r\n            .swagger-ui .markdown p { margin: 1em 0 }\r\n            .swagger-ui .btn.execute { background-color: #2c3e50 }\r\n            .swagger-ui .btn.execute:hover { background-color: #34495e }\r\n        `,\r\n        customfavIcon: 'https://nestjs.com/favicon.ico'\r\n    });\r\n}","import { join } from \"path\";\r\n\r\n// File configuration constants\r\nexport const FILE_CONFIG = {\r\n    MAX_FILE_SIZE: 1024 * 1024 * 100, // 100MB\r\n    MAX_FILES_PER_UPLOAD: 10,\r\n    ALLOWED_FILE_TYPES: ['image/jpeg', 'image/png', 'application/pdf'],\r\n    TEMP_LINK_EXPIRY: 24 * 60 * 60 * 1000, // 24 hours in milliseconds\r\n    STORAGE_PATH: join(process.cwd(), 'uploads'),\r\n    // Add more configuration as needed\r\n};","export const VIEW_CONFIG = {\r\n    IMAGE_TYPES: [\r\n        'image/jpeg',\r\n        'image/png',\r\n        'image/gif',\r\n        'image/webp',\r\n        'image/svg+xml',\r\n        'image/bmp'\r\n    ] as const,\r\n    PDF_TYPES: ['application/pdf'] as const,\r\n    TEXT_TYPES: [\r\n        'text/plain',\r\n        'text/html',\r\n        'text/css',\r\n        'text/javascript',\r\n        'application/json',\r\n        'application/xml'\r\n    ] as const,\r\n    AUDIO_TYPES: [\r\n        'audio/mpeg',\r\n        'audio/wav',\r\n        'audio/ogg',\r\n        'audio/mp3',\r\n        'audio/aac',\r\n        'audio/webm'\r\n    ],\r\n    VIDEO_TYPES: [\r\n        'video/mp4',\r\n        'video/mpeg',\r\n        'video/webm',\r\n        'video/quicktime',\r\n        'video/x-msvideo',\r\n        'video/x-matroska'\r\n    ],\r\n    PREVIEW_SIZE_LIMIT: 1024 * 1024 * 100, // 100MB for preview generation\r\n    THUMBNAIL_OPTIONS: {\r\n        width: 320,\r\n        height: 240,\r\n        quality: 85,\r\n        format: 'jpeg',\r\n        fit: 'contain',\r\n        background: {\r\n            r: 245,\r\n            g: 245,\r\n            b: 245,\r\n            alpha: 1\r\n        }\r\n    } as const,\r\n    DEFAULT_THUMBNAILS: {\r\n        video: 'assets/video-thumbnail.png',\r\n        audio: 'assets/audio-thumbnail.png'\r\n    },\r\n    VIDEO_PREVIEW: {\r\n        thumbnailTime: '00:00:01',\r\n        width: 320,\r\n        height: 240\r\n    },\r\n    AUDIO_PREVIEW: {\r\n        duration: true,\r\n        metadata: true,\r\n        waveform: true\r\n    },\r\n    VIDEO_THUMBNAIL: {\r\n        timePosition: '00:00:01',\r\n        frameCount: 1\r\n    },\r\n    THUMBNAIL_STYLES: {\r\n        background: {\r\n            startColor: '#1a73e8',\r\n            endColor: '#174ea6'\r\n        },\r\n        text: {\r\n            color: '#ffffff',\r\n            fontFamily: 'Arial',\r\n            fontSize: {\r\n                title: 12,\r\n                format: 11\r\n            }\r\n        },\r\n        playButton: {\r\n            size: 40,\r\n            color: '#1a73e8',\r\n            background: '#ffffff'\r\n        }\r\n    }\r\n};","import { ApiProperty } from '@nestjs/swagger';\r\nimport { IsString, IsOptional, IsNotEmpty, IsArray } from 'class-validator';\r\n\r\nexport class CreateFolderDto {\r\n    @ApiProperty({ example: 'documents', description: 'Name of the folder to create' })\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    folderName: string;\r\n}\r\n\r\nexport class MoveFileDto {\r\n    @ApiProperty({ example: 'destination', description: 'New folder path for the file' })\r\n    @IsString()\r\n    @IsOptional()\r\n    newFolder?: string;\r\n\r\n    @ApiProperty({ example: 'newname.pdf', description: 'New name for the file' })\r\n    @IsString()\r\n    @IsOptional()\r\n    newFilename?: string;\r\n}\r\n\r\nexport class MoveFolderDto {\r\n    @ApiProperty({ example: 'new-location', description: 'New location path for the folder' })\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    newLocation: string;\r\n}\r\n\r\nexport class RenameFolderDto {\r\n    @ApiProperty({ example: 'new-folder-name', description: 'New name for the folder' })\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    newFolderName: string;\r\n}\r\n\r\nexport class CopyFileDto {\r\n    @ApiProperty({ example: 'destination', description: 'Destination folder for the file copy' })\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    newFolder: string;\r\n}\r\n\r\nexport class UpdateFileMetadataDto {\r\n    @ApiProperty({ example: 'newname.pdf', description: 'New name for the file' })\r\n    @IsString()\r\n    @IsOptional()\r\n    newFilename?: string;\r\n\r\n    @ApiProperty({ example: 'new-folder', description: 'New folder for the file' })\r\n    @IsString()\r\n    @IsOptional()\r\n    newFolder?: string;\r\n}\r\n\r\nexport class JsonFileResponse {\r\n    @ApiProperty({\r\n        example: {\r\n            name: \"example\",\r\n            age: 30,\r\n            nested: {\r\n                key: \"value\"\r\n            }\r\n        },\r\n        description: 'JSON file content'\r\n    })\r\n    content: any;\r\n}\r\n\r\nexport class JsonValueResponse {\r\n    @ApiProperty({\r\n        example: \"value\",\r\n        description: 'Value at the specified path in the JSON file'\r\n    })\r\n    value: any;\r\n}\r\n\r\nexport class JsonPathParams {\r\n    @ApiProperty({ \r\n        example: ['user', 'profile', 'name'],\r\n        description: 'Path segments to the nested value',\r\n        isArray: true\r\n    })\r\n    @IsString({ each: true })\r\n    @IsNotEmpty({ each: true })\r\n    path: string[];\r\n}\r\n\r\nexport class JsonQuery {\r\n    @ApiProperty({\r\n        example: 'data.users[0].name',\r\n        description: 'JSON path query using dot notation'\r\n    })\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    query: string;\r\n}","import { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class FileMetadataResponse {\r\n    @ApiProperty({ example: 'document.pdf', description: 'Name of the file' })\r\n    filename: string;\r\n\r\n    @ApiProperty({ example: 1024, description: 'Size of file in bytes' })\r\n    size: number;\r\n\r\n    @ApiProperty({ example: '2024-02-20T10:00:00.000Z', description: 'Creation timestamp' })\r\n    createdAt: Date;\r\n\r\n    @ApiProperty({ example: '2024-02-20T11:30:00.000Z', description: 'Last modification timestamp' })\r\n    modifiedAt: Date;\r\n}\r\n\r\nexport class FolderResponse {\r\n    @ApiProperty({ example: ['folder1', 'folder2'], description: 'List of folder names' })\r\n    folders: string[];\r\n}\r\n\r\nexport class FolderDetailsResponse {\r\n    @ApiProperty({ example: 'documents', description: 'Name of the folder' })\r\n    folder: string;\r\n\r\n    @ApiProperty({ example: ['file1.pdf', 'file2.jpg'], description: 'List of files in the folder' })\r\n    files: string[];\r\n\r\n    @ApiProperty({ example: 100, description: 'Total number of files in folder' })\r\n    totalFiles: number;\r\n\r\n    @ApiProperty({ example: 1, description: 'Current page number' })\r\n    page: number;\r\n\r\n    @ApiProperty({ example: 10, description: 'Number of items per page' })\r\n    limit: number;\r\n}\r\n\r\nexport class ShareableLinkResponse {\r\n    @ApiProperty({ \r\n        example: 'http://localhost:8000/folders/docs/files/example.pdf?share=true',\r\n        description: 'Generated shareable link for the file'\r\n    })\r\n    shareableLink: string;\r\n}\r\n\r\nexport class FileVersionResponse {\r\n    @ApiProperty({ example: 'document.pdf', description: 'Name of the original file' })\r\n    filename: string;\r\n\r\n    @ApiProperty({\r\n        example: [\r\n            { version: '1', filename: 'document.pdf.v1' },\r\n            { version: '2', filename: 'document.pdf.v2' }\r\n        ],\r\n        description: 'List of available versions'\r\n    })\r\n    versions: Array<{ version: string; filename: string }>;\r\n}\r\n\r\nexport class FolderTreeResponse {\r\n    @ApiProperty({ example: 'root', description: 'Name of the current node' })\r\n    name: string;\r\n\r\n    @ApiProperty({\r\n        example: [\r\n            { name: 'folder1', children: [] },\r\n            { name: 'file1.pdf' }\r\n        ],\r\n        description: 'Child nodes (folders and files)'\r\n    })\r\n    children: Array<{ name: string; children?: any[] }>;\r\n}\r\n\r\nexport class ErrorResponse {\r\n    @ApiProperty({ example: 400, description: 'HTTP status code' })\r\n    statusCode: number;\r\n\r\n    @ApiProperty({ example: 'File not found', description: 'Error message' })\r\n    message: string;\r\n\r\n    @ApiProperty({ example: 'Bad Request', description: 'Error type' })\r\n    error: string;\r\n}\r\n\r\nexport class JsonFileResponse {\r\n    @ApiProperty({\r\n        example: { key: 'value' },\r\n        description: 'JSON file content'\r\n    })\r\n    content: any;\r\n}\r\n\r\nexport class JsonValueResponse {\r\n    @ApiProperty({\r\n        example: 'value',\r\n        description: 'Value at the specified path in the JSON file'\r\n    })\r\n    value: any;\r\n}\r\n\r\nexport class FileOperationMetricDto {\r\n    @ApiProperty({ example: 'createFolder', description: 'Name of the file operation' })\r\n    operation: string;\r\n\r\n    @ApiProperty({ example: true, description: 'Whether the operation succeeded' })\r\n    success: boolean;\r\n\r\n    @ApiProperty({ example: 123, description: 'Duration of operation in milliseconds' })\r\n    duration: number;\r\n\r\n    @ApiProperty({ example: 1645564789123, description: 'Timestamp of the operation' })\r\n    timestamp: number;\r\n\r\n    @ApiProperty({ example: '/uploads/docs', required: false, description: 'Path involved in the operation' })\r\n    path?: string;\r\n\r\n    @ApiProperty({ required: false, description: 'Error message if operation failed' })\r\n    error?: string;\r\n}\r\n\r\nexport class FileOperationMetricsResponse {\r\n    @ApiProperty({ type: [FileOperationMetricDto], description: 'Recent file operation metrics' })\r\n    metrics: FileOperationMetricDto[];\r\n\r\n    @ApiProperty({ example: 0.05, description: 'Rate of failed operations in the time window' })\r\n    failureRate: number;\r\n\r\n    @ApiProperty({ example: 3600000, description: 'Time window in milliseconds' })\r\n    timeWindow: number;\r\n\r\n    @ApiProperty({ example: 100, description: 'Total number of operations recorded' })\r\n    totalOperations: number;\r\n}","import {\r\n    Controller,\r\n    Get,\r\n    Post,\r\n    Put,\r\n    Delete,\r\n    Param,\r\n    Query,\r\n    Body,\r\n    UploadedFiles,\r\n    UseInterceptors,\r\n    Res,\r\n    Logger,\r\n    DefaultValuePipe,\r\n    ParseIntPipe,\r\n    Injectable,\r\n    ParseFilePipe,\r\n    BadRequestException,\r\n    Req,\r\n} from '@nestjs/common';\r\nimport { FileInterceptor, FilesInterceptor } from '@nestjs/platform-express';\r\nimport { diskStorage } from 'multer';\r\nimport { CustomFileValidator, FileSizeValidator } from './utils/file-validators';\r\nimport { FILE_CONFIG } from './config/file.config';\r\nimport { Response, Request } from 'express';\r\nimport { FileService } from './file.service';\r\nimport {\r\n    ApiTags,\r\n    ApiOperation,\r\n    ApiParam,\r\n    ApiResponse,\r\n    ApiConsumes,\r\n    ApiBody,\r\n    ApiQuery,\r\n} from '@nestjs/swagger';\r\nimport { existsSync, mkdirSync } from 'fs';\r\nimport { join, resolve } from 'path';\r\nimport {\r\n    CreateFolderDto,\r\n    MoveFileDto,\r\n    MoveFolderDto,\r\n    RenameFolderDto,\r\n    CopyFileDto,\r\n    UpdateFileMetadataDto,\r\n} from './dto/requests.dto';\r\nimport {\r\n    FileMetadataResponse,\r\n    FolderResponse,\r\n    FolderDetailsResponse,\r\n    ShareableLinkResponse,\r\n    FileVersionResponse,\r\n    FolderTreeResponse,\r\n    ErrorResponse,\r\n    JsonFileResponse,\r\n    JsonValueResponse,\r\n    FileOperationMetricsResponse,\r\n} from './dto/responses.dto';\r\nimport { JsonPathParams } from './dto/requests.dto';\r\nimport { FileOperationMonitor } from './utils/file-operation-monitor';\r\n\r\nconst MAX_FILE_SIZE = 1024 * 1024 * 100; // 100MB\r\nconst UPLOADS_BASE = join(process.cwd(), 'uploads');\r\n\r\nfunction getSafePath(...segments: string[]): string {\r\n  const filePath = join(...segments);\r\n  const resolvedPath = resolve(filePath);\r\n  const uploadsPath = resolve(UPLOADS_BASE);\r\n  if (!resolvedPath.startsWith(uploadsPath)) {\r\n      throw new Error(`Invalid path detected: ${resolvedPath}`);\r\n  }\r\n  return filePath;\r\n}\r\n@ApiTags('Folders & Files')\r\n@Injectable()\r\n@Controller()\r\nexport class FileController {\r\n    private readonly logger = new Logger(FileController.name);\r\n    private readonly fileService: FileService;\r\n\r\n    constructor(fileService: FileService) {\r\n        if (!fileService) {\r\n            throw new Error('FileService is required');\r\n        }\r\n        this.fileService = fileService;\r\n    }\r\n\r\n    @Post('folders/:folder/files')\r\n    @UseInterceptors(\r\n        FilesInterceptor('files', 10, {\r\n            storage: diskStorage({\r\n                destination: (req, file, cb) => {\r\n                    try {\r\n                        const folderName = req.params.folder;\r\n                        const folderPath = getSafePath(UPLOADS_BASE, folderName);\r\n                        if (!existsSync(folderPath)) {\r\n                            mkdirSync(folderPath, { recursive: true });\r\n                            console.log(`Created folder: ${folderPath}`);\r\n                        }\r\n                        cb(null, folderPath);\r\n                    } catch (error) {\r\n                        console.error(`Error setting destination: ${error.message}`);\r\n                        cb(error, null);\r\n                    }\r\n                },\r\n                filename: (req, file, cb) => {\r\n                    try {\r\n                        const filenameQuery = req.query.filename as string;\r\n                        const { originalname } = file;\r\n                        const extension = originalname.substring(originalname.lastIndexOf('.'));\r\n                        \r\n                        // Initialize the fileCounter in the request object if not exists\r\n                        if (!(req as any).fileCounter) {\r\n                            (req as any).fileCounter = 0;\r\n                        }\r\n                        (req as any).fileCounter++;\r\n\r\n                        let finalFilename = originalname;\r\n                        if (filenameQuery) {\r\n                            const currentCount = (req as any).fileCounter;\r\n                            finalFilename = `${filenameQuery}${currentCount}${extension}`;\r\n                        }\r\n\r\n                        console.log(`Saving file as: ${finalFilename}`);\r\n                        cb(null, finalFilename);\r\n                    } catch (error) {\r\n                        console.error(`Error setting filename: ${error.message}`);\r\n                        cb(error, null);\r\n                    }\r\n                },\r\n            }),\r\n            limits: { fileSize: MAX_FILE_SIZE },\r\n        }),\r\n    )\r\n    @ApiOperation({\r\n        summary: 'Upload files to a folder',\r\n        description: 'Upload single or multiple files to a specified folder'\r\n    })\r\n    @ApiConsumes('multipart/form-data')\r\n    @ApiBody({\r\n        schema: {\r\n            type: 'object',\r\n            required: ['files'],\r\n            properties: {\r\n                files: {\r\n                    type: 'array',\r\n                    items: { type: 'string', format: 'binary' },\r\n                    description: 'Files to upload'\r\n                },\r\n            },\r\n        },\r\n    })\r\n    @ApiParam({ name: 'folder', description: 'Target folder name' })\r\n    @ApiQuery({ name: 'filename', required: false, description: 'Optional custom filename for single file upload' })\r\n    async uploadFiles(\r\n        @Param('folder') folder: string,\r\n        @UploadedFiles(\r\n            new ParseFilePipe({\r\n                validators: [\r\n                    new CustomFileValidator({ fileTypes: FILE_CONFIG.ALLOWED_FILE_TYPES }),\r\n                    new FileSizeValidator({ maxSize: FILE_CONFIG.MAX_FILE_SIZE })\r\n                ],\r\n                errorHttpStatusCode: 400\r\n            })\r\n        ) files: Express.Multer.File[],\r\n        @Query('filename') filename?: string,\r\n    ) {\r\n        if (!files?.length) {\r\n            throw new BadRequestException('No files provided');\r\n        }\r\n\r\n        return this.fileService.uploadFiles(folder, files, filename);\r\n    }\r\n\r\n    // =====================================================\r\n\r\n    // Folder Endpoints\r\n    // =====================================================\r\n\r\n    @ApiTags('Folder Management')\r\n    @Get('folders')\r\n    @ApiOperation({ summary: 'List all folders' })\r\n    @ApiResponse({ \r\n        status: 200, \r\n        description: 'Folders listed successfully',\r\n        type: FolderResponse \r\n    })\r\n    @ApiResponse({\r\n        status: 500,\r\n        description: 'Server error while listing folders',\r\n        type: ErrorResponse\r\n    })\r\n    listFolders(): Promise<FolderResponse> {\r\n        return this.fileService.listFolders();\r\n    }\r\n\r\n    @Get('folders/:folder')\r\n    @ApiOperation({ summary: 'Get folder details and list files' })\r\n    @ApiResponse({\r\n        status: 200,\r\n        description: 'Folder details retrieved successfully',\r\n        type: FolderDetailsResponse\r\n    })\r\n    @ApiResponse({ \r\n        status: 404, \r\n        description: 'Folder not found' \r\n    })\r\n    @ApiParam({ name: 'folder', description: 'Folder name' })\r\n    @ApiQuery({ name: 'page', required: false, description: 'Page number for pagination' })\r\n    @ApiQuery({ name: 'limit', required: false, description: 'Number of files per page' })\r\n    getFolderDetails(\r\n        @Param('folder') folder: string,\r\n        @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\r\n        @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\r\n    ): Promise<FolderDetailsResponse> {\r\n        return this.fileService.getFolderDetails(folder, page, limit);\r\n    }\r\n\r\n    @ApiTags('Folder Management')\r\n    @Post('folders')\r\n    @ApiOperation({ summary: 'Create a new folder' })\r\n    @ApiResponse({ \r\n        status: 201, \r\n        description: 'Folder created successfully' \r\n    })\r\n    @ApiResponse({ \r\n        status: 400, \r\n        description: 'Invalid folder name' \r\n    })\r\n    @ApiBody({\r\n        schema: { type: 'object', properties: { folderName: { type: 'string' } } },\r\n    })\r\n    createFolder(@Body() createFolderDto: CreateFolderDto) {\r\n        return this.fileService.createFolder(createFolderDto.folderName);\r\n    }\r\n\r\n    @ApiTags('Folder Management')\r\n    @Delete('folders/:folder')\r\n    @ApiOperation({ summary: 'Delete a folder and all its contents' })\r\n    @ApiParam({ name: 'folder', description: 'Folder to delete' })\r\n    deleteFolder(@Param('folder') folder: string) {\r\n        return this.fileService.deleteFolder(folder);\r\n    }\r\n\r\n    // =====================================================\r\n\r\n    // File Endpoints (Nested under folders)\r\n    // =====================================================\r\n\r\n    @ApiTags('File Operations')\r\n    @Get('folders/:folder/files/:filename/download')\r\n    @ApiOperation({ summary: 'Download a file from a folder' })\r\n    @ApiParam({ name: 'folder', description: 'Folder name' })\r\n    @ApiParam({ name: 'filename', description: 'File name' })\r\n    downloadFile(@Param('folder') folder: string, @Param('filename') filename: string, @Res() res: Response) {\r\n        return this.fileService.downloadFile(folder, filename, res);\r\n    }\r\n\r\n    @ApiTags('File Metadata')\r\n    @Get('folders/:folder/files/:filename/metadata')\r\n    @ApiOperation({ summary: 'Get metadata of a file' })\r\n    @ApiResponse({\r\n        status: 200,\r\n        description: 'File metadata retrieved successfully',\r\n        type: FileMetadataResponse\r\n    })\r\n    @ApiResponse({ \r\n        status: 404, \r\n        description: 'File not found' \r\n    })\r\n    @ApiParam({ name: 'folder', description: 'Folder name' })\r\n    @ApiParam({ name: 'filename', description: 'File name' })\r\n    getFileMetadata(@Param('folder') folder: string, @Param('filename') filename: string): Promise<FileMetadataResponse> {\r\n        return this.fileService.getFileMetadata(folder, filename);\r\n    }\r\n\r\n    @Put('folders/:folder/files/:filename/move')\r\n    @ApiOperation({ summary: 'Move or rename a file' })\r\n    @ApiResponse({ \r\n        status: 200, \r\n        description: 'File moved successfully' \r\n    })\r\n    @ApiResponse({ \r\n        status: 400, \r\n        description: 'Invalid destination' \r\n    })\r\n    @ApiResponse({ \r\n        status: 404, \r\n        description: 'File not found' \r\n    })\r\n    @ApiParam({ name: 'folder', description: 'Current folder of the file' })\r\n    @ApiParam({ name: 'filename', description: 'Current file name' })\r\n    @ApiBody({\r\n        schema: {\r\n            type: 'object',\r\n            properties: { newFolder: { type: 'string' }, newFilename: { type: 'string' } },\r\n        },\r\n    })\r\n    moveFile(\r\n        @Param('folder') folder: string,\r\n        @Param('filename') filename: string,\r\n        @Body() moveFileDto: MoveFileDto\r\n    ) {\r\n        return this.fileService.moveFile(folder, filename, moveFileDto);\r\n    }\r\n\r\n    @Post('folders/:folder/files/:filename/copy')\r\n    @ApiOperation({ summary: 'Copy a file to another location' })\r\n    @ApiResponse({ status: 201, description: 'File copied successfully' })\r\n    @ApiResponse({ status: 400, description: 'Invalid destination' })\r\n    @ApiResponse({ status: 404, description: 'File not found' })\r\n    @ApiParam({ name: 'folder', description: 'Source folder' })\r\n    @ApiParam({ name: 'filename', description: 'File to copy' })\r\n    @ApiBody({ schema: { type: 'object', properties: { newFolder: { type: 'string' } } } })\r\n    copyFile(\r\n        @Param('folder') folder: string,\r\n        @Param('filename') filename: string,\r\n        @Body() copyFileDto: CopyFileDto\r\n    ) {\r\n        return this.fileService.copyFile(folder, filename, copyFileDto);\r\n    }\r\n\r\n    @Get('folders/:folder/files/download-all')\r\n    @ApiOperation({ summary: 'Download all files in a folder as a ZIP archive' })\r\n    @ApiParam({ name: 'folder', description: 'Folder name' })\r\n    async downloadAllFiles(@Param('folder') folder: string, @Res() res: Response) {\r\n        return this.fileService.downloadAllFiles(folder, res);\r\n    }\r\n\r\n    @Get('folders/:folder/files/temp-links')\r\n    @ApiOperation({ summary: 'Get temporary access links for all files in a folder' })\r\n    @ApiParam({ name: 'folder', description: 'Folder name' })\r\n    getTemporaryLinks(@Param('folder') folder: string) {\r\n        return this.fileService.getTemporaryLinks(folder);\r\n    }\r\n\r\n    @ApiTags('File Sharing')\r\n    @Get('folders/:folder/files/:filename/temp-link')\r\n    @ApiOperation({ summary: 'Generate a temporary access link for a file' })\r\n    @ApiParam({ name: 'folder', description: 'Folder name' })\r\n    @ApiParam({ name: 'filename', description: 'File name' })\r\n    getTemporaryFileLink(@Param('folder') folder: string, @Param('filename') filename: string) {\r\n        return this.fileService.getTemporaryFileLink(folder, filename);\r\n    }\r\n\r\n    @ApiTags('Search & Browse')\r\n    @Get('folders/:folder/files/search')\r\n    @ApiOperation({ summary: 'Search for files by name in a folder' })\r\n    @ApiParam({ name: 'folder', description: 'Folder name' })\r\n    @ApiQuery({ name: 'pattern', description: 'Regex pattern for matching filenames' })\r\n    searchFiles(@Param('folder') folder: string, @Query('pattern') pattern: string) {\r\n        return this.fileService.searchFiles(folder, pattern);\r\n    }\r\n\r\n    // =====================================================\r\n\r\n    // JSON File Endpoints (with dedicated \"json\" prefix)\r\n    // =====================================================\r\n\r\n    @ApiTags('JSON Operations')\r\n    @Get('json/folders/:folder/files/:filename')\r\n    @ApiOperation({ \r\n        summary: 'Retrieve the entire JSON file',\r\n        description: 'Returns the complete contents of a JSON file'\r\n    })\r\n    @ApiResponse({\r\n        status: 200,\r\n        description: 'JSON file contents retrieved successfully',\r\n        type: JsonFileResponse\r\n    })\r\n    @ApiResponse({\r\n        status: 404,\r\n        description: 'JSON file not found',\r\n        type: ErrorResponse\r\n    })\r\n    @ApiResponse({\r\n        status: 500,\r\n        description: 'Error parsing JSON file',\r\n        type: ErrorResponse\r\n    })\r\n    getJsonFile(\r\n        @Param('folder') folder: string,\r\n        @Param('filename') filename: string\r\n    ) {\r\n        return this.fileService.getJsonFile(folder, filename);\r\n    }\r\n\r\n    @ApiTags('JSON Operations')\r\n    @Get('json/folders/:folder/files/:filename/*path')\r\n    @ApiOperation({ \r\n        summary: 'Retrieve a nested value from a JSON file by key path',\r\n        description: 'Returns a specific value from a JSON file using a path with / as separator'\r\n    })\r\n    @ApiResponse({\r\n        status: 200,\r\n        description: 'JSON value retrieved successfully',\r\n        type: JsonValueResponse\r\n    })\r\n    @ApiResponse({\r\n        status: 400,\r\n        description: 'Invalid path or key not found',\r\n        type: ErrorResponse\r\n    })\r\n    @ApiResponse({\r\n        status: 404,\r\n        description: 'JSON file not found',\r\n        type: ErrorResponse\r\n    })\r\n    @ApiParam({\r\n        name: 'path',\r\n        description: 'Path to the nested value (e.g., user/profile/name)',\r\n        type: String\r\n    })\r\n    getNestedJsonValue(\r\n        @Param('folder') folder: string,\r\n        @Param('filename') filename: string,\r\n        @Param() pathParams: JsonPathParams\r\n    ) {\r\n        return this.fileService.getNestedJsonValue(folder, filename, pathParams);\r\n    }\r\n\r\n    @ApiTags('JSON Operations')\r\n    @Get('json/folders/:folder/files/:filename/query')\r\n    @ApiOperation({\r\n        summary: 'Query a JSON file using dot notation',\r\n        description: 'Query JSON data using dot notation and array indices. Example: users[0].profile.name'\r\n    })\r\n    @ApiResponse({\r\n        status: 200,\r\n        description: 'JSON value retrieved successfully',\r\n        type: JsonValueResponse\r\n    })\r\n    @ApiResponse({\r\n        status: 400,\r\n        description: 'Invalid query format or path not found',\r\n        type: ErrorResponse\r\n    })\r\n    @ApiResponse({\r\n        status: 404,\r\n        description: 'JSON file not found',\r\n        type: ErrorResponse\r\n    })\r\n    @ApiQuery({\r\n        name: 'query',\r\n        description: 'JSON path query using dot notation (e.g., users[0].profile.name)',\r\n        required: true,\r\n        type: String\r\n    })\r\n    queryJsonFile(\r\n        @Param('folder') folder: string,\r\n        @Param('filename') filename: string,\r\n        @Query('query') query: string\r\n    ) {\r\n        return this.fileService.queryJsonFile(folder, filename, query);\r\n    }\r\n\r\n    // =====================================================\r\n\r\n    // Additional File Endpoints\r\n    // =====================================================\r\n\r\n    @ApiTags('File Operations')\r\n    @Delete('folders/:folder/files/:filename')\r\n    @ApiOperation({ summary: 'Delete a file from a folder' })\r\n    @ApiParam({ name: 'folder', description: 'Folder name' })\r\n    @ApiParam({ name: 'filename', description: 'File name' })\r\n    deleteFile(@Param('folder') folder: string, @Param('filename') filename: string) {\r\n        return this.fileService.deleteFile(folder, filename);\r\n    }\r\n\r\n    @ApiTags('File Metadata')\r\n    @Put('folders/:folder/files/:filename/metadata')\r\n    @ApiOperation({ summary: 'Update file metadata' })\r\n    @ApiResponse({ status: 200, description: 'File metadata updated successfully' })\r\n    @ApiResponse({ status: 400, description: 'Invalid metadata' })\r\n    @ApiResponse({ status: 404, description: 'File not found' })\r\n    @ApiParam({ name: 'folder', description: 'Folder name' })\r\n    @ApiParam({ name: 'filename', description: 'File name' })\r\n    @ApiBody({\r\n        schema: {\r\n            type: 'object',\r\n            properties: {\r\n                newFilename: { type: 'string', description: 'New filename' },\r\n                newFolder: { type: 'string', description: 'New folder' },\r\n            },\r\n        },\r\n    })\r\n    updateFileMetadata(\r\n        @Param('folder') folder: string,\r\n        @Param('filename') filename: string,\r\n        @Body() updateFileMetadataDto: UpdateFileMetadataDto\r\n    ) {\r\n        return this.fileService.updateFileMetadata(folder, filename, updateFileMetadataDto);\r\n    }\r\n\r\n    @Get('folders/:folder/size')\r\n    @ApiOperation({ summary: 'Get the total size of a folder' })\r\n    @ApiParam({ name: 'folder', description: 'Folder name' })\r\n    getFolderSize(@Param('folder') folder: string) {\r\n        return this.fileService.getFolderSize(folder);\r\n    }\r\n\r\n    @Get('folders/:folder/files')\r\n    @ApiOperation({ summary: 'List all files in a folder' })\r\n    @ApiParam({ name: 'folder', description: 'Folder name' })\r\n    listFiles(@Param('folder') folder: string) {\r\n        return this.fileService.listFiles(folder);\r\n    }\r\n\r\n    @Get('folders/:folder/files/:filename/thumbnail')\r\n    @ApiOperation({ summary: 'Get a thumbnail of an image or video file' })\r\n    @ApiParam({ name: 'folder', description: 'Folder name' })\r\n    @ApiParam({ name: 'filename', description: 'File name' })\r\n    getThumbnail(\r\n        @Param('folder') folder: string, \r\n        @Param('filename') filename: string,\r\n        @Res() res: Response\r\n    ) {\r\n        return this.fileService.getThumbnail(folder, filename, res);\r\n    }\r\n\r\n    // =====================================================\r\n\r\n    // File Retrieval Endpoint (Catch-all for file serving)\r\n    // =====================================================\r\n\r\n    @ApiTags('File Operations')\r\n    @Get('folders/:folder/files/:filename')\r\n    @ApiOperation({ summary: 'Retrieve a file from a folder' })\r\n    @ApiParam({ name: 'folder', description: 'Folder name' })\r\n    @ApiParam({ name: 'filename', description: 'File name' })\r\n    getFile(@Param('folder') folder: string, @Param('filename') filename: string, @Res() res: Response) {\r\n        return this.fileService.getFile(folder, filename, res);\r\n    }\r\n\r\n    // =====================================================\r\n\r\n    // Additional Folder Endpoints\r\n    // =====================================================\r\n\r\n    @ApiTags('Folder Management')\r\n    @Put('folders/:folder/rename')\r\n    @ApiOperation({ summary: 'Rename a folder' })\r\n    @ApiResponse({ status: 200, description: 'Folder renamed successfully' })\r\n    @ApiResponse({ status: 400, description: 'Invalid folder name' })\r\n    @ApiResponse({ status: 404, description: 'Folder not found' })\r\n    @ApiParam({ name: 'folder', description: 'Current folder name' })\r\n    @ApiBody({ schema: { type: 'object', properties: { newFolderName: { type: 'string' } } } })\r\n    renameFolder(\r\n        @Param('folder') folder: string,\r\n        @Body() renameFolderDto: RenameFolderDto\r\n    ) {\r\n        return this.fileService.renameFolder(folder, renameFolderDto.newFolderName);\r\n    }\r\n\r\n    @ApiTags('Folder Management')\r\n    @Put('folders/:folder/move')\r\n    @ApiOperation({ summary: 'Move a folder to a different location' })\r\n    @ApiResponse({ status: 200, description: 'Folder moved successfully' })\r\n    @ApiResponse({ status: 400, description: 'Invalid destination' })\r\n    @ApiResponse({ status: 404, description: 'Folder not found' })\r\n    @ApiParam({ name: 'folder', description: 'Current folder name' })\r\n    @ApiBody({ schema: { type: 'object', properties: { newLocation: { type: 'string' } } } })\r\n    moveFolder(\r\n        @Param('folder') folder: string,\r\n        @Body() moveFolderDto: MoveFolderDto\r\n    ) {\r\n        return this.fileService.moveFolder(folder, moveFolderDto.newLocation);\r\n    }\r\n\r\n    @Get('folders/:folder/files/:filename/preview')\r\n    @ApiOperation({ summary: 'Get a preview of a file' })\r\n    @ApiParam({ name: 'folder', description: 'Folder name' })\r\n    @ApiParam({ name: 'filename', description: 'File name' })\r\n    getFilePreview(\r\n        @Param('folder') folder: string, \r\n        @Param('filename') filename: string, \r\n        @Req() req: Request,\r\n        @Res() res: Response\r\n    ) {\r\n        return this.fileService.getFilePreview(folder, filename, req, res);\r\n    }\r\n\r\n    @ApiTags('Search & Browse')\r\n    @Get('folders/tree')\r\n    @ApiOperation({ summary: 'Get a hierarchical tree structure of folders and files' })\r\n    @ApiResponse({\r\n        status: 200,\r\n        description: 'Folder tree retrieved successfully',\r\n        type: FolderTreeResponse\r\n    })\r\n    getFolderTree(): Promise<FolderTreeResponse> {\r\n        return this.fileService.getFolderTree();\r\n    }\r\n\r\n    @ApiTags('File Sharing')\r\n    @Post('folders/:folder/files/:filename/share')\r\n    @ApiOperation({ summary: 'Generate a shareable link for a file' })\r\n    @ApiResponse({\r\n        status: 200,\r\n        description: 'Shareable link generated',\r\n        type: ShareableLinkResponse\r\n    })\r\n    @ApiResponse({ \r\n        status: 404, \r\n        description: 'File not found' \r\n    })\r\n    @ApiParam({ name: 'folder', description: 'Folder name' })\r\n    @ApiParam({ name: 'filename', description: 'File name' })\r\n    generateShareableLink(@Param('folder') folder: string, @Param('filename') filename: string): Promise<ShareableLinkResponse> {\r\n        return this.fileService.generateShareableLink(folder, filename);\r\n    }\r\n\r\n    @ApiTags('File Locking')\r\n    @Put('folders/:folder/files/:filename/lock')\r\n    @ApiOperation({ summary: 'Lock a file for editing' })\r\n    @ApiParam({ name: 'folder', description: 'Folder name' })\r\n    @ApiParam({ name: 'filename', description: 'File name' })\r\n    @ApiResponse({\r\n        status: 400,\r\n        description: 'File is already locked',\r\n        type: ErrorResponse\r\n    })\r\n    @ApiResponse({\r\n        status: 404,\r\n        description: 'File not found',\r\n        type: ErrorResponse\r\n    })\r\n    @ApiResponse({\r\n        status: 500,\r\n        description: 'Error locking file',\r\n        type: ErrorResponse\r\n    })\r\n    lockFile(@Param('folder') folder: string, @Param('filename') filename: string) {\r\n        return this.fileService.lockFile(folder, filename);\r\n    }\r\n\r\n    @ApiTags('File Locking')\r\n    @Put('folders/:folder/files/:filename/unlock')\r\n    @ApiOperation({ summary: 'Unlock a file for editing' })\r\n    @ApiParam({ name: 'folder', description: 'Folder name' })\r\n    @ApiParam({ name: 'filename', description: 'File name' })\r\n    unlockFile(@Param('folder') folder: string, @Param('filename') filename: string) {\r\n        return this.fileService.unlockFile(folder, filename);\r\n    }\r\n\r\n    @ApiTags('Search & Browse')\r\n    @Get('files/recent')\r\n    @ApiOperation({ summary: 'Get a list of recently modified files' })\r\n    getRecentFiles() {\r\n        return this.fileService.getRecentFiles();\r\n    }\r\n\r\n    @ApiTags('File Versions')\r\n    @Get('folders/:folder/files/:filename/versions')\r\n    @ApiOperation({ summary: 'Get different versions of a file' })\r\n    @ApiResponse({\r\n        status: 200,\r\n        description: 'File versions retrieved successfully',\r\n        type: FileVersionResponse\r\n    })\r\n    @ApiResponse({ \r\n        status: 404, \r\n        description: 'File not found' \r\n    })\r\n    @ApiParam({ name: 'folder', description: 'Folder name' })\r\n    @ApiParam({ name: 'filename', description: 'File name' })\r\n    getFileVersions(@Param('folder') folder: string, @Param('filename') filename: string): Promise<FileVersionResponse> {\r\n        return this.fileService.getFileVersions(folder, filename);\r\n    }\r\n\r\n    @Get('metrics/file-operations')\r\n    @ApiOperation({\r\n        summary: 'Get file operation metrics',\r\n        description: 'Retrieve metrics about recent file operations including success rate and performance data'\r\n    })\r\n    @ApiResponse({\r\n        status: 200,\r\n        description: 'File operation metrics retrieved successfully',\r\n        type: FileOperationMetricsResponse\r\n    })\r\n    @ApiQuery({ \r\n        name: 'timeWindow', \r\n        required: false, \r\n        description: 'Time window in milliseconds for failure rate calculation',\r\n        type: Number,\r\n        example: 3600000\r\n    })\r\n    @ApiQuery({ \r\n        name: 'limit', \r\n        required: false, \r\n        description: 'Maximum number of metrics to return',\r\n        type: Number,\r\n        example: 100\r\n    })\r\n    getFileOperationMetrics(\r\n        @Query('timeWindow', new DefaultValuePipe(3600000), ParseIntPipe) timeWindow: number,\r\n        @Query('limit', new DefaultValuePipe(100), ParseIntPipe) limit: number\r\n    ): FileOperationMetricsResponse {\r\n        const metrics = FileOperationMonitor.getMetrics(limit);\r\n        const failureRate = FileOperationMonitor.getFailureRate(timeWindow);\r\n        \r\n        return {\r\n            metrics,\r\n            failureRate,\r\n            timeWindow,\r\n            totalOperations: metrics.length\r\n        };\r\n    }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { FileController } from './file.controller';\r\nimport { FileService } from './file.service';\r\nimport { MulterModule } from '@nestjs/platform-express';\r\nimport { ScheduleModule } from '@nestjs/schedule';\r\nimport { FILE_CONFIG } from './config/file.config';\r\n\r\n@Module({\r\n  imports: [\r\n    MulterModule.register({\r\n      dest: FILE_CONFIG.STORAGE_PATH,\r\n    }),\r\n    ScheduleModule.forRoot(),\r\n  ],\r\n  controllers: [FileController],\r\n  providers: [FileService],\r\n})\r\nexport class FileModule {}\r\n","import { Injectable, BadRequestException, NotFoundException, InternalServerErrorException, Logger, OnModuleInit } from '@nestjs/common';\r\nimport { diskStorage } from 'multer';\r\nimport { Response, Request } from 'express';\r\nimport { join, resolve } from 'path';\r\nimport * as fs from 'fs';\r\nimport * as archiver from 'archiver';\r\nimport * as mime from 'mime-types';\r\nimport * as sharp from 'sharp';\r\nimport { Express } from 'express';\r\nimport { FILE_CONFIG } from './config/file.config';\r\nimport { VIEW_CONFIG } from './config/view.config';\r\nimport { createReadStream } from 'fs';\r\nimport { lookup } from 'mime-types';\r\nimport { Interval } from '@nestjs/schedule';\r\nimport { FileCleanupUtil } from './utils/file-cleanup.util';\r\nimport { promisify } from 'util';\r\nimport {\r\n    FileMetadataResponse,\r\n    FolderResponse,\r\n    FolderDetailsResponse,\r\n    ShareableLinkResponse,\r\n    FileVersionResponse,\r\n    FolderTreeResponse,\r\n    JsonFileResponse,\r\n    JsonValueResponse\r\n} from './dto/responses.dto';\r\nimport { JsonPathValidator, JsonPathValidationError } from './utils/json-path.validator';\r\nimport { FileOperationError, FileErrorCodes } from './utils/file-operation-error';\r\nimport { FileOperationResult, withFileOperation } from './utils/file-operation-wrapper';\r\nimport { spawn } from 'child_process';\r\nimport { createServer } from 'http';\r\nimport { JSDOM } from 'jsdom';\r\n\r\ntype MimeType = typeof VIEW_CONFIG.IMAGE_TYPES[number] | \r\n                typeof VIEW_CONFIG.PDF_TYPES[number] | \r\n                typeof VIEW_CONFIG.TEXT_TYPES[number];\r\n\r\n@Injectable()\r\nexport class FileService implements OnModuleInit {\r\n    private readonly logger = new Logger(FileService.name);\r\n\r\n    private getSafePath(...segments: string[]): string {\r\n        const filePath = join(...segments);\r\n        const resolvedPath = resolve(filePath);\r\n        const uploadsPath = resolve(FILE_CONFIG.STORAGE_PATH);\r\n        if (!resolvedPath.startsWith(uploadsPath)) {\r\n            throw new Error(`Invalid path detected: ${resolvedPath}`);\r\n        }\r\n        return filePath;\r\n    }\r\n\r\n    // Method to validate file type\r\n    public validateFileType(file: Express.Multer.File): boolean {\r\n        return FILE_CONFIG.ALLOWED_FILE_TYPES.includes(file.mimetype as MimeType);\r\n    }\r\n\r\n    // Method to validate file size\r\n    public validateFileSize(file: Express.Multer.File): boolean {\r\n        return file.size <= FILE_CONFIG.MAX_FILE_SIZE;\r\n    }\r\n\r\n    async listFolders(): Promise<FolderResponse> {\r\n        const result = await withFileOperation('listFolders', async () => {\r\n            if (!fs.existsSync(FILE_CONFIG.STORAGE_PATH)) {\r\n                fs.mkdirSync(FILE_CONFIG.STORAGE_PATH, { recursive: true });\r\n            }\r\n            const folders = fs.readdirSync(FILE_CONFIG.STORAGE_PATH, { withFileTypes: true })\r\n                .filter((dirent) => dirent.isDirectory())\r\n                .map((dirent) => dirent.name);\r\n            return { folders };\r\n        });\r\n\r\n        if (!result.success) {\r\n            this.logger.error(`Failed to list folders: ${result.error.message}`);\r\n            throw new InternalServerErrorException('Failed to list folders');\r\n        }\r\n\r\n        return result.data;\r\n    }\r\n\r\n    async getFolderDetails(folder: string, page = 1, limit = 10): Promise<FolderDetailsResponse> {\r\n        const folderPath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folder);\r\n        if (!fs.existsSync(folderPath)) {\r\n            this.logger.error(`Folder not found: ${folder}`);\r\n            throw new NotFoundException('Folder not found');\r\n        }\r\n        const files = fs.readdirSync(folderPath);\r\n        const startIndex = (page - 1) * limit;\r\n        const endIndex = page * limit;\r\n        const paginatedFiles = files.slice(startIndex, endIndex);\r\n        return {\r\n            folder,\r\n            files: paginatedFiles,\r\n            totalFiles: files.length,\r\n            page,\r\n            limit,\r\n        };\r\n    }\r\n\r\n    async createFolder(folderName: string) {\r\n        const result = await withFileOperation('createFolder', async () => {\r\n            const folderPath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folderName);\r\n            if (fs.existsSync(folderPath)) {\r\n                throw new FileOperationError(\r\n                    'Folder already exists',\r\n                    FileErrorCodes.FOLDER_EXISTS,\r\n                    'createFolder',\r\n                    { folderName }\r\n                );\r\n            }\r\n            fs.mkdirSync(folderPath, { recursive: true });\r\n            return { message: 'Folder created successfully', folder: folderName };\r\n        });\r\n\r\n        if (!result.success) {\r\n            if (result.error.code === FileErrorCodes.FOLDER_EXISTS) {\r\n                throw new BadRequestException(result.error.message);\r\n            }\r\n            this.logger.error(`Failed to create folder: ${result.error.message}`);\r\n            throw new InternalServerErrorException('Failed to create folder');\r\n        }\r\n\r\n        return result.data;\r\n    }\r\n\r\n    async deleteFolder(folder: string) {\r\n        const result = await withFileOperation('deleteFolder', async () => {\r\n            const folderPath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folder);\r\n            if (!fs.existsSync(folderPath)) {\r\n                throw new FileOperationError(\r\n                    'Folder not found',\r\n                    FileErrorCodes.FILE_NOT_FOUND,\r\n                    'deleteFolder',\r\n                    { folder }\r\n                );\r\n            }\r\n\r\n            const files = fs.readdirSync(folderPath);\r\n            if (files.length > 0) {\r\n                throw new FileOperationError(\r\n                    'Cannot delete non-empty folder',\r\n                    FileErrorCodes.FOLDER_NOT_EMPTY,\r\n                    'deleteFolder',\r\n                    { folder, fileCount: files.length }\r\n                );\r\n            }\r\n\r\n            fs.rmdirSync(folderPath);\r\n            return { message: 'Folder deleted successfully' };\r\n        });\r\n\r\n        if (!result.success) {\r\n            if (result.error.code === FileErrorCodes.FILE_NOT_FOUND) {\r\n                throw new NotFoundException(result.error.message);\r\n            }\r\n            if (result.error.code === FileErrorCodes.FOLDER_NOT_EMPTY) {\r\n                throw new BadRequestException(result.error.message);\r\n            }\r\n            this.logger.error(`Failed to delete folder: ${result.error.message}`);\r\n            throw new InternalServerErrorException('Failed to delete folder');\r\n        }\r\n\r\n        return result.data;\r\n    }\r\n\r\n    getDestination(req, file, cb) {\r\n        try {\r\n            const folderPath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, req.params.folder);\r\n            if (!fs.existsSync(folderPath)) {\r\n                fs.mkdirSync(folderPath, { recursive: true });\r\n            }\r\n            cb(null, folderPath);\r\n        } catch (error) {\r\n            cb(error, null);\r\n        }\r\n    }\r\n\r\n    getFilename(req, file, cb) {\r\n        try {\r\n            const extension = file.originalname.substring(file.originalname.lastIndexOf('.'));\r\n            const baseFilename = req.query.filename || 'uploaded_file';\r\n\r\n            const files = (req as any).files as Express.Multer.File[];\r\n\r\n            let finalFilename: string;\r\n\r\n            if (files.length === 1) {\r\n                finalFilename = `${baseFilename}${extension}`;\r\n            } else {\r\n                if (!(req as any)._fileCounter) {\r\n                    (req as any)._fileCounter = 0;\r\n                }\r\n\r\n                (req as any)._fileCounter++;\r\n                finalFilename = `${baseFilename}${(req as any)._fileCounter}${extension}`;\r\n            }\r\n\r\n            cb(null, finalFilename);\r\n        } catch (error) {\r\n            cb(error, null);\r\n        }\r\n    }\r\n\r\n    uploadFiles(folder: string, files: Express.Multer.File[], filenameQuery?: string) {\r\n        if (!files || files.length === 0) {\r\n            this.logger.error(`No files provided for folder ${folder}`);\r\n            throw new BadRequestException('File upload failed: No files provided');\r\n        }\r\n\r\n        const uploadedFiles = files.map(file => {\r\n            if (!this.validateFileType(file)) {\r\n                this.logger.error(`Invalid file type: ${file.mimetype} for ${file.originalname}`);\r\n                throw new BadRequestException(`Invalid file type for ${file.originalname}`);\r\n            }\r\n            if (!this.validateFileSize(file)) {\r\n                this.logger.error(`File size exceeds limit: ${file.size} bytes`);\r\n                throw new BadRequestException(`File size exceeds limit for ${file.originalname}`);\r\n            }\r\n            this.logger.log(`File uploaded: ${file.filename} to folder: ${folder}`);\r\n            return { filename: file.filename };\r\n        });\r\n\r\n        return { message: 'Files uploaded successfully', files: uploadedFiles };\r\n    }\r\n\r\n    downloadFile(folder: string, filename: string, res: Response) {\r\n        const filePath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folder, filename);\r\n        if (!fs.existsSync(filePath)) {\r\n            this.logger.error(`File not found: ${filename} in folder: ${folder}`);\r\n            throw new NotFoundException('File not found');\r\n        }\r\n        return res.download(filePath);\r\n    }\r\n\r\n    async getFileMetadata(folder: string, filename: string): Promise<FileMetadataResponse> {\r\n        const filePath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folder, filename);\r\n        if (!fs.existsSync(filePath)) {\r\n            this.logger.error(`File not found: ${filename} in folder: ${folder}`);\r\n            throw new NotFoundException('File not found');\r\n        }\r\n        try {\r\n            const stats = fs.statSync(filePath);\r\n            return {\r\n                filename,\r\n                size: stats.size,\r\n                createdAt: stats.birthtime,\r\n                modifiedAt: stats.mtime,\r\n            };\r\n        } catch (error) {\r\n            this.logger.error(`Error retrieving metadata for ${filename}: ${error.message}`);\r\n            throw new InternalServerErrorException('Error retrieving file metadata');\r\n        }\r\n    }\r\n\r\n    moveFile(folder: string, filename: string, body: { newFolder?: string; newFilename?: string }) {\r\n        const oldPath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folder, filename);\r\n        const newFolder = body.newFolder || folder;\r\n        const newFilename = body.newFilename || filename;\r\n        const newFolderPath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, newFolder);\r\n        if (!fs.existsSync(newFolderPath)) {\r\n            try {\r\n                fs.mkdirSync(newFolderPath, { recursive: true });\r\n                this.logger.log(`Created destination folder: ${newFolder}`);\r\n            } catch (error) {\r\n                this.logger.error(`Error creating folder ${newFolder}: ${error.message}`);\r\n                throw new InternalServerErrorException('Failed to create destination folder');\r\n            }\r\n        }\r\n        const newPath = this.getSafePath(newFolderPath, newFilename);\r\n        if (fs.existsSync(newPath)) {\r\n            this.logger.error(`File already exists at destination: ${newPath}`);\r\n            throw new BadRequestException('File already exists at destination');\r\n        }\r\n        try {\r\n            fs.renameSync(oldPath, newPath);\r\n            this.logger.log(`File moved from ${oldPath} to ${newPath}`);\r\n            return { message: 'File moved/renamed successfully', newPath };\r\n        } catch (error) {\r\n            this.logger.error(`Error moving file: ${error.message}`);\r\n            throw new InternalServerErrorException('Error moving file');\r\n        }\r\n    }\r\n\r\n    copyFile(folder: string, filename: string, body: { newFolder?: string }) {\r\n        const oldPath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folder, filename);\r\n        const newFolder = body.newFolder || folder;\r\n        const newFolderPath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, newFolder);\r\n        if (!fs.existsSync(oldPath)) {\r\n            this.logger.error(`File not found: ${filename} in folder: ${folder}`);\r\n            throw new NotFoundException('File not found');\r\n        }\r\n        if (!fs.existsSync(newFolderPath)) {\r\n            try {\r\n                fs.mkdirSync(newFolderPath, { recursive: true });\r\n                this.logger.log(`Created destination folder: ${newFolder}`);\r\n            } catch (error) {\r\n                this.logger.error(`Error creating folder ${newFolder}: ${error.message}`);\r\n                throw new InternalServerErrorException('Failed to create destination folder');\r\n            }\r\n        }\r\n        const newPath = this.getSafePath(newFolderPath, filename);\r\n        try {\r\n            fs.copyFileSync(oldPath, newPath);\r\n            this.logger.log(`File copied from ${oldPath} to ${newPath}`);\r\n            return { message: 'File copied successfully', newPath };\r\n        } catch (error) {\r\n            this.logger.error(`Error copying file: ${error.message}`);\r\n            throw new InternalServerErrorException('Error copying file');\r\n        }\r\n    }\r\n\r\n    async downloadAllFiles(folder: string, res: Response) {\r\n        const folderPath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folder);\r\n        if (!fs.existsSync(folderPath)) {\r\n            this.logger.error(`Folder not found: ${folder}`);\r\n            throw new NotFoundException('Folder not found');\r\n        }\r\n        const files = fs.readdirSync(folderPath);\r\n        if (files.length === 0) {\r\n            this.logger.warn(`No files found in folder: ${folder}`);\r\n            throw new BadRequestException('No files available in this folder');\r\n        }\r\n        const archive = archiver('zip', { zlib: { level: 9 } });\r\n        res.attachment(`${folder}.zip`);\r\n        archive.pipe(res);\r\n        files.forEach((file) => {\r\n            try {\r\n                const filePath = this.getSafePath(folderPath, file);\r\n                archive.file(filePath, { name: file });\r\n            } catch (error) {\r\n                this.logger.error(`Error adding file ${file} to ZIP: ${error.message}`);\r\n            }\r\n        });\r\n        try {\r\n            await archive.finalize();\r\n            this.logger.log(`ZIP archive generated for folder: ${folder}`);\r\n        } catch (error) {\r\n            this.logger.error(`Error finalizing ZIP: ${error.message}`);\r\n            throw new InternalServerErrorException('Error generating ZIP archive');\r\n        }\r\n    }\r\n\r\n    getTemporaryLinks(folder: string) {\r\n        const folderPath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folder);\r\n        if (!fs.existsSync(folderPath)) {\r\n            this.logger.error(`Folder not found: ${folder}`);\r\n            throw new NotFoundException('Folder not found');\r\n        }\r\n        const files = fs.readdirSync(folderPath);\r\n        if (files.length === 0) {\r\n            this.logger.warn(`No files found in folder: ${folder}`);\r\n            throw new BadRequestException('No files available in this folder');\r\n        }\r\n        const fileLinks = files.map((file) => ({\r\n            filename: file,\r\n            url: `${process.env.serviceUrl}/folders/${folder}/files/${file}?temp=true`,\r\n        }));\r\n        return { folder, fileLinks };\r\n    }\r\n\r\n    getTemporaryFileLink(folder: string, filename: string) {\r\n        return { url: `${process.env.serviceUrl}/folders/${folder}/files/${filename}?temp=true` };\r\n    }\r\n\r\n    searchFiles(folder: string, pattern: string) {\r\n        const folderPath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folder);\r\n        if (!fs.existsSync(folderPath)) {\r\n            this.logger.error(`Folder not found: ${folder}`);\r\n            throw new NotFoundException('Folder not found');\r\n        }\r\n        let regex: RegExp;\r\n        try {\r\n            regex = new RegExp(pattern, 'i');\r\n        } catch (error) {\r\n            this.logger.error(`Invalid regex: ${pattern}`);\r\n            throw new BadRequestException('Invalid regular expression');\r\n        }\r\n        const files = fs.readdirSync(folderPath);\r\n        const matchingFiles = files.filter((file) => regex.test(file));\r\n        return { folder, pattern, matchingFiles };\r\n    }\r\n\r\n    async getJsonFile(folder: string, filename: string): Promise<JsonFileResponse> {\r\n        const filePath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folder, `${filename}.json`);\r\n        if (!fs.existsSync(filePath)) {\r\n            this.logger.error(`JSON file not found: ${filename}.json in folder ${folder}`);\r\n            throw new NotFoundException('JSON file not found');\r\n        }\r\n        try {\r\n            const fileContent = fs.readFileSync(filePath, 'utf-8');\r\n            return { content: JSON.parse(fileContent) };\r\n        } catch (error) {\r\n            this.logger.error(`Error parsing JSON file ${filename}.json: ${error.message}`);\r\n            throw new InternalServerErrorException('Error parsing JSON file');\r\n        }\r\n    }\r\n\r\n    async getNestedJsonValue(folder: string, filename: string, pathParams: any): Promise<JsonValueResponse> {\r\n        const wildcardPath = pathParams[\"path\"][0] || '';\r\n        const keys = wildcardPath.split('/').filter((key) => key !== '');\r\n        \r\n        try {\r\n            JsonPathValidator.validate(keys);\r\n            \r\n            const filePath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folder, `${filename}.json`);\r\n            if (!fs.existsSync(filePath)) {\r\n                this.logger.error(`JSON file not found: ${filename}.json in folder ${folder}`);\r\n                throw new NotFoundException('JSON file not found');\r\n            }\r\n\r\n            const fileContent = fs.readFileSync(filePath, 'utf-8');\r\n            let result = JSON.parse(fileContent);\r\n\r\n            for (const key of keys) {\r\n                if (result[key] === undefined) {\r\n                    this.logger.error(`Key '${key}' not found in ${filename}.json`);\r\n                    throw new BadRequestException(`Key '${key}' not found`);\r\n                }\r\n                result = result[key];\r\n            }\r\n            return { value: result };\r\n        } catch (error) {\r\n            if (error instanceof JsonPathValidationError) {\r\n                throw new BadRequestException(error.message);\r\n            }\r\n            if (error instanceof BadRequestException) {\r\n                throw error;\r\n            }\r\n            this.logger.error(`Error processing JSON file ${filename}.json: ${error.message}`);\r\n            throw new InternalServerErrorException('Error processing JSON file');\r\n        }\r\n    }\r\n    \r\n    async queryJsonFile(folder: string, filename: string, query: string): Promise<JsonValueResponse> {\r\n        try {\r\n            JsonPathValidator.validateJsonQuery(query);\r\n            \r\n            const filePath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folder, `${filename}.json`);\r\n            if (!fs.existsSync(filePath)) {\r\n                this.logger.error(`JSON file not found: ${filename}.json in folder ${folder}`);\r\n                throw new NotFoundException('JSON file not found');\r\n            }\r\n\r\n            const fileContent = fs.readFileSync(filePath, 'utf-8');\r\n            const jsonData = JSON.parse(fileContent);\r\n            \r\n            const segments = query.split('.');\r\n            let result = jsonData;\r\n\r\n            for (const segment of segments) {\r\n                const arrayMatch = segment.match(/^(\\w+)\\[(\\d+)\\]$/);\r\n                if (arrayMatch) {\r\n                    const [_, key, index] = arrayMatch;\r\n                    result = result[key]?.[parseInt(index, 10)];\r\n                } else {\r\n                    result = result[segment];\r\n                }\r\n                \r\n                if (result === undefined) {\r\n                    throw new BadRequestException(`Path '${query}' not found in JSON`);\r\n                }\r\n            }\r\n\r\n            return { value: result };\r\n        } catch (error) {\r\n            if (error instanceof JsonPathValidationError || error instanceof BadRequestException) {\r\n                throw new BadRequestException(error.message);\r\n            }\r\n            this.logger.error(`Error querying JSON file ${filename}.json: ${error.message}`);\r\n            throw new InternalServerErrorException('Error processing JSON file');\r\n        }\r\n    }\r\n\r\n    deleteFile(folder: string, filename: string) {\r\n        const filePath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folder, filename);\r\n        if (!fs.existsSync(filePath)) {\r\n            this.logger.error(`File not found: ${filename} in folder: ${folder}`);\r\n            throw new NotFoundException('File not found');\r\n        }\r\n        try {\r\n            fs.rmSync(filePath);\r\n            this.logger.log(`File deleted successfully: ${filename} from folder: ${folder}`);\r\n            return { message: 'File deleted successfully' };\r\n        } catch (error) {\r\n            this.logger.error(`Error deleting file ${filename}: ${error.message}`);\r\n            throw new InternalServerErrorException('Error deleting file');\r\n        }\r\n    }\r\n\r\n    updateFileMetadata(folder: string, filename: string, body: { newFilename?: string; newFolder?: string }) {\r\n        const oldPath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folder, filename);\r\n        const newFolder = body.newFolder || folder;\r\n        const newFilename = body.newFilename || filename;\r\n        const newFolderPath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, newFolder);\r\n        if (!fs.existsSync(newFolderPath)) {\r\n            try {\r\n                fs.mkdirSync(newFolderPath, { recursive: true });\r\n                this.logger.log(`Created destination folder: ${newFolder}`);\r\n            } catch (error) {\r\n                this.logger.error(`Error creating folder ${newFolder}: ${error.message}`);\r\n                throw new InternalServerErrorException('Failed to create destination folder');\r\n            }\r\n        }\r\n        const newPath = this.getSafePath(newFolderPath, newFilename);\r\n        if (fs.existsSync(newPath)) {\r\n            this.logger.error(`File already exists at destination: ${newPath}`);\r\n            throw new BadRequestException('File already exists at destination');\r\n        }\r\n        try {\r\n            fs.renameSync(oldPath, newPath);\r\n            this.logger.log(`File metadata updated from ${oldPath} to ${newPath}`);\r\n            return { message: 'File metadata updated successfully', newPath };\r\n        } catch (error) {\r\n            this.logger.error(`Error updating file metadata: ${error.message}`);\r\n            throw new InternalServerErrorException('Error updating file metadata');\r\n        }\r\n    }\r\n\r\n    getFolderSize(folder: string) {\r\n        const folderPath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folder);\r\n        if (!fs.existsSync(folderPath)) {\r\n            this.logger.error(`Folder not found: ${folder}`);\r\n            throw new NotFoundException('Folder not found');\r\n        }\r\n        const getSize = (dirPath: string): number => {\r\n            const files = fs.readdirSync(dirPath);\r\n            return files.reduce((total, file) => {\r\n                const filePath = this.getSafePath(dirPath, file);\r\n                const stats = fs.statSync(filePath);\r\n                return total + (stats.isDirectory() ? getSize(filePath) : stats.size);\r\n            }, 0);\r\n        };\r\n        const size = getSize(folderPath);\r\n        return { folder, size };\r\n    }\r\n\r\n    listFiles(folder: string) {\r\n        const folderPath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folder);\r\n        if (!fs.existsSync(folderPath)) {\r\n            this.logger.error(`Folder not found: ${folder}`);\r\n            throw new NotFoundException('Folder not found');\r\n        }\r\n        const files = fs.readdirSync(folderPath);\r\n        return { folder, files };\r\n    }\r\n\r\n    getFile(folder: string, filename: string, res: Response) {\r\n        const filePath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folder, filename);\r\n        if (!fs.existsSync(filePath)) {\r\n            this.logger.error(`File not found: ${filename} in folder: ${folder}`);\r\n            throw new NotFoundException('File not found');\r\n        }\r\n        return res.sendFile(filePath);\r\n    }\r\n\r\n    renameFolder(folder: string, newFolderName: string) {\r\n        const oldFolderPath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folder);\r\n        const newFolderPath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, newFolderName);\r\n        if (!fs.existsSync(oldFolderPath)) {\r\n            this.logger.error(`Folder not found: ${folder}`);\r\n            throw new NotFoundException('Folder not found');\r\n        }\r\n        if (fs.existsSync(newFolderPath)) {\r\n            this.logger.error(`Folder already exists: ${newFolderName}`);\r\n            throw new BadRequestException('Folder already exists');\r\n        }\r\n        try {\r\n            fs.renameSync(oldFolderPath, newFolderPath);\r\n            this.logger.log(`Folder renamed from ${folder} to ${newFolderName}`);\r\n            return { message: 'Folder renamed successfully', newFolderName };\r\n        } catch (error) {\r\n            this.logger.error(`Error renaming folder ${folder}: ${error.message}`);\r\n            throw new InternalServerErrorException('Error renaming folder');\r\n        }\r\n    }\r\n\r\n    // Method to move a folder to a different location\r\n    moveFolder(folder: string, newLocation: string) {\r\n        const oldFolderPath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folder);\r\n        const newFolderPath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, newLocation, folder);\r\n        if (!fs.existsSync(oldFolderPath)) {\r\n            this.logger.error(`Folder not found: ${folder}`);\r\n            throw new NotFoundException('Folder not found');\r\n        }\r\n        if (fs.existsSync(newFolderPath)) {\r\n            this.logger.error(`Folder already exists at destination: ${newFolderPath}`);\r\n            throw new BadRequestException('Folder already exists at destination');\r\n        }\r\n        try {\r\n            fs.renameSync(oldFolderPath, newFolderPath);\r\n            this.logger.log(`Folder moved from ${oldFolderPath} to ${newFolderPath}`);\r\n            return { message: 'Folder moved successfully', newFolderPath };\r\n        } catch (error) {\r\n            this.logger.error(`Error moving folder ${folder}: ${error.message}`);\r\n            throw new InternalServerErrorException('Error moving folder');\r\n        }\r\n    }\r\n\r\n    // Method to get a preview of a file\r\n    async getFilePreview(folder: string, filename: string, req: Request, res: Response) {\r\n        const filePath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folder, filename);\r\n        if (!fs.existsSync(filePath)) {\r\n            this.logger.error(`File not found: ${filename} in folder: ${folder}`);\r\n            throw new NotFoundException('File not found');\r\n        }\r\n\r\n        const stats = fs.statSync(filePath);\r\n        const mimeType = lookup(filePath) || 'application/octet-stream';\r\n\r\n        // For large files, only show preview if supported\r\n        if (stats.size > VIEW_CONFIG.PREVIEW_SIZE_LIMIT) {\r\n            if (!this.isPreviewSupported(mimeType)) {\r\n                throw new BadRequestException('Preview not available for this file type or size');\r\n            }\r\n        }\r\n\r\n        try {\r\n            // Handle image previews\r\n            if (VIEW_CONFIG.IMAGE_TYPES.includes(mimeType)) {\r\n                const thumbnail = await sharp(filePath)\r\n                    .resize({\r\n                        width: VIEW_CONFIG.THUMBNAIL_OPTIONS.width,\r\n                        height: VIEW_CONFIG.THUMBNAIL_OPTIONS.height,\r\n                        fit: sharp.fit.inside,\r\n                        withoutEnlargement: true\r\n                    })\r\n                    .toBuffer();\r\n                \r\n                res.setHeader('Content-Type', mimeType);\r\n                return res.send(thumbnail);\r\n            }\r\n\r\n            // Handle video and audio previews - Stream with range support\r\n            if (VIEW_CONFIG.VIDEO_TYPES.includes(mimeType) || VIEW_CONFIG.AUDIO_TYPES.includes(mimeType)) {\r\n                const range = req.headers.range;\r\n                if (range) {\r\n                    const parts = range.replace(/bytes=/, \"\").split(\"-\");\r\n                    const start = parseInt(parts[0], 10);\r\n                    const end = parts[1] ? parseInt(parts[1], 10) : stats.size - 1;\r\n                    const chunkSize = (end - start) + 1;\r\n                    const stream = fs.createReadStream(filePath, { start, end });\r\n\r\n                    const headers = {\r\n                        'Content-Range': `bytes ${start}-${end}/${stats.size}`,\r\n                        'Accept-Ranges': 'bytes',\r\n                        'Content-Length': chunkSize,\r\n                        'Content-Type': mimeType,\r\n                    };\r\n\r\n                    res.writeHead(206, headers);\r\n                    return stream.pipe(res);\r\n                } else {\r\n                    const headers = {\r\n                        'Content-Length': stats.size,\r\n                        'Content-Type': mimeType,\r\n                        'Accept-Ranges': 'bytes',\r\n                    };\r\n                    res.writeHead(200, headers);\r\n                    return fs.createReadStream(filePath).pipe(res);\r\n                }\r\n            }\r\n\r\n            // Handle text previews\r\n            if (VIEW_CONFIG.TEXT_TYPES.includes(mimeType)) {\r\n                const content = fs.readFileSync(filePath, 'utf-8');\r\n                const preview = content.substring(0, 1000) + (content.length > 1000 ? '...' : '');\r\n                return { preview, mimeType };\r\n            }\r\n\r\n            // Handle PDF previews\r\n            if (VIEW_CONFIG.PDF_TYPES.includes(mimeType)) {\r\n                res.setHeader('Content-Type', mimeType);\r\n                res.setHeader('Content-Range', `bytes 0-${Math.min(stats.size, VIEW_CONFIG.PREVIEW_SIZE_LIMIT)}`);\r\n                const stream = createReadStream(filePath, { start: 0, end: VIEW_CONFIG.PREVIEW_SIZE_LIMIT - 1 });\r\n                return stream.pipe(res);\r\n            }\r\n\r\n            throw new BadRequestException('Preview not available for this file type');\r\n        } catch (error) {\r\n            this.logger.error(`Error generating preview for ${filename}: ${error.message}`);\r\n            throw new InternalServerErrorException('Error generating file preview');\r\n        }\r\n    }\r\n\r\n    async getThumbnail(folder: string, filename: string, res: Response) {\r\n        const filePath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folder, filename);\r\n        if (!fs.existsSync(filePath)) {\r\n            this.logger.error(`File not found: ${filename} in folder: ${folder}`);\r\n            throw new NotFoundException('File not found');\r\n        }\r\n\r\n        const mimeType = lookup(filePath) || 'application/octet-stream';\r\n        const thumbnailsDir = this.getSafePath(FILE_CONFIG.STORAGE_PATH, '.thumbnails');\r\n        const thumbnailPath = this.getSafePath(thumbnailsDir, `${folder}_${filename}.jpg`);\r\n\r\n        try {\r\n            // Handle image thumbnails\r\n            if (VIEW_CONFIG.IMAGE_TYPES.includes(mimeType)) {\r\n                const thumbnail = await sharp(filePath)\r\n                    .resize({\r\n                        width: VIEW_CONFIG.THUMBNAIL_OPTIONS.width,\r\n                        height: VIEW_CONFIG.THUMBNAIL_OPTIONS.height,\r\n                        fit: 'contain',\r\n                        background: VIEW_CONFIG.THUMBNAIL_OPTIONS.background\r\n                    })\r\n                    .jpeg({ quality: VIEW_CONFIG.THUMBNAIL_OPTIONS.quality })\r\n                    .toBuffer();\r\n                \r\n                res.setHeader('Content-Type', 'image/jpeg');\r\n                return res.send(thumbnail);\r\n            }\r\n\r\n            // For video types, try to extract frame or generate dynamic thumbnail\r\n            if (VIEW_CONFIG.VIDEO_TYPES.includes(mimeType)) {\r\n                res.setHeader('Content-Type', 'image/jpeg');\r\n                return res.send(undefined);\r\n            }\r\n\r\n            throw new BadRequestException('Thumbnail not available for this file type');\r\n        } catch (error) {\r\n            this.logger.error(`Error generating thumbnail for ${filename}: ${error.message}`);\r\n            throw new InternalServerErrorException('Error generating thumbnail');\r\n        }\r\n    }\r\n    \r\n    private isPreviewSupported(mimeType: string): boolean {\r\n        const supportedTypes = [\r\n            ...VIEW_CONFIG.IMAGE_TYPES,\r\n            ...VIEW_CONFIG.PDF_TYPES,\r\n            ...VIEW_CONFIG.TEXT_TYPES,\r\n            ...VIEW_CONFIG.AUDIO_TYPES,\r\n            ...VIEW_CONFIG.VIDEO_TYPES\r\n        ] as string[];\r\n        return supportedTypes.includes(mimeType);\r\n    }\r\n\r\n    // Method to get a hierarchical tree structure of folders and files\r\n    async getFolderTree(): Promise<FolderTreeResponse> {\r\n        const buildTree = (dirPath: string) => {\r\n            const name = dirPath.split('/').pop();\r\n            const item = { name, children: [] };\r\n            const files = fs.readdirSync(dirPath, { withFileTypes: true });\r\n            for (const file of files) {\r\n                if (file.isDirectory()) {\r\n                    item.children.push(buildTree(join(dirPath, file.name)));\r\n                } else {\r\n                    item.children.push({ name: file.name });\r\n                }\r\n            }\r\n            return item;\r\n        };\r\n        return buildTree(FILE_CONFIG.STORAGE_PATH);\r\n    }\r\n\r\n    // Method to generate a shareable link for a file\r\n    async generateShareableLink(folder: string, filename: string): Promise<ShareableLinkResponse> {\r\n        const filePath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folder, filename);\r\n        if (!fs.existsSync(filePath)) {\r\n            this.logger.error(`File not found: ${filename} in folder: ${folder}`);\r\n            throw new NotFoundException('File not found');\r\n        }\r\n        const shareableLink = `${process.env.serviceUrl}/folders/${folder}/files/${filename}?share=true`;\r\n        return { shareableLink };\r\n    }\r\n\r\n    // Method to lock a file for editing\r\n    lockFile(folder: string, filename: string) {\r\n        const filePath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folder, filename);\r\n        if (!fs.existsSync(filePath)) {\r\n            this.logger.error(`File not found: ${filename} in folder: ${folder}`);\r\n            throw new NotFoundException('File not found');\r\n        }\r\n        const lockFilePath = `${filePath}.lock`;\r\n        if (fs.existsSync(lockFilePath)) {\r\n            this.logger.error(`File is already locked: ${filename}`);\r\n            throw new BadRequestException('File is already locked');\r\n        }\r\n        try {\r\n            fs.writeFileSync(lockFilePath, '');\r\n            this.logger.log(`File locked successfully: ${filename}`);\r\n            return { message: 'File locked successfully' };\r\n        } catch (error) {\r\n            this.logger.error(`Error locking file ${filename}: ${error.message}`);\r\n            throw new InternalServerErrorException('Error locking file');\r\n        }\r\n    }\r\n\r\n    // Method to unlock a file for editing\r\n    unlockFile(folder: string, filename: string) {\r\n        const filePath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folder, filename);\r\n        if (!fs.existsSync(filePath)) {\r\n            this.logger.error(`File not found: ${filename} in folder: ${folder}`);\r\n            throw new NotFoundException('File not found');\r\n        }\r\n        const lockFilePath = `${filePath}.lock`;\r\n        if (!fs.existsSync(lockFilePath)) {\r\n            this.logger.error(`File is not locked: ${filename}`);\r\n            throw new BadRequestException('File is not locked');\r\n        }\r\n        try {\r\n            fs.rmSync(lockFilePath);\r\n            this.logger.log(`File unlocked successfully: ${filename}`);\r\n            return { message: 'File unlocked successfully' };\r\n        } catch (error) {\r\n            this.logger.error(`Error unlocking file ${filename}: ${error.message}`);\r\n            throw new InternalServerErrorException('Error unlocking file');\r\n        }\r\n    }\r\n\r\n    // Method to get a list of recently modified files\r\n    getRecentFiles() {\r\n        const getRecentFilesFromDir = (dirPath: string) => {\r\n            const files = fs.readdirSync(dirPath, { withFileTypes: true });\r\n            let recentFiles = [];\r\n            for (const file of files) {\r\n                const filePath = join(dirPath, file.name);\r\n                if (file.isDirectory()) {\r\n                    recentFiles = recentFiles.concat(getRecentFilesFromDir(filePath));\r\n                } else {\r\n                    const stats = fs.statSync(filePath);\r\n                    recentFiles.push({ name: file.name, modifiedAt: stats.mtime });\r\n                }\r\n            }\r\n            return recentFiles;\r\n        };\r\n        const recentFiles = getRecentFilesFromDir(FILE_CONFIG.STORAGE_PATH);\r\n        recentFiles.sort((a, b) => b.modifiedAt - a.modifiedAt);\r\n        return recentFiles.slice(0, 10);\r\n    }\r\n\r\n    // Method to get different versions of a file\r\n    async getFileVersions(folder: string, filename: string): Promise<FileVersionResponse> {\r\n        const filePath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, folder, filename);\r\n        if (!fs.existsSync(filePath)) {\r\n            this.logger.error(`File not found: ${filename} in folder: ${folder}`);\r\n            throw new NotFoundException('File not found');\r\n        }\r\n        const versionFiles = fs.readdirSync(FILE_CONFIG.STORAGE_PATH)\r\n            .filter(file => file.startsWith(`${filename}.v`))\r\n            .map(file => ({ version: file.split('.v')[1], filename: file }));\r\n        return { filename, versions: versionFiles };\r\n    }\r\n\r\n    onModuleInit() {\r\n        // Create thumbnails directory if it doesn't exist\r\n        const thumbnailsPath = this.getSafePath(FILE_CONFIG.STORAGE_PATH, '.thumbnails');\r\n        if (!fs.existsSync(thumbnailsPath)) {\r\n            fs.mkdirSync(thumbnailsPath, { recursive: true });\r\n        }\r\n        // Run initial cleanup when service starts\r\n        // this.cleanupFiles();\r\n    }\r\n\r\n    // @Interval(3600000) // Run every hour\r\n    // private async cleanupFiles() {\r\n    //     try {\r\n    //         await FileCleanupUtil.cleanupTempFiles(FILE_CONFIG.STORAGE_PATH);\r\n    //         await FileCleanupUtil.cleanupEmptyFolders(FILE_CONFIG.STORAGE_PATH);\r\n    //         this.logger.log('Completed periodic file cleanup');\r\n    //     } catch (error) {\r\n    //         this.logger.error('Error during file cleanup:', error);\r\n    //     }\r\n    // }\r\n}\r\n","// Detailed error types for file operations\r\nexport class FileOperationError extends Error {\r\n    constructor(\r\n        message: string,\r\n        public readonly code: string,\r\n        public readonly operation: string,\r\n        public readonly details?: any\r\n    ) {\r\n        super(message);\r\n        this.name = 'FileOperationError';\r\n    }\r\n}\r\n\r\nexport const FileErrorCodes = {\r\n    FILE_NOT_FOUND: 'FILE_NOT_FOUND',\r\n    INVALID_PATH: 'INVALID_PATH',\r\n    ACCESS_DENIED: 'ACCESS_DENIED',\r\n    INVALID_OPERATION: 'INVALID_OPERATION',\r\n    STORAGE_FULL: 'STORAGE_FULL',\r\n    FILE_TOO_LARGE: 'FILE_TOO_LARGE',\r\n    INVALID_FILE_TYPE: 'INVALID_FILE_TYPE',\r\n    FOLDER_EXISTS: 'FOLDER_EXISTS',\r\n    FILE_EXISTS: 'FILE_EXISTS',\r\n    FOLDER_NOT_EMPTY: 'FOLDER_NOT_EMPTY',\r\n} as const;","export interface FileOperationMetrics {\r\n    operation: string;\r\n    success: boolean;\r\n    duration: number;\r\n    timestamp: number;\r\n    path?: string;\r\n    error?: string;\r\n}\r\n\r\nexport class FileOperationMonitor {\r\n    private static metrics: FileOperationMetrics[] = [];\r\n    private static readonly MAX_METRICS = 1000;\r\n\r\n    static recordOperation(metric: FileOperationMetrics): void {\r\n        this.metrics.unshift(metric);\r\n        if (this.metrics.length > this.MAX_METRICS) {\r\n            this.metrics.pop();\r\n        }\r\n    }\r\n\r\n    static getMetrics(limit = 100): FileOperationMetrics[] {\r\n        return this.metrics.slice(0, limit);\r\n    }\r\n\r\n    static getFailureRate(timeWindow = 3600000): number {\r\n        const now = Date.now();\r\n        const recentOperations = this.metrics.filter(m => now - m.timestamp < timeWindow);\r\n        if (recentOperations.length === 0) return 0;\r\n        \r\n        const failures = recentOperations.filter(m => !m.success).length;\r\n        return failures / recentOperations.length;\r\n    }\r\n\r\n    static clearMetrics(): void {\r\n        this.metrics = [];\r\n    }\r\n}","import { FileOperationError, FileErrorCodes } from './file-operation-error';\r\nimport { FileOperationMonitor } from './file-operation-monitor';\r\n\r\nexport class FileOperationResult<T> {\r\n    constructor(\r\n        public readonly success: boolean,\r\n        public readonly data?: T,\r\n        public readonly error?: FileOperationError\r\n    ) {}\r\n\r\n    static success<T>(data?: T): FileOperationResult<T> {\r\n        return new FileOperationResult(true, data);\r\n    }\r\n\r\n    static failure<T>(error: FileOperationError): FileOperationResult<T> {\r\n        return new FileOperationResult(false, undefined, error);\r\n    }\r\n}\r\n\r\nasync function withFileOperation<T>(\r\n    operation: string,\r\n    action: () => Promise<T> | T,\r\n    path?: string\r\n): Promise<FileOperationResult<T>> {\r\n    const startTime = Date.now();\r\n    try {\r\n        const result = await action();\r\n        FileOperationMonitor.recordOperation({\r\n            operation,\r\n            success: true,\r\n            duration: Date.now() - startTime,\r\n            timestamp: startTime,\r\n            path\r\n        });\r\n        return FileOperationResult.success(result);\r\n    } catch (error) {\r\n        const duration = Date.now() - startTime;\r\n        FileOperationMonitor.recordOperation({\r\n            operation,\r\n            success: false,\r\n            duration,\r\n            timestamp: startTime,\r\n            path,\r\n            error: error.message\r\n        });\r\n\r\n        if (error instanceof FileOperationError) {\r\n            return FileOperationResult.failure(error);\r\n        }\r\n        \r\n        let fileError: FileOperationError;\r\n        if (error.code === 'ENOENT') {\r\n            fileError = new FileOperationError(\r\n                'File or directory not found',\r\n                FileErrorCodes.FILE_NOT_FOUND,\r\n                operation\r\n            );\r\n        } else if (error.code === 'EACCES') {\r\n            fileError = new FileOperationError(\r\n                'Access denied',\r\n                FileErrorCodes.ACCESS_DENIED,\r\n                operation\r\n            );\r\n        } else if (error.code === 'EEXIST') {\r\n            fileError = new FileOperationError(\r\n                'File or folder already exists',\r\n                FileErrorCodes.FILE_EXISTS,\r\n                operation\r\n            );\r\n        } else if (error.code === 'ENOSPC') {\r\n            fileError = new FileOperationError(\r\n                'No space left on storage',\r\n                FileErrorCodes.STORAGE_FULL,\r\n                operation\r\n            );\r\n        } else {\r\n            fileError = new FileOperationError(\r\n                error.message || 'Unknown error occurred',\r\n                FileErrorCodes.INVALID_OPERATION,\r\n                operation,\r\n                error\r\n            );\r\n        }\r\n        return FileOperationResult.failure(fileError);\r\n    }\r\n}\r\n\r\nexport { withFileOperation };","import { Injectable } from '@nestjs/common';\r\nimport { FileValidator } from '@nestjs/common';\r\nimport { FILE_CONFIG } from '../config/file.config';\r\n\r\n@Injectable()\r\nexport class CustomFileValidator extends FileValidator<{ fileTypes: string[] }> {\r\n    constructor(options: { fileTypes: string[] }) {\r\n        super(options);\r\n    }\r\n\r\n    isValid(file?: Express.Multer.File): boolean {\r\n        if (!file) {\r\n            return false;\r\n        }\r\n\r\n        return this.validationOptions.fileTypes.includes(file.mimetype);\r\n    }\r\n\r\n    buildErrorMessage(): string {\r\n        return `File type must be one of: ${this.validationOptions.fileTypes.join(', ')}`;\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class FileSizeValidator extends FileValidator<{ maxSize: number }> {\r\n    constructor(options: { maxSize: number }) {\r\n        super(options);\r\n    }\r\n\r\n    isValid(file?: Express.Multer.File): boolean {\r\n        if (!file) {\r\n            return false;\r\n        }\r\n\r\n        return file.size <= this.validationOptions.maxSize;\r\n    }\r\n\r\n    buildErrorMessage(): string {\r\n        return `File size must not exceed ${this.validationOptions.maxSize / (1024 * 1024)}MB`;\r\n    }\r\n}","export class JsonPathValidationError extends Error {\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.name = 'JsonPathValidationError';\r\n    }\r\n}\r\n\r\nexport class JsonPathValidator {\r\n    static validate(path: string[]): boolean {\r\n        if (!Array.isArray(path) || path.length === 0) {\r\n            throw new JsonPathValidationError('Path must be a non-empty array');\r\n        }\r\n\r\n        const validKeyRegex = /^[a-zA-Z_$][a-zA-Z0-9_$]*$/;\r\n        for (const segment of path) {\r\n            if (!validKeyRegex.test(segment)) {\r\n                throw new JsonPathValidationError(`Invalid path segment: ${segment}`);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    static validateJsonQuery(query: string): boolean {\r\n        const validQueryRegex = /^[\\w.[\\]]+$/;\r\n        if (!validQueryRegex.test(query)) {\r\n            throw new JsonPathValidationError('Invalid JSON query format');\r\n        }\r\n        return true;\r\n    }\r\n}","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/platform-express\");","module.exports = require(\"@nestjs/schedule\");","module.exports = require(\"@nestjs/swagger\");","module.exports = require(\"archiver\");","module.exports = require(\"class-validator\");","module.exports = require(\"dotenv\");","module.exports = require(\"mime-types\");","module.exports = require(\"multer\");","module.exports = require(\"sharp\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","require('dotenv').config();\r\nimport { NestFactory } from '@nestjs/core';\r\nimport { AppModule } from './app.module';\r\nimport { setupSwagger } from './config/swagger.config';\r\nimport { ValidationPipe } from '@nestjs/common';\r\nimport { CorsOptions } from '@nestjs/common/interfaces/external/cors-options.interface';\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule);\r\n\r\n  // Setup Swagger documentation\r\n  setupSwagger(app);\r\n\r\n  // Enable validation pipe globally\r\n  app.useGlobalPipes(new ValidationPipe({\r\n    whitelist: true,\r\n    transform: true,\r\n    forbidNonWhitelisted: true,\r\n    transformOptions: {\r\n      enableImplicitConversion: true,\r\n    },\r\n  }));\r\n\r\n  // Enable CORS for all origins\r\n  const corsOptions: CorsOptions = {\r\n    origin: '*',\r\n    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS',\r\n    allowedHeaders: 'Content-Type, Accept, Authorization',\r\n    credentials: true,\r\n  };\r\n  app.enableCors(corsOptions);\r\n\r\n  await app.listen(8000);\r\n}\r\nbootstrap();\r\n"],"names":[],"sourceRoot":""}