{"version":3,"file":"index.js","mappings":"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","sources":[".././src/Bot/bot.load-balancer.ts",".././src/Bot/bot.module.ts",".././src/Bot/bot.service.ts",".././src/Bot/dto/bot.dto.ts",".././src/app.controller.ts",".././src/app.module.ts",".././src/app.service.ts",".././src/config/bot.config.ts",".././src/config/swagger.config.ts",".././src/files/config/file.config.ts",".././src/files/config/view.config.ts",".././src/files/dto/requests.dto.ts",".././src/files/dto/responses.dto.ts",".././src/files/file.controller.ts",".././src/files/file.module.interface.ts",".././src/files/file.module.ts",".././src/files/file.service.ts",".././src/files/utils/file-operation-error.ts",".././src/files/utils/file-operation-monitor.ts",".././src/files/utils/file-operation-wrapper.ts",".././src/files/utils/file-validators.ts",".././src/files/utils/json-path.validator.ts","../external commonjs \"@nestjs/common\"","../external commonjs \"@nestjs/config\"","../external commonjs \"@nestjs/core\"","../external commonjs \"@nestjs/platform-express\"","../external commonjs \"@nestjs/swagger\"","../external commonjs \"archiver\"","../external commonjs \"class-validator\"","../external commonjs \"dotenv\"","../external node-commonjs \"fs\"","../external commonjs \"mime-types\"","../external commonjs \"multer\"","../external commonjs \"node-telegram-bot-api\"","../external node-commonjs \"path\"","../webpack/bootstrap",".././src/main.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport Bot from 'node-telegram-bot-api';\nimport { tgBotConfig } from '../config/bot.config';\n@Injectable()\nexport class botLoadBalancer {\n  private readonly bots: Array<{\n    bot: Bot;\n    operationCount: number;\n    config: tgBotConfig;\n  }> = [];\n  private readonly logger = new Logger(botLoadBalancer.name);\n\n  getBotOperationCount(bot: Bot): number {\n    const botInfo = this.bots.find((b) => b.bot === bot);\n    return botInfo?.operationCount || 0;\n  }\n\n  getBotMaxOperations(bot: Bot): number {\n    const botInfo = this.bots.find((b) => b.bot === bot);\n    return botInfo?.config.maxConcurrentOperations || 0;\n  }\n\n  getBotUtilizationPercentage(bot: Bot): number {\n    const maxOps = this.getBotMaxOperations(bot);\n    if (!maxOps) return 0;\n    return (this.getBotOperationCount(bot) / maxOps) * 100;\n  }\n\n  public addBot(config: tgBotConfig): void {\n    const bot = new Bot(config.token, { polling: true });\n    this.bots.push({\n      bot,\n      operationCount: 0,\n      config,\n    });\n    this.logger.log(\n      `Added new bot to the pool. Total bots: ${this.bots.length}`,\n    );\n  }\n\n  public getNextBot(): Bot {\n    if (!this.bots.length) {\n      throw new Error('No bots available in the pool');\n    }\n\n    // Find bot with least operations\n    const selectedBot = this.bots.reduce((prev, curr) => {\n      return prev.operationCount <= curr.operationCount ? prev : curr;\n    });\n\n    if (\n      selectedBot.operationCount >= selectedBot.config.maxConcurrentOperations\n    ) {\n      // this.logger.warn('All bots are at maximum capacity');\n      // Return least loaded bot anyway as fallback\n    }\n\n    selectedBot.operationCount++;\n    return selectedBot.bot;\n  }\n\n  public releaseBot(bot: Bot): void {\n    const botInfo = this.bots.find((b) => b.bot === bot);\n    if (botInfo) {\n      botInfo.operationCount = Math.max(0, botInfo.operationCount - 1);\n    }\n  }\n\n  public getAllBots(): Bot[] {\n    return this.bots.map((b) => b.bot);\n  }\n\n  public getBotToken(bot: Bot): string | undefined {\n    const botInfo = this.bots.find((b) => b.bot === bot);\n    return botInfo?.config.token;\n  }\n\n  public getBotByToken(token: string): Bot | undefined {\n    for (const botInfo of this.bots) {\n      if (botInfo.config.token === token) {\n        return botInfo.bot;\n      }\n    }\n    return undefined;\n  }\n\n  public getBots() {\n    return this.bots;\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { botService } from './bot.service';\nimport { botLoadBalancer } from './bot.load-balancer';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [botService, botLoadBalancer],\n  exports: [botService],\n})\nexport class botModule {}\n","import { Injectable, OnModuleInit, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport bot from 'node-telegram-bot-api';\nimport { botLoadBalancer } from './bot.load-balancer';\nimport botConfig, { BotUtils, tgConfig } from '../config/bot.config';\nimport {\n  BroadcastMessageDto,\n  BotStatusResponseDto,\n  ConfigurationResponseDto,\n  BroadcastResponseDto,\n  MessageType,\n} from './dto/bot.dto';\n\n@Injectable()\nexport class botService implements OnModuleInit {\n  private readonly logger = new Logger(botService.name);\n  private readonly config: tgConfig;\n  private readonly MAX_RETRIES = 3;\n  private readonly RETRY_DELAY = 1000; // 1 second\n  private messageQueue: Map<\n    string,\n    {\n      retries: number;\n      message: bot.Message;\n      channelId: string;\n    }\n  > = new Map();\n\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly loadBalancer: botLoadBalancer,\n  ) {\n    this.config = this.configService.get<tgConfig>('bot');\n  }\n\n  async onModuleInit() {\n    this.logger.log('Initializing bot service...');\n    await this.initializeBots();\n    this.startMessageQueueProcessor();\n    this.logger.log('bot service initialized successfully');\n  }\n\n  private async initializeBots() {\n    if (!this.config?.bots?.length) {\n      this.logger.warn('No bots configured in bot config');\n      return;\n    }\n\n    this.logger.debug(`Initializing ${this.config.bots.length} bots...`);\n    const initPromises = this.config.bots.map(async (botConfig) => {\n      try {\n        this.loadBalancer.addBot(botConfig);\n        const bot = this.loadBalancer.getBotByToken(botConfig.token);\n        if (bot) {\n          this.setupMessageHandlers(bot);\n          const botInfo = await bot.getMe();\n          this.logger.log(`Bot @${botInfo.username} initialized successfully`);\n        }\n      } catch (error) {\n        this.logger.error(\n          `Failed to initialize bot with token ${botConfig.token.slice(0, 6)}...`,\n          error.stack,\n        );\n        this.queueBotRecovery(botConfig);\n      }\n    });\n\n    await Promise.allSettled(initPromises);\n  }\n\n  private queueBotRecovery(botConfig: any) {\n    this.logger.debug(\n      `Queuing recovery for bot with token ${botConfig.token.slice(0, 6)}...`,\n    );\n    setTimeout(() => {\n      try {\n        this.loadBalancer.addBot(botConfig);\n        const bot = this.loadBalancer.getBotByToken(botConfig.token);\n        if (bot) {\n          this.setupMessageHandlers(bot);\n          this.logger.log(\n            `Successfully recovered bot with token ${botConfig.token.slice(0, 6)}...`,\n          );\n        }\n      } catch (error) {\n        this.logger.error(\n          `Failed to recover bot with token ${botConfig.token.slice(0, 6)}...`,\n          error.stack,\n        );\n        this.logger.warn(\n          `Bot recovery failed, retrying... Token: ${botConfig.token.slice(0, 6)}...`,\n        );\n        this.queueBotRecovery(botConfig);\n      }\n    }, this.RETRY_DELAY);\n  }\n\n  private startMessageQueueProcessor() {\n    this.logger.log('Starting message queue processor');\n    setInterval(() => this.processMessageQueue(), 1000);\n  }\n\n  private async processMessageQueue() {\n    if (this.messageQueue.size === 0) return;\n\n    this.logger.debug(\n      `Processing message queue. Size: ${this.messageQueue.size}`,\n    );\n    for (const [messageId, queueItem] of this.messageQueue) {\n      const bot = this.loadBalancer.getNextBot();\n      try {\n        await this.forwardMessage(bot, queueItem.message, queueItem.channelId);\n        this.messageQueue.delete(messageId);\n        this.logger.debug(`Successfully processed queued message ${messageId}`);\n      } catch (error) {\n        if (queueItem.retries >= this.MAX_RETRIES) {\n          this.messageQueue.delete(messageId);\n          this.logger.error(\n            `Failed to forward message ${messageId} after ${this.MAX_RETRIES} ${(await bot.getMe()).username} retries:`,\n            error.stack,\n          );\n          this.notifyAdmin(\n            `Failed to forward message after ${this.MAX_RETRIES} retries: ${error.message}`,\n          );\n        } else {\n          queueItem.retries++;\n          this.logger.warn(\n            `Retry ${queueItem.retries}/${this.MAX_RETRIES} for message ${messageId}`,\n          );\n        }\n      }\n    }\n  }\n\n  private setupMessageHandlers(bot: bot) {\n    bot.on('message', (msg) => {\n      this.handleIncomingMessage(bot, msg).catch((error) =>\n        this.handleMessageError(error, msg, bot),\n      );\n    });\n\n    bot.on('error', (error) => {\n      this.notifyAdmin(`Bot error occurred: ${error.message}`);\n    });\n  }\n\n  private async handleMessageError(\n    error: Error,\n    message: bot.Message,\n    bot: bot,\n  ) {\n    const messageId = `${message.chat.id}-${message.message_id}`;\n    const botToken = this.loadBalancer.getBotToken(bot);\n    const matchingChannel = this.config.channels.find((channel) =>\n      channel.botTokens.includes(botToken),\n    );\n    if (!this.messageQueue.has(messageId)) {\n      this.messageQueue.set(messageId, {\n        retries: 0,\n        message,\n        channelId: matchingChannel?.channelId,\n      });\n    }\n    await this.notifyAdmin(`Message queued for retry: ${error.message}`);\n  }\n\n  private async notifyAdmin(message: string) {\n    if (!this.config.adminChatId) return;\n\n    try {\n      const bot = this.loadBalancer.getNextBot();\n      await bot.sendMessage(this.config.adminChatId, message);\n    } catch {\n      // Silent fail for admin notifications\n    }\n  }\n\n  private async handleIncomingMessage(\n    bot: bot,\n    message: bot.Message,\n  ) {\n    const messageId = `${message.chat.id}-${message.message_id}`;\n\n    // Only handle messages from private chats\n    // if (message.chat.type !== 'private') {\n    //   this.logger.debug(`Skipping non-private message ${messageId}`);\n    //   return;\n    // }\n\n    // Skip messages containing 'start' (case insensitive)\n    if (message.text?.toLowerCase().startsWith('start')) {\n      this.logger.debug(`Skipping start command message ${messageId}`);\n      return;\n    }\n\n    const botToken = this.loadBalancer.getBotToken(bot);\n    const matchingChannel = this.config.channels.find((channel) =>\n      channel.botTokens.includes(botToken),\n    );\n\n    if (!matchingChannel) {\n      this.logger.warn(\n        `No channel configured for bot token: ${botToken.slice(0, 6)}...`,\n      );\n      await this.notifyAdmin(\n        `⚠️ Configuration issue: No channel configured for bot token: ${botToken.slice(0, 6)}...`,\n      );\n      return;\n    }\n\n    try {\n      await this.forwardMessageWithRetry(\n        bot,\n        message,\n        matchingChannel.channelId,\n      );\n      await this.notifyAdmin(\n        `Message forwarded to channel ${matchingChannel.channelId}`,\n      );\n    } catch (error) {\n      this.logger.warn(\n        `Failed to forward message ${messageId}, queueing for retry: ${error.message}`,\n      );\n      this.messageQueue.set(messageId, {\n        retries: 0,\n        message,\n        channelId: matchingChannel.channelId,\n      });\n      await this.notifyAdmin(`Message queued for retry: ${error.message}`);\n    }\n  }\n\n  private async forwardMessageWithRetry(\n    bot: bot,\n    message: bot.Message,\n    channelId: string,\n    retryCount = 0,\n  ): Promise<void> {\n    const messageId = `${message.chat.id}-${message.message_id}`;\n    try {\n      await this.forwardMessage(bot, message, channelId);\n    } catch (error) {\n      if (retryCount < this.MAX_RETRIES) {\n        this.logger.debug(\n          `Retry attempt ${retryCount + 1} failed, switching to next bot`,\n        );\n        await new Promise((resolve) => setTimeout(resolve, this.RETRY_DELAY));\n        const nextBot = this.loadBalancer.getNextBot();\n        return this.forwardMessageWithRetry(\n          nextBot,\n          message,\n          channelId,\n          retryCount + 1,\n        );\n      }\n      this.logger.error(`All retry attempts failed for message ${messageId}`);\n      throw error;\n    }\n  }\n\n  private async forwardMessage(\n    bot: bot,\n    message: bot.Message,\n    channelId: string,\n  ): Promise<void> {\n    const messageId = `${message.chat.id}-${message.message_id}`;\n    try {\n      await bot.forwardMessage(channelId, message.chat.id, message.message_id);\n      this.logger.debug(`Message ${messageId} forwarded successfully`);\n    } catch (error) {\n      this.logger.error(\n        `Failed to forward message ${messageId} using bot... ${(await bot.getMe()).username}, Text: ${message.text}, Channel: ${channelId }`,\n        error.stack,\n      );\n      this.logger.debug(\n        `Forward attempt failed, trying fallback bot for message ${messageId}`,\n      );\n      const fallbackBot = this.loadBalancer.getNextBot();\n      if (fallbackBot === bot) {\n        this.logger.error(\n          `No available bots for forwarding message ${messageId}`,\n        );\n        throw new Error('No available bots for forwarding');\n      }\n\n      await fallbackBot.forwardMessage(\n        channelId,\n        message.chat.id,\n        message.message_id,\n      );\n      this.logger.debug(\n        `Message ${messageId} forwarded successfully using fallback bot`,\n      );\n    }\n  }\n\n  async broadcastMessage(\n    messageDto: BroadcastMessageDto,\n  ): Promise<BroadcastResponseDto> {\n    this.logger.debug('Starting broadcast message operation');\n    try {\n      const bot = this.loadBalancer.getNextBot();\n      const channel = this.config.channels[0];\n\n      const result = await this.sendMessageByType(\n        bot,\n        channel.channelId,\n        messageDto,\n      );\n      this.logger.log(\n        `Successfully broadcasted message with ID: ${result.message_id}`,\n      );\n\n      return {\n        success: true,\n        messageId: result.message_id.toString(),\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      this.logger.error('Failed to broadcast message:', error.stack);\n      return {\n        success: false,\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  private async sendMessageByType(\n    bot: bot,\n    channelId: string,\n    messageDto: BroadcastMessageDto,\n  ): Promise<bot.Message> {\n    this.logger.debug(\n      `Sending ${messageDto.type} message to channel ${channelId}`,\n    );\n    switch (messageDto.type) {\n      case MessageType.PHOTO:\n        if (!messageDto.mediaUrl) {\n          this.logger.error('Media URL is required for photo messages');\n          throw new Error('Media URL is required for photo messages');\n        }\n        return bot.sendPhoto(channelId, messageDto.mediaUrl, {\n          caption: messageDto.message,\n        });\n\n      case MessageType.VIDEO:\n        if (!messageDto.mediaUrl) {\n          this.logger.error('Media URL is required for video messages');\n          throw new Error('Media URL is required for video messages');\n        }\n        return bot.sendVideo(channelId, messageDto.mediaUrl, {\n          caption: messageDto.message,\n        });\n\n      case MessageType.TEXT:\n      default:\n        return bot.sendMessage(channelId, messageDto.message);\n    }\n  }\n\n  async getBotStatus(): Promise<BotStatusResponseDto[]> {\n    this.logger.debug('Fetching bot status information');\n    const bots = this.loadBalancer.getBots() || [];\n    return bots.map((botInfo, index) => {\n      const operations = this.loadBalancer.getBotOperationCount(botInfo.bot);\n      const maxOps = this.loadBalancer.getBotMaxOperations(botInfo.bot);\n      return {\n        id: index + 1,\n        activeOperations: operations,\n        maxOperations: maxOps,\n        utilizationPercentage: this.loadBalancer.getBotUtilizationPercentage(\n          botInfo.bot,\n        ),\n      };\n    });\n  }\n\n  async getConfiguration(): Promise<ConfigurationResponseDto> {\n    this.logger.debug('Fetching bot service configuration');\n    const firstBot = this.loadBalancer.getBots()?.[0]?.bot;\n    return {\n      channelConfigured: this.config.channels?.length > 0,\n      botsCount: this.config.bots?.length || 0,\n      maxOperationsPerBot: firstBot\n        ? this.loadBalancer.getBotMaxOperations(firstBot)\n        : 0,\n    };\n  }\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEnum,\n  IsString,\n  IsUrl,\n  IsOptional,\n  IsNotEmpty,\n} from 'class-validator';\n\nexport enum MessageType {\n  TEXT = 'text',\n  PHOTO = 'photo',\n  VIDEO = 'video',\n}\n\nexport class BroadcastMessageDto {\n  @ApiProperty({\n    description: 'Message text or caption for media',\n    example: 'Hello everyone! Check out this photo.',\n  })\n  @IsString()\n  @IsNotEmpty()\n  message: string;\n\n  @ApiPropertyOptional({\n    enum: MessageType,\n    default: MessageType.TEXT,\n    description: 'Type of message to broadcast',\n  })\n  @IsEnum(MessageType)\n  @IsOptional()\n  type?: MessageType = MessageType.TEXT;\n\n  @ApiPropertyOptional({\n    description: 'URL of the media to be sent (required for photo/video types)',\n    example: 'https://example.com/image.jpg',\n  })\n  @IsUrl({ protocols: ['http', 'https'], require_protocol: true })\n  @IsOptional()\n  mediaUrl?: string;\n}\n\nexport class BotStatusResponseDto {\n  @ApiProperty({\n    description: 'Unique identifier for the bot',\n    example: 1,\n  })\n  id: number;\n\n  @ApiProperty({\n    description: 'Number of current active operations',\n    example: 5,\n  })\n  activeOperations: number;\n\n  @ApiProperty({\n    description: 'Maximum allowed concurrent operations',\n    example: 10,\n  })\n  maxOperations: number;\n\n  @ApiProperty({\n    description: 'Current utilization percentage',\n    example: 50,\n  })\n  utilizationPercentage: number;\n}\n\nexport class ConfigurationResponseDto {\n  @ApiProperty({\n    description: 'List of allowed media types',\n    example: ['photo', 'video'],\n    isArray: true,\n  })\n  @ApiProperty({\n    description: 'Whether the target channel is properly configured',\n    example: true,\n  })\n  channelConfigured: boolean;\n\n  @ApiProperty({\n    description: 'Total number of configured bots',\n    example: 3,\n  })\n  botsCount: number;\n\n  @ApiProperty({\n    description: 'Maximum concurrent operations allowed per bot',\n    example: 10,\n  })\n  maxOperationsPerBot: number;\n}\n\nexport class BroadcastResponseDto {\n  @ApiProperty({\n    description: 'Whether the broadcast was successful',\n    example: true,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'Message ID in the channel (if available)',\n    example: '12345',\n    required: false,\n  })\n  messageId?: string;\n\n  @ApiProperty({\n    description: 'Timestamp of the broadcast',\n    example: '2025-05-01T12:00:00Z',\n  })\n  timestamp: string;\n}\n","import { Controller, Get } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { AppService } from './app.service';\n\n@ApiTags('Health Check')\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n  @Get()\n  @ApiOperation({ summary: 'Health check endpoint' })\n  @ApiResponse({\n    status: 200,\n    description: 'The service is up and running',\n  })\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { FileModule } from './files/file.module';\nimport { botModule } from './Bot/bot.module';\nimport botConfig from './config/bot.config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [botConfig],\n    }),\n    FileModule.register(),\n    botModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n","import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n","import { registerAs } from '@nestjs/config';\n\nexport interface tgBotConfig {\n  token: string;\n  maxConcurrentOperations: number;\n}\n\nexport interface tgChannelConfig {\n  channelId: string;\n  description?: string;\n  botTokens: string[]; // List of bot tokens that can forward to this channel\n}\n\nexport interface tgConfig {\n  bots: tgBotConfig[];\n  channels: tgChannelConfig[];\n  adminChatId?: string;\n}\n\nexport class BotUtils {\n  private static config: tgConfig;\n\n  static initialize(config: tgConfig) {\n    this.config = config;\n  }\n\n  static getChannelById(channelId: string): tgChannelConfig | undefined {\n    return this.config?.channels.find(\n      (channel) => channel.channelId === channelId,\n    );\n  }\n\n  static getChannelsByBotToken(botToken: string): tgChannelConfig[] {\n    return this.config?.channels.filter((channel) =>\n      channel.botTokens.includes(botToken),\n    ) || [];\n  }\n\n  static canBotAccessChannel(botToken: string, channelId: string): boolean {\n    const channel = this.getChannelById(channelId);\n    return channel ? channel.botTokens.includes(botToken) : false;\n  }\n\n  static getBotsForChannel(channelId: string): tgBotConfig[] {\n    const channel = this.getChannelById(channelId);\n    if (!channel) return [];\n\n    return this.config?.bots.filter((bot) =>\n      channel.botTokens.includes(bot.token),\n    ) || [];\n  }\n\n  static getAllChannels(): tgChannelConfig[] {\n    return this.config?.channels || [];\n  }\n\n  static getAllBots(): tgBotConfig[] {\n    return this.config?.bots || [];\n  }\n\n  static getAdminChatId(): string | undefined {\n    return this.config?.adminChatId;\n  }\n}\n\nexport default registerAs('bot', () => {\n  const maxOps = parseInt(process.env.bot_BOT_MAX_OPERATIONS || '10');\n  const adminChatId = process.env.bot_ADMIN_CHAT_ID;\n  // Parse channel configurations from environment variables\n  const channelConfigs = parseChannelConfigs();\n\n  if (!channelConfigs.length) {\n    console.warn('No bot channel configurations found!');\n  } else {\n    console.log(\n      'Parsed channel configurations:',\n      channelConfigs.map((channel) => ({\n        channelId: channel.channelId,\n        description: channel.description || 'no description',\n        botCount: channel.botTokens.length,\n      })),\n    );\n  }\n\n  // Extract unique bot tokens from channel configurations\n  const uniqueBotTokens = new Set<string>();\n  const botChannelMapping = new Map<string, string[]>();\n\n  channelConfigs.forEach((channel) => {\n    channel.botTokens.forEach((token) => {\n      uniqueBotTokens.add(token);\n      const channels = botChannelMapping.get(token) || [];\n      channels.push(channel.channelId);\n      botChannelMapping.set(token, channels);\n    });\n  });\n\n  if (!uniqueBotTokens.size) {\n    console.warn('No bot bot tokens found in channel configurations!');\n  }\n\n  const config: tgConfig = {\n    bots: Array.from(uniqueBotTokens).map((token) => ({\n      token: token.trim(),\n      maxConcurrentOperations: maxOps,\n    })),\n    channels: channelConfigs,\n    adminChatId,\n  };\n\n  // Initialize the BotUtils with the config\n  BotUtils.initialize(config);\n\n  console.log('Loaded bot configuration:', {\n    botsCount: config.bots.length,\n    channelsCount: config.channels.length,\n    botMappings: Array.from(botChannelMapping.entries()).map(\n      ([token, channels]) => ({\n        botToken: `${token.slice(0, 6)}...`,\n        channels,\n      }),\n    ),\n    hasAdminChatId: !!config.adminChatId,\n    maxOpsPerBot: maxOps,\n  });\n\n  return config;\n});\n\nfunction parseChannelConfigs(): tgChannelConfig[] {\n  const channelConfigs: tgChannelConfig[] = [];\n\n  // Get all environment variables\n  const envVars = Object.keys(process.env);\n\n  // Find all channel config variables (they can be in any order)\n  const channelConfigVars = envVars.filter((key) =>\n    key.startsWith('TELEGRAM_CHANNEL_'),\n  );\n\n  for (const configVar of channelConfigVars) {\n    const channelConfig = process.env[configVar];\n    if (!channelConfig) continue;\n\n    const [channelId, description, botTokensStr] = channelConfig.split('::');\n    if (!channelId || !botTokensStr) {\n      console.warn(`Invalid channel configuration format in ${configVar}`);\n      continue;\n    }\n\n    channelConfigs.push({\n      channelId: channelId.trim(),\n      description: description?.trim(),\n      botTokens: botTokensStr\n        .split(',')\n        .map((token) => token.trim())\n        .filter(Boolean),\n    });\n  }\n\n  return channelConfigs;\n}\n","import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';\nimport { INestApplication } from '@nestjs/common';\nimport * as fs from 'fs';\n\nexport function setupSwagger(app: INestApplication): void {\n  console.log('Setting up Swagger documentation...');\n  const config = new DocumentBuilder()\n    .setTitle('File Storage API')\n    .setDescription(\n      'API for managing files and folders in the Asset Management System',\n    )\n    .setVersion('1.0')\n    .build();\n  const document = SwaggerModule.createDocument(app, config);\n  console.log('Generated Swagger document');\n  fs.writeFileSync('./swagger-spec.json', JSON.stringify(document, null, 2));\n\n  SwaggerModule.setup('api-docs', app, document, {\n    swaggerOptions: {\n      persistAuthorization: true,\n      docExpansion: 'none',\n      filter: true,\n      showRequestDuration: true,\n      syntaxHighlight: {\n        theme: 'monokai',\n      },\n      tryItOutEnabled: true,\n      displayRequestDuration: true,\n    },\n    customSiteTitle: 'File Storage API Documentation',\n    customCss: `\n            .swagger-ui .topbar { display: none }\n            .swagger-ui .info { margin: 20px 0 }\n            .swagger-ui .info .title { color: #2c3e50 }\n            .swagger-ui .info__contact { padding: 1rem 0 }\n            .swagger-ui .markdown p { margin: 1em 0 }\n            .swagger-ui .btn.execute { background-color: #2c3e50 }\n            .swagger-ui .btn.execute:hover { background-color: #34495e }\n        `,\n    customfavIcon: 'https://nestjs.com/favicon.ico',\n  });\n}\n","import { join } from 'path';\n\n// File configuration constants\nexport const FILE_CONFIG = {\n  MAX_FILE_SIZE: 1024 * 1024 * 100, // 100MB\n  MAX_FILES_PER_UPLOAD: 10,\n  ALLOWED_FILE_TYPES: ['image/jpeg', 'image/png', 'application/pdf'],\n  TEMP_LINK_EXPIRY: 24 * 60 * 60 * 1000, // 24 hours in milliseconds\n  STORAGE_PATH: join(process.cwd(), 'uploads'),\n  // Add more configuration as needed\n};\n","export const VIEW_CONFIG = {\n  IMAGE_TYPES: [\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n    'image/svg+xml',\n    'image/bmp',\n  ] as const,\n  PDF_TYPES: ['application/pdf'] as const,\n  TEXT_TYPES: [\n    'text/plain',\n    'text/html',\n    'text/css',\n    'text/javascript',\n    'application/json',\n    'application/xml',\n  ] as const,\n  AUDIO_TYPES: [\n    'audio/mpeg',\n    'audio/wav',\n    'audio/ogg',\n    'audio/mp3',\n    'audio/aac',\n    'audio/webm',\n  ],\n  VIDEO_TYPES: [\n    'video/mp4',\n    'video/mpeg',\n    'video/webm',\n    'video/quicktime',\n    'video/x-msvideo',\n    'video/x-matroska',\n  ],\n  PREVIEW_SIZE_LIMIT: 1024 * 1024 * 100, // 100MB for preview generation\n  THUMBNAIL_OPTIONS: {\n    width: 320,\n    height: 240,\n    quality: 85,\n    format: 'jpeg',\n    fit: 'contain',\n    background: {\n      r: 245,\n      g: 245,\n      b: 245,\n      alpha: 1,\n    },\n  } as const,\n  DEFAULT_THUMBNAILS: {\n    video: 'assets/video-thumbnail.png',\n    audio: 'assets/audio-thumbnail.png',\n  },\n  VIDEO_PREVIEW: {\n    thumbnailTime: '00:00:01',\n    width: 320,\n    height: 240,\n  },\n  AUDIO_PREVIEW: {\n    duration: true,\n    metadata: true,\n    waveform: true,\n  },\n  VIDEO_THUMBNAIL: {\n    timePosition: '00:00:01',\n    frameCount: 1,\n  },\n  THUMBNAIL_STYLES: {\n    background: {\n      startColor: '#1a73e8',\n      endColor: '#174ea6',\n    },\n    text: {\n      color: '#ffffff',\n      fontFamily: 'Arial',\n      fontSize: {\n        title: 12,\n        format: 11,\n      },\n    },\n    playButton: {\n      size: 40,\n      color: '#1a73e8',\n      background: '#ffffff',\n    },\n  },\n};\n","import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsOptional, IsNotEmpty } from 'class-validator';\n\nexport class CreateFolderDto {\n  @ApiProperty({\n    example: 'documents',\n    description: 'Name of the folder to create',\n  })\n  @IsString()\n  @IsNotEmpty()\n  folderName: string;\n}\n\nexport class MoveFileDto {\n  @ApiProperty({\n    example: 'destination',\n    description: 'New folder path for the file',\n  })\n  @IsString()\n  @IsOptional()\n  newFolder?: string;\n\n  @ApiProperty({ example: 'newname.pdf', description: 'New name for the file' })\n  @IsString()\n  @IsOptional()\n  newFilename?: string;\n}\n\nexport class MoveFolderDto {\n  @ApiProperty({\n    example: 'new-location',\n    description: 'New location path for the folder',\n  })\n  @IsString()\n  @IsNotEmpty()\n  newLocation: string;\n}\n\nexport class RenameFolderDto {\n  @ApiProperty({\n    example: 'new-folder-name',\n    description: 'New name for the folder',\n  })\n  @IsString()\n  @IsNotEmpty()\n  newFolderName: string;\n}\n\nexport class CopyFileDto {\n  @ApiProperty({\n    example: 'destination',\n    description: 'Destination folder for the file copy',\n  })\n  @IsString()\n  @IsNotEmpty()\n  newFolder: string;\n}\n\nexport class UpdateFileMetadataDto {\n  @ApiProperty({ example: 'newname.pdf', description: 'New name for the file' })\n  @IsString()\n  @IsOptional()\n  newFilename?: string;\n\n  @ApiProperty({\n    example: 'new-folder',\n    description: 'New folder for the file',\n  })\n  @IsString()\n  @IsOptional()\n  newFolder?: string;\n}\n\nexport class JsonPathParams {\n  @ApiProperty({\n    example: ['user', 'profile', 'name'],\n    description: 'Path segments to the nested value',\n    isArray: true,\n  })\n  @IsString({ each: true })\n  @IsNotEmpty({ each: true })\n  path: string[];\n}\n\nexport class JsonQuery {\n  @ApiProperty({\n    example: 'data.users[0].name',\n    description: 'JSON path query using dot notation',\n  })\n  @IsString()\n  @IsNotEmpty()\n  query: string;\n}\n\nexport class CopyFolderDto {\n  @ApiProperty({\n    example: 'destination-folder',\n    description: 'Destination folder for the folder copy',\n  })\n  @IsString()\n  @IsNotEmpty()\n  destinationFolder: string;\n}\n","import { ApiProperty } from '@nestjs/swagger';\n\nexport class FileMetadataResponse {\n  @ApiProperty({ example: 'document.pdf', description: 'Name of the file' })\n  filename: string;\n\n  @ApiProperty({ example: 1024, description: 'Size of file in bytes' })\n  size: number;\n\n  @ApiProperty({\n    example: '2024-02-20T10:00:00.000Z',\n    description: 'Creation timestamp',\n  })\n  createdAt: Date;\n\n  @ApiProperty({\n    example: '2024-02-20T11:30:00.000Z',\n    description: 'Last modification timestamp',\n  })\n  modifiedAt: Date;\n}\n\nexport class FolderResponse {\n  @ApiProperty({\n    example: ['folder1', 'folder2'],\n    description: 'List of folder names',\n  })\n  folders: string[];\n}\n\nexport class FolderDetailsResponse {\n  @ApiProperty({ example: 'documents', description: 'Name of the folder' })\n  folder: string;\n\n  @ApiProperty({\n    example: ['file1.pdf', 'file2.jpg'],\n    description: 'List of files in the folder',\n  })\n  files: string[];\n\n  @ApiProperty({ example: 100, description: 'Total number of files in folder' })\n  totalFiles: number;\n\n  @ApiProperty({ example: 1, description: 'Current page number' })\n  page: number;\n\n  @ApiProperty({ example: 10, description: 'Number of items per page' })\n  limit: number;\n}\n\nexport class ShareableLinkResponse {\n  @ApiProperty({\n    example:\n      'https://promoteClients2.glitch.me/folders/docs/files/example.pdf?share=true',\n    description: 'Generated shareable link for the file',\n  })\n  shareableLink: string;\n}\n\nexport class FileVersionResponse {\n  @ApiProperty({\n    example: 'document.pdf',\n    description: 'Name of the original file',\n  })\n  filename: string;\n\n  @ApiProperty({\n    example: [\n      { version: '1', filename: 'document.pdf.v1' },\n      { version: '2', filename: 'document.pdf.v2' },\n    ],\n    description: 'List of available versions',\n  })\n  versions: Array<{ version: string; filename: string }>;\n}\n\nexport class FolderTreeResponse {\n  @ApiProperty({ example: 'root', description: 'Name of the current node' })\n  name: string;\n\n  @ApiProperty({\n    example: [{ name: 'folder1', children: [] }, { name: 'file1.pdf' }],\n    description: 'Child nodes (folders and files)',\n  })\n  children: Array<{ name: string; children?: any[] }>;\n}\n\nexport class ErrorResponse {\n  @ApiProperty({ example: 400, description: 'HTTP status code' })\n  statusCode: number;\n\n  @ApiProperty({ example: 'File not found', description: 'Error message' })\n  message: string;\n\n  @ApiProperty({ example: 'Bad Request', description: 'Error type' })\n  error: string;\n}\n\nexport class JsonFileResponse {\n  @ApiProperty({\n    example: {\n      key: 'value',\n      name: 'example',\n      age: 30,\n      nested: {\n        key: 'value',\n      },\n    },\n    description: 'JSON file content',\n  })\n  content: any;\n}\n\nexport class JsonValueResponse {\n  @ApiProperty({\n    example: 'value',\n    description: 'Value at the specified path in the JSON file',\n  })\n  value: any;\n}\n\nexport class FileOperationMetricDto {\n  @ApiProperty({\n    example: 'createFolder',\n    description: 'Name of the file operation',\n  })\n  operation: string;\n\n  @ApiProperty({\n    example: true,\n    description: 'Whether the operation succeeded',\n  })\n  success: boolean;\n\n  @ApiProperty({\n    example: 123,\n    description: 'Duration of operation in milliseconds',\n  })\n  duration: number;\n\n  @ApiProperty({\n    example: 1645564789123,\n    description: 'Timestamp of the operation',\n  })\n  timestamp: number;\n\n  @ApiProperty({\n    example: '/uploads/docs',\n    required: false,\n    description: 'Path involved in the operation',\n  })\n  path?: string;\n\n  @ApiProperty({\n    required: false,\n    description: 'Error message if operation failed',\n  })\n  error?: string;\n}\n\nexport class FileOperationMetricsResponse {\n  @ApiProperty({\n    type: [FileOperationMetricDto],\n    description: 'Recent file operation metrics',\n  })\n  metrics: FileOperationMetricDto[];\n\n  @ApiProperty({\n    example: 0.05,\n    description: 'Rate of failed operations in the time window',\n  })\n  failureRate: number;\n\n  @ApiProperty({ example: 3600000, description: 'Time window in milliseconds' })\n  timeWindow: number;\n\n  @ApiProperty({\n    example: 100,\n    description: 'Total number of operations recorded',\n  })\n  totalOperations: number;\n}\n","import {\n  Controller,\n  Get,\n  Post,\n  Put,\n  Delete,\n  Param,\n  Query,\n  Body,\n  UploadedFiles,\n  UseInterceptors,\n  Res,\n  Logger,\n  DefaultValuePipe,\n  ParseIntPipe,\n  Injectable,\n  ParseFilePipe,\n  BadRequestException,\n  Req,\n} from '@nestjs/common';\nimport { FilesInterceptor } from '@nestjs/platform-express';\nimport { diskStorage } from 'multer';\nimport {\n  CustomFileValidator,\n  FileSizeValidator,\n} from './utils/file-validators';\nimport { FILE_CONFIG } from './config/file.config';\nimport { Response, Request } from 'express';\nimport { FileService } from './file.service';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiParam,\n  ApiResponse,\n  ApiConsumes,\n  ApiBody,\n  ApiQuery,\n} from '@nestjs/swagger';\nimport { existsSync, mkdirSync } from 'fs';\nimport { join, resolve } from 'path';\nimport {\n  CreateFolderDto,\n  MoveFileDto,\n  MoveFolderDto,\n  RenameFolderDto,\n  CopyFileDto,\n  UpdateFileMetadataDto,\n} from './dto/requests.dto';\nimport {\n  FileMetadataResponse,\n  FolderResponse,\n  FolderDetailsResponse,\n  ShareableLinkResponse,\n  FileVersionResponse,\n  FolderTreeResponse,\n  ErrorResponse,\n  JsonFileResponse,\n  JsonValueResponse,\n  FileOperationMetricsResponse,\n} from './dto/responses.dto';\nimport { JsonPathParams } from './dto/requests.dto';\nimport { FileOperationMonitor } from './utils/file-operation-monitor';\n\nconst MAX_FILE_SIZE = 1024 * 1024 * 100; // 100MB\nconst UPLOADS_BASE = join(process.cwd(), 'uploads');\n\nfunction getSafePath(...segments: string[]): string {\n  const filePath = join(...segments);\n  const resolvedPath = resolve(filePath);\n  const uploadsPath = resolve(UPLOADS_BASE);\n  if (!resolvedPath.startsWith(uploadsPath)) {\n    throw new Error(`Invalid path detected: ${resolvedPath}`);\n  }\n  return filePath;\n}\n@ApiTags('Folders & Files')\n@Injectable()\n@Controller()\nexport class FileController {\n  private readonly logger = new Logger(FileController.name);\n  private readonly fileService: FileService;\n\n  constructor(fileService: FileService) {\n    if (!fileService) {\n      throw new Error('FileService is required');\n    }\n    this.fileService = fileService;\n  }\n\n  @Post('folders/:folder/files')\n  @UseInterceptors(\n    FilesInterceptor('files', 10, {\n      storage: diskStorage({\n        destination: (req, file, cb) => {\n          try {\n            const folderName = req.params.folder;\n            const folderPath = getSafePath(UPLOADS_BASE, folderName);\n            if (!existsSync(folderPath)) {\n              mkdirSync(folderPath, { recursive: true });\n              console.log(`Created folder: ${folderPath}`);\n            }\n            cb(null, folderPath);\n          } catch (error) {\n            console.error(`Error setting destination: ${error.message}`);\n            cb(error, null);\n          }\n        },\n        filename: (req, file, cb) => {\n          try {\n            const filenameQuery = req.query.filename as string;\n            const { originalname } = file;\n            const extension = originalname.substring(\n              originalname.lastIndexOf('.'),\n            );\n\n            // Initialize the fileCounter in the request object if not exists\n            if (!(req as any).fileCounter) {\n              (req as any).fileCounter = 0;\n            }\n            (req as any).fileCounter++;\n\n            let finalFilename = originalname;\n            if (filenameQuery) {\n              const currentCount = (req as any).fileCounter;\n              finalFilename = `${filenameQuery}${currentCount}${extension}`;\n            }\n\n            console.log(`Saving file as: ${finalFilename}`);\n            cb(null, finalFilename);\n          } catch (error) {\n            console.error(`Error setting filename: ${error.message}`);\n            cb(error, null);\n          }\n        },\n      }),\n      limits: { fileSize: MAX_FILE_SIZE },\n    }),\n  )\n  @ApiOperation({\n    summary: 'Upload files to a folder',\n    description: 'Upload single or multiple files to a specified folder',\n  })\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    schema: {\n      type: 'object',\n      required: ['files'],\n      properties: {\n        files: {\n          type: 'array',\n          items: { type: 'string', format: 'binary' },\n          description: 'Files to upload',\n        },\n      },\n    },\n  })\n  @ApiParam({ name: 'folder', description: 'Target folder name' })\n  @ApiQuery({\n    name: 'filename',\n    required: false,\n    description: 'Optional custom filename for single file upload',\n  })\n  async uploadFiles(\n    @Param('folder') folder: string,\n    @UploadedFiles(\n      new ParseFilePipe({\n        validators: [\n          new CustomFileValidator({\n            fileTypes: FILE_CONFIG.ALLOWED_FILE_TYPES,\n          }),\n          new FileSizeValidator({ maxSize: FILE_CONFIG.MAX_FILE_SIZE }),\n        ],\n        errorHttpStatusCode: 400,\n      }),\n    )\n    files: Express.Multer.File[],\n  ) {\n    if (!files?.length) {\n      throw new BadRequestException('No files provided');\n    }\n\n    return this.fileService.uploadFiles(folder, files);\n  }\n\n  // =====================================================\n\n  // Folder Endpoints\n  // =====================================================\n\n  @ApiTags('Folder Management')\n  @Get('folders')\n  @ApiOperation({ summary: 'List all folders' })\n  @ApiResponse({\n    status: 200,\n    description: 'Folders listed successfully',\n    type: FolderResponse,\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Server error while listing folders',\n    type: ErrorResponse,\n  })\n  listFolders(): Promise<FolderResponse> {\n    return this.fileService.listFolders();\n  }\n\n  @Get('folders/:folder')\n  @ApiOperation({ summary: 'Get folder details and list files' })\n  @ApiResponse({\n    status: 200,\n    description: 'Folder details retrieved successfully',\n    type: FolderDetailsResponse,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Folder not found',\n  })\n  @ApiParam({ name: 'folder', description: 'Folder name' })\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    description: 'Page number for pagination',\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    description: 'Number of files per page',\n  })\n  getFolderDetails(\n    @Param('folder') folder: string,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n  ): Promise<FolderDetailsResponse> {\n    return this.fileService.getFolderDetails(folder, page, limit);\n  }\n\n  @ApiTags('Folder Management')\n  @Post('folders')\n  @ApiOperation({ summary: 'Create a new folder' })\n  @ApiResponse({\n    status: 201,\n    description: 'Folder created successfully',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Invalid folder name',\n  })\n  @ApiBody({\n    schema: { type: 'object', properties: { folderName: { type: 'string' } } },\n  })\n  createFolder(@Body() createFolderDto: CreateFolderDto) {\n    return this.fileService.createFolder(createFolderDto.folderName);\n  }\n\n  @ApiTags('Folder Management')\n  @Delete('folders/:folder')\n  @ApiOperation({ summary: 'Delete a folder and all its contents' })\n  @ApiParam({ name: 'folder', description: 'Folder to delete' })\n  deleteFolder(@Param('folder') folder: string) {\n    return this.fileService.deleteFolder(folder);\n  }\n\n  // =====================================================\n\n  // File Endpoints (Nested under folders)\n  // =====================================================\n\n  @ApiTags('File Operations')\n  @Get('folders/:folder/files/:filename/download')\n  @ApiOperation({ summary: 'Download a file from a folder' })\n  @ApiParam({ name: 'folder', description: 'Folder name' })\n  @ApiParam({ name: 'filename', description: 'File name' })\n  downloadFile(\n    @Param('folder') folder: string,\n    @Param('filename') filename: string,\n    @Res() res: Response,\n  ) {\n    return this.fileService.downloadFile(folder, filename, res);\n  }\n\n  @ApiTags('File Metadata')\n  @Get('folders/:folder/files/:filename/metadata')\n  @ApiOperation({ summary: 'Get metadata of a file' })\n  @ApiResponse({\n    status: 200,\n    description: 'File metadata retrieved successfully',\n    type: FileMetadataResponse,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'File not found',\n  })\n  @ApiParam({ name: 'folder', description: 'Folder name' })\n  @ApiParam({ name: 'filename', description: 'File name' })\n  getFileMetadata(\n    @Param('folder') folder: string,\n    @Param('filename') filename: string,\n  ): Promise<FileMetadataResponse> {\n    return this.fileService.getFileMetadata(folder, filename);\n  }\n\n  @Put('folders/:folder/files/:filename/move')\n  @ApiOperation({ summary: 'Move or rename a file' })\n  @ApiResponse({\n    status: 200,\n    description: 'File moved successfully',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Invalid destination',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'File not found',\n  })\n  @ApiParam({ name: 'folder', description: 'Current folder of the file' })\n  @ApiParam({ name: 'filename', description: 'Current file name' })\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        newFolder: { type: 'string' },\n        newFilename: { type: 'string' },\n      },\n    },\n  })\n  moveFile(\n    @Param('folder') folder: string,\n    @Param('filename') filename: string,\n    @Body() moveFileDto: MoveFileDto,\n  ) {\n    return this.fileService.moveFile(folder, filename, moveFileDto);\n  }\n\n  @Post('folders/:folder/files/:filename/copy')\n  @ApiOperation({ summary: 'Copy a file to another location' })\n  @ApiResponse({ status: 201, description: 'File copied successfully' })\n  @ApiResponse({ status: 400, description: 'Invalid destination' })\n  @ApiResponse({ status: 404, description: 'File not found' })\n  @ApiParam({ name: 'folder', description: 'Source folder' })\n  @ApiParam({ name: 'filename', description: 'File to copy' })\n  @ApiBody({\n    schema: { type: 'object', properties: { newFolder: { type: 'string' } } },\n  })\n  copyFile(\n    @Param('folder') folder: string,\n    @Param('filename') filename: string,\n    @Body() copyFileDto: CopyFileDto,\n  ) {\n    return this.fileService.copyFile(folder, filename, copyFileDto);\n  }\n\n  @Get('folders/:folder/files/download-all')\n  @ApiOperation({ summary: 'Download all files in a folder as a ZIP archive' })\n  @ApiParam({ name: 'folder', description: 'Folder name' })\n  async downloadAllFiles(\n    @Param('folder') folder: string,\n    @Res() res: Response,\n  ) {\n    return this.fileService.downloadAllFiles(folder, res);\n  }\n\n  @Get('folders/:folder/files/temp-links')\n  @ApiOperation({\n    summary: 'Get temporary access links for all files in a folder',\n  })\n  @ApiParam({ name: 'folder', description: 'Folder name' })\n  getTemporaryLinks(@Param('folder') folder: string) {\n    return this.fileService.getTemporaryLinks(folder);\n  }\n\n  @ApiTags('File Sharing')\n  @Get('folders/:folder/files/:filename/temp-link')\n  @ApiOperation({ summary: 'Generate a temporary access link for a file' })\n  @ApiParam({ name: 'folder', description: 'Folder name' })\n  @ApiParam({ name: 'filename', description: 'File name' })\n  getTemporaryFileLink(\n    @Param('folder') folder: string,\n    @Param('filename') filename: string,\n  ) {\n    return this.fileService.getTemporaryFileLink(folder, filename);\n  }\n\n  @ApiTags('Search & Browse')\n  @Get('folders/:folder/files/search')\n  @ApiOperation({ summary: 'Search for files by name in a folder' })\n  @ApiParam({ name: 'folder', description: 'Folder name' })\n  @ApiQuery({\n    name: 'pattern',\n    description: 'Regex pattern for matching filenames',\n  })\n  searchFiles(\n    @Param('folder') folder: string,\n    @Query('pattern') pattern: string,\n  ) {\n    return this.fileService.searchFiles(folder, pattern);\n  }\n\n  // =====================================================\n\n  // JSON File Endpoints (with dedicated \"json\" prefix)\n  // =====================================================\n\n  @ApiTags('JSON Operations')\n  @Get('json/folders/:folder/files/:filename')\n  @ApiOperation({\n    summary: 'Retrieve the entire JSON file',\n    description: 'Returns the complete contents of a JSON file',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'JSON file contents retrieved successfully',\n    type: JsonFileResponse,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'JSON file not found',\n    type: ErrorResponse,\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Error parsing JSON file',\n    type: ErrorResponse,\n  })\n  getJsonFile(\n    @Param('folder') folder: string,\n    @Param('filename') filename: string,\n  ) {\n    return this.fileService.getJsonFile(folder, filename);\n  }\n\n  @ApiTags('JSON Operations')\n  @Get('json/folders/:folder/files/:filename/*path')\n  @ApiOperation({\n    summary: 'Retrieve a nested value from a JSON file by key path',\n    description:\n      'Returns a specific value from a JSON file using a path with / as separator',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'JSON value retrieved successfully',\n    type: JsonValueResponse,\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Invalid path or key not found',\n    type: ErrorResponse,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'JSON file not found',\n    type: ErrorResponse,\n  })\n  @ApiParam({\n    name: 'path',\n    description: 'Path to the nested value (e.g., user/profile/name)',\n    type: String,\n  })\n  getNestedJsonValue(\n    @Param('folder') folder: string,\n    @Param('filename') filename: string,\n    @Param() pathParams: JsonPathParams,\n  ) {\n    return this.fileService.getNestedJsonValue(folder, filename, pathParams);\n  }\n\n  @ApiTags('JSON Operations')\n  @Get('json/folders/:folder/files/:filename/query')\n  @ApiOperation({\n    summary: 'Query a JSON file using dot notation',\n    description:\n      'Query JSON data using dot notation and array indices. Example: users[0].profile.name',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'JSON value retrieved successfully',\n    type: JsonValueResponse,\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Invalid query format or path not found',\n    type: ErrorResponse,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'JSON file not found',\n    type: ErrorResponse,\n  })\n  @ApiQuery({\n    name: 'query',\n    description:\n      'JSON path query using dot notation (e.g., users[0].profile.name)',\n    required: true,\n    type: String,\n  })\n  queryJsonFile(\n    @Param('folder') folder: string,\n    @Param('filename') filename: string,\n    @Query('query') query: string,\n  ) {\n    return this.fileService.queryJsonFile(folder, filename, query);\n  }\n\n  // =====================================================\n\n  // Additional File Endpoints\n  // =====================================================\n\n  @ApiTags('File Operations')\n  @Delete('folders/:folder/files/:filename')\n  @ApiOperation({ summary: 'Delete a file from a folder' })\n  @ApiParam({ name: 'folder', description: 'Folder name' })\n  @ApiParam({ name: 'filename', description: 'File name' })\n  deleteFile(\n    @Param('folder') folder: string,\n    @Param('filename') filename: string,\n  ) {\n    return this.fileService.deleteFile(folder, filename);\n  }\n\n  @ApiTags('File Metadata')\n  @Put('folders/:folder/files/:filename/metadata')\n  @ApiOperation({ summary: 'Update file metadata' })\n  @ApiResponse({\n    status: 200,\n    description: 'File metadata updated successfully',\n  })\n  @ApiResponse({ status: 400, description: 'Invalid metadata' })\n  @ApiResponse({ status: 404, description: 'File not found' })\n  @ApiParam({ name: 'folder', description: 'Folder name' })\n  @ApiParam({ name: 'filename', description: 'File name' })\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        newFilename: { type: 'string', description: 'New filename' },\n        newFolder: { type: 'string', description: 'New folder' },\n      },\n    },\n  })\n  updateFileMetadata(\n    @Param('folder') folder: string,\n    @Param('filename') filename: string,\n    @Body() updateFileMetadataDto: UpdateFileMetadataDto,\n  ) {\n    return this.fileService.updateFileMetadata(\n      folder,\n      filename,\n      updateFileMetadataDto,\n    );\n  }\n\n  @Get('folders/:folder/size')\n  @ApiOperation({ summary: 'Get the total size of a folder' })\n  @ApiParam({ name: 'folder', description: 'Folder name' })\n  getFolderSize(@Param('folder') folder: string) {\n    return this.fileService.getFolderSize(folder);\n  }\n\n  @Get('folders/:folder/files')\n  @ApiOperation({ summary: 'List all files in a folder' })\n  @ApiParam({ name: 'folder', description: 'Folder name' })\n  listFiles(@Param('folder') folder: string) {\n    return this.fileService.listFiles(folder);\n  }\n\n  @Get('folders/:folder/files/:filename/thumbnail')\n  @ApiOperation({ summary: 'Get a thumbnail of an image or video file' })\n  @ApiParam({ name: 'folder', description: 'Folder name' })\n  @ApiParam({ name: 'filename', description: 'File name' })\n  getThumbnail(\n    @Param('folder') folder: string,\n    @Param('filename') filename: string,\n    @Res() res: Response,\n  ) {\n    return this.fileService.getThumbnail(folder, filename, res);\n  }\n\n  // =====================================================\n\n  // File Retrieval Endpoint (Catch-all for file serving)\n  // =====================================================\n\n  @ApiTags('File Operations')\n  @Get('folders/:folder/files/:filename')\n  @ApiOperation({ summary: 'Retrieve a file from a folder' })\n  @ApiParam({ name: 'folder', description: 'Folder name' })\n  @ApiParam({ name: 'filename', description: 'File name' })\n  getFile(\n    @Param('folder') folder: string,\n    @Param('filename') filename: string,\n    @Res() res: Response,\n  ) {\n    return this.fileService.getFile(folder, filename, res);\n  }\n\n  // =====================================================\n\n  // Additional Folder Endpoints\n  // =====================================================\n\n  @ApiTags('Folder Management')\n  @Put('folders/:folder/rename')\n  @ApiOperation({ summary: 'Rename a folder' })\n  @ApiResponse({ status: 200, description: 'Folder renamed successfully' })\n  @ApiResponse({ status: 400, description: 'Invalid folder name' })\n  @ApiResponse({ status: 404, description: 'Folder not found' })\n  @ApiParam({ name: 'folder', description: 'Current folder name' })\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: { newFolderName: { type: 'string' } },\n    },\n  })\n  renameFolder(\n    @Param('folder') folder: string,\n    @Body() renameFolderDto: RenameFolderDto,\n  ) {\n    return this.fileService.renameFolder(folder, renameFolderDto.newFolderName);\n  }\n\n  @ApiTags('Folder Management')\n  @Put('folders/:folder/move')\n  @ApiOperation({ summary: 'Move a folder to a different location' })\n  @ApiResponse({ status: 200, description: 'Folder moved successfully' })\n  @ApiResponse({ status: 400, description: 'Invalid destination' })\n  @ApiResponse({ status: 404, description: 'Folder not found' })\n  @ApiParam({ name: 'folder', description: 'Current folder name' })\n  @ApiBody({\n    schema: { type: 'object', properties: { newLocation: { type: 'string' } } },\n  })\n  moveFolder(\n    @Param('folder') folder: string,\n    @Body() moveFolderDto: MoveFolderDto,\n  ) {\n    return this.fileService.moveFolder(folder, moveFolderDto.newLocation);\n  }\n\n  @Get('folders/:folder/files/:filename/preview')\n  @ApiOperation({ summary: 'Get a preview of a file' })\n  @ApiParam({ name: 'folder', description: 'Folder name' })\n  @ApiParam({ name: 'filename', description: 'File name' })\n  getFilePreview(\n    @Param('folder') folder: string,\n    @Param('filename') filename: string,\n    @Req() req: Request,\n    @Res() res: Response,\n  ) {\n    return this.fileService.getFilePreview(folder, filename, req, res);\n  }\n\n  @ApiTags('Search & Browse')\n  @Get('folders/tree')\n  @ApiOperation({\n    summary: 'Get a hierarchical tree structure of folders and files',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Folder tree retrieved successfully',\n    type: FolderTreeResponse,\n  })\n  getFolderTree(): Promise<FolderTreeResponse> {\n    return this.fileService.getFolderTree();\n  }\n\n  @ApiTags('File Sharing')\n  @Post('folders/:folder/files/:filename/share')\n  @ApiOperation({ summary: 'Generate a shareable link for a file' })\n  @ApiResponse({\n    status: 200,\n    description: 'Shareable link generated',\n    type: ShareableLinkResponse,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'File not found',\n  })\n  @ApiParam({ name: 'folder', description: 'Folder name' })\n  @ApiParam({ name: 'filename', description: 'File name' })\n  generateShareableLink(\n    @Param('folder') folder: string,\n    @Param('filename') filename: string,\n  ): Promise<ShareableLinkResponse> {\n    return this.fileService.generateShareableLink(folder, filename);\n  }\n\n  @ApiTags('File Locking')\n  @Put('folders/:folder/files/:filename/lock')\n  @ApiOperation({ summary: 'Lock a file for editing' })\n  @ApiParam({ name: 'folder', description: 'Folder name' })\n  @ApiParam({ name: 'filename', description: 'File name' })\n  @ApiResponse({\n    status: 400,\n    description: 'File is already locked',\n    type: ErrorResponse,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'File not found',\n    type: ErrorResponse,\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Error locking file',\n    type: ErrorResponse,\n  })\n  lockFile(\n    @Param('folder') folder: string,\n    @Param('filename') filename: string,\n  ) {\n    return this.fileService.lockFile(folder, filename);\n  }\n\n  @ApiTags('File Locking')\n  @Put('folders/:folder/files/:filename/unlock')\n  @ApiOperation({ summary: 'Unlock a file for editing' })\n  @ApiParam({ name: 'folder', description: 'Folder name' })\n  @ApiParam({ name: 'filename', description: 'File name' })\n  unlockFile(\n    @Param('folder') folder: string,\n    @Param('filename') filename: string,\n  ) {\n    return this.fileService.unlockFile(folder, filename);\n  }\n\n  @ApiTags('Search & Browse')\n  @Get('files/recent')\n  @ApiOperation({ summary: 'Get a list of recently modified files' })\n  getRecentFiles() {\n    return this.fileService.getRecentFiles();\n  }\n\n  @ApiTags('File Versions')\n  @Get('folders/:folder/files/:filename/versions')\n  @ApiOperation({ summary: 'Get different versions of a file' })\n  @ApiResponse({\n    status: 200,\n    description: 'File versions retrieved successfully',\n    type: FileVersionResponse,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'File not found',\n  })\n  @ApiParam({ name: 'folder', description: 'Folder name' })\n  @ApiParam({ name: 'filename', description: 'File name' })\n  getFileVersions(\n    @Param('folder') folder: string,\n    @Param('filename') filename: string,\n  ): Promise<FileVersionResponse> {\n    return this.fileService.getFileVersions(folder, filename);\n  }\n\n  @Get('metrics/file-operations')\n  @ApiOperation({\n    summary: 'Get file operation metrics',\n    description:\n      'Retrieve metrics about recent file operations including success rate and performance data',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'File operation metrics retrieved successfully',\n    type: FileOperationMetricsResponse,\n  })\n  @ApiQuery({\n    name: 'timeWindow',\n    required: false,\n    description: 'Time window in milliseconds for failure rate calculation',\n    type: Number,\n    example: 3600000,\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    description: 'Maximum number of metrics to return',\n    type: Number,\n    example: 100,\n  })\n  getFileOperationMetrics(\n    @Query('timeWindow', new DefaultValuePipe(3600000), ParseIntPipe)\n    timeWindow: number,\n    @Query('limit', new DefaultValuePipe(100), ParseIntPipe) limit: number,\n  ): FileOperationMetricsResponse {\n    const metrics = FileOperationMonitor.getMetrics(limit);\n    const failureRate = FileOperationMonitor.getFailureRate(timeWindow);\n\n    return {\n      metrics,\n      failureRate,\n      timeWindow,\n      totalOperations: metrics.length,\n    };\n  }\n\n  @ApiTags('Folder Management')\n  @Post('folders/:folder/copy')\n  @ApiOperation({\n    summary: 'Copy a folder to a new location',\n    description:\n      'Creates a copy of a folder and all its contents at a new location',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Folder copied successfully',\n    schema: {\n      type: 'object',\n      properties: {\n        message: { type: 'string' },\n        sourceFolder: { type: 'string' },\n        destinationFolder: { type: 'string' },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Invalid destination or destination already exists',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Source folder not found',\n  })\n  @ApiParam({\n    name: 'folder',\n    description: 'Source folder name to copy',\n  })\n  @ApiBody({\n    schema: {\n      type: 'object',\n      required: ['destinationFolder'],\n      properties: {\n        destinationFolder: {\n          type: 'string',\n          description:\n            'Name of the destination folder where the copy will be created',\n        },\n      },\n    },\n  })\n  async copyFolder(\n    @Param('folder') folder: string,\n    @Body('destinationFolder') destinationFolder: string,\n  ) {\n    return this.fileService.copyFolder(folder, destinationFolder);\n  }\n}\n","export interface FileModuleOptions {\n  storagePath?: string;\n  maxFileSize?: number;\n  allowedFileTypes?: string[];\n}\n\nexport const FILE_MODULE_OPTIONS = 'FILE_MODULE_OPTIONS';\n","import { Module, DynamicModule, Provider } from '@nestjs/common';\nimport { FileController } from './file.controller';\nimport { FileService } from './file.service';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { FILE_CONFIG } from './config/file.config';\nimport {\n  FileModuleOptions,\n  FILE_MODULE_OPTIONS,\n} from './file.module.interface';\n\n@Module({})\nexport class FileModule {\n  /**\n   * Register the FileModule with default configuration\n   */\n  static register(): DynamicModule {\n    return {\n      module: FileModule,\n      imports: [\n        MulterModule.register({\n          dest: FILE_CONFIG.STORAGE_PATH,\n        }),\n      ],\n      controllers: [FileController],\n      providers: [FileService],\n      exports: [FileService],\n    };\n  }\n\n  /**\n   * Register the FileModule with custom configuration\n   * @param options Configuration options for the file module\n   */\n  static forRoot(options: FileModuleOptions = {}): DynamicModule {\n    const providers: Provider[] = [\n      {\n        provide: FILE_MODULE_OPTIONS,\n        useValue: {\n          storagePath: options.storagePath || FILE_CONFIG.STORAGE_PATH,\n          maxFileSize: options.maxFileSize || FILE_CONFIG.MAX_FILE_SIZE,\n          allowedFileTypes:\n            options.allowedFileTypes || FILE_CONFIG.ALLOWED_FILE_TYPES,\n        },\n      },\n      FileService,\n    ];\n\n    return {\n      module: FileModule,\n      imports: [\n        MulterModule.register({\n          dest: options.storagePath || FILE_CONFIG.STORAGE_PATH,\n        }),\n      ],\n      controllers: [FileController],\n      providers: providers,\n      exports: [FileService],\n    };\n  }\n\n  /**\n   * Register the FileModule as a global module with custom configuration\n   * @param options Configuration options for the file module\n   */\n  static forRootGlobal(options: FileModuleOptions = {}): DynamicModule {\n    const module = this.forRoot(options);\n    return {\n      ...module,\n      global: true,\n    };\n  }\n}\n","import {\n  Injectable,\n  BadRequestException,\n  NotFoundException,\n  InternalServerErrorException,\n  Logger,\n  OnModuleInit,\n  Inject,\n  Optional,\n} from '@nestjs/common';\nimport { Response, Request } from 'express';\nimport { join, resolve } from 'path';\nimport * as fs from 'fs';\nimport archiver from 'archiver';\nimport { FILE_CONFIG } from './config/file.config';\nimport { VIEW_CONFIG } from './config/view.config';\nimport { createReadStream } from 'fs';\nimport { lookup } from 'mime-types';\nimport {\n  FileMetadataResponse,\n  FolderResponse,\n  FolderDetailsResponse,\n  ShareableLinkResponse,\n  FileVersionResponse,\n  FolderTreeResponse,\n  JsonFileResponse,\n  JsonValueResponse,\n} from './dto/responses.dto';\nimport {\n  JsonPathValidator,\n  JsonPathValidationError,\n} from './utils/json-path.validator';\nimport {\n  FileOperationError,\n  FileErrorCodes,\n} from './utils/file-operation-error';\nimport { withFileOperation } from './utils/file-operation-wrapper';\nimport {\n  FILE_MODULE_OPTIONS,\n  FileModuleOptions,\n} from './file.module.interface';\n\ntype MimeType =\n  | (typeof VIEW_CONFIG.IMAGE_TYPES)[number]\n  | (typeof VIEW_CONFIG.PDF_TYPES)[number]\n  | (typeof VIEW_CONFIG.TEXT_TYPES)[number];\n\n@Injectable()\nexport class FileService implements OnModuleInit {\n  private readonly logger = new Logger(FileService.name);\n  private readonly config: {\n    storagePath: string;\n    maxFileSize: number;\n    allowedFileTypes: string[];\n  };\n\n  constructor(\n    @Optional()\n    @Inject(FILE_MODULE_OPTIONS)\n    private options?: FileModuleOptions,\n  ) {\n    this.config = {\n      storagePath: options?.storagePath || FILE_CONFIG.STORAGE_PATH,\n      maxFileSize: options?.maxFileSize || FILE_CONFIG.MAX_FILE_SIZE,\n      allowedFileTypes:\n        options?.allowedFileTypes || FILE_CONFIG.ALLOWED_FILE_TYPES,\n    };\n\n    this.logger.log(\n      `FileService initialized with storage path: ${this.config.storagePath}`,\n    );\n  }\n\n  private getSafePath(...segments: string[]): string {\n    const filePath = join(...segments);\n    const resolvedPath = resolve(filePath);\n    const uploadsPath = resolve(this.config.storagePath);\n    if (!resolvedPath.startsWith(uploadsPath)) {\n      throw new Error(`Invalid path detected: ${resolvedPath}`);\n    }\n    return filePath;\n  }\n\n  // Method to validate file type\n  public validateFileType(file: Express.Multer.File): boolean {\n    return this.config.allowedFileTypes.includes(file.mimetype as MimeType);\n  }\n\n  // Method to validate file size\n  public validateFileSize(file: Express.Multer.File): boolean {\n    return file.size <= this.config.maxFileSize;\n  }\n\n  async listFolders(): Promise<FolderResponse> {\n    const result = await withFileOperation('listFolders', async () => {\n      if (!fs.existsSync(this.config.storagePath)) {\n        fs.mkdirSync(this.config.storagePath, { recursive: true });\n      }\n      const folders = fs\n        .readdirSync(this.config.storagePath, { withFileTypes: true })\n        .filter((dirent) => dirent.isDirectory())\n        .map((dirent) => dirent.name);\n      return { folders };\n    });\n\n    if (!result.success) {\n      this.logger.error(`Failed to list folders: ${result.error.message}`);\n      throw new InternalServerErrorException('Failed to list folders');\n    }\n\n    return result.data;\n  }\n\n  async getFolderDetails(\n    folder: string,\n    page = 1,\n    limit = 10,\n  ): Promise<FolderDetailsResponse> {\n    const folderPath = this.getSafePath(this.config.storagePath, folder);\n    if (!fs.existsSync(folderPath)) {\n      this.logger.error(`Folder not found: ${folder}`);\n      throw new NotFoundException('Folder not found');\n    }\n    const files = fs.readdirSync(folderPath);\n    const startIndex = (page - 1) * limit;\n    const endIndex = page * limit;\n    const paginatedFiles = files.slice(startIndex, endIndex);\n    return {\n      folder,\n      files: paginatedFiles,\n      totalFiles: files.length,\n      page,\n      limit,\n    };\n  }\n\n  async createFolder(folderName: string) {\n    const result = await withFileOperation('createFolder', async () => {\n      const folderPath = this.getSafePath(this.config.storagePath, folderName);\n      if (fs.existsSync(folderPath)) {\n        throw new FileOperationError(\n          'Folder already exists',\n          FileErrorCodes.FOLDER_EXISTS,\n          'createFolder',\n          { folderName },\n        );\n      }\n      fs.mkdirSync(folderPath, { recursive: true });\n      return { message: 'Folder created successfully', folder: folderName };\n    });\n\n    if (!result.success) {\n      if (result.error.code === FileErrorCodes.FOLDER_EXISTS) {\n        throw new BadRequestException(result.error.message);\n      }\n      this.logger.error(`Failed to create folder: ${result.error.message}`);\n      throw new InternalServerErrorException('Failed to create folder');\n    }\n\n    return result.data;\n  }\n\n  async deleteFolder(folder: string) {\n    const result = await withFileOperation('deleteFolder', async () => {\n      const folderPath = this.getSafePath(this.config.storagePath, folder);\n      if (!fs.existsSync(folderPath)) {\n        throw new FileOperationError(\n          'Folder not found',\n          FileErrorCodes.FILE_NOT_FOUND,\n          'deleteFolder',\n          { folder },\n        );\n      }\n\n      const files = fs.readdirSync(folderPath);\n      if (files.length > 0) {\n        throw new FileOperationError(\n          'Cannot delete non-empty folder',\n          FileErrorCodes.FOLDER_NOT_EMPTY,\n          'deleteFolder',\n          { folder, fileCount: files.length },\n        );\n      }\n\n      fs.rmdirSync(folderPath);\n      return { message: 'Folder deleted successfully' };\n    });\n\n    if (!result.success) {\n      if (result.error.code === FileErrorCodes.FILE_NOT_FOUND) {\n        throw new NotFoundException(result.error.message);\n      }\n      if (result.error.code === FileErrorCodes.FOLDER_NOT_EMPTY) {\n        throw new BadRequestException(result.error.message);\n      }\n      this.logger.error(`Failed to delete folder: ${result.error.message}`);\n      throw new InternalServerErrorException('Failed to delete folder');\n    }\n\n    return result.data;\n  }\n\n  getDestination(req, file, cb) {\n    try {\n      const folderPath = this.getSafePath(\n        this.config.storagePath,\n        req.params.folder,\n      );\n      if (!fs.existsSync(folderPath)) {\n        fs.mkdirSync(folderPath, { recursive: true });\n      }\n      cb(null, folderPath);\n    } catch (error) {\n      cb(error, null);\n    }\n  }\n\n  getFilename(req, file, cb) {\n    try {\n      const extension = file.originalname.substring(\n        file.originalname.lastIndexOf('.'),\n      );\n      const baseFilename = req.query.filename || 'uploaded_file';\n\n      const files = (req as any).files as Express.Multer.File[];\n\n      let finalFilename: string;\n\n      if (files.length === 1) {\n        finalFilename = `${baseFilename}${extension}`;\n      } else {\n        if (!(req as any)._fileCounter) {\n          (req as any)._fileCounter = 0;\n        }\n\n        (req as any)._fileCounter++;\n        finalFilename = `${baseFilename}${(req as any)._fileCounter}${extension}`;\n      }\n\n      cb(null, finalFilename);\n    } catch (error) {\n      cb(error, null);\n    }\n  }\n\n  uploadFiles(folder: string, files: Express.Multer.File[]) {\n    if (!files || files.length === 0) {\n      this.logger.error(`No files provided for folder ${folder}`);\n      throw new BadRequestException('File upload failed: No files provided');\n    }\n\n    const uploadedFiles = files.map((file) => {\n      if (!this.validateFileType(file)) {\n        this.logger.error(\n          `Invalid file type: ${file.mimetype} for ${file.originalname}`,\n        );\n        throw new BadRequestException(\n          `Invalid file type for ${file.originalname}`,\n        );\n      }\n      if (!this.validateFileSize(file)) {\n        this.logger.error(`File size exceeds limit: ${file.size} bytes`);\n        throw new BadRequestException(\n          `File size exceeds limit for ${file.originalname}`,\n        );\n      }\n      this.logger.log(`File uploaded: ${file.filename} to folder: ${folder}`);\n      return { filename: file.filename };\n    });\n\n    return { message: 'Files uploaded successfully', files: uploadedFiles };\n  }\n\n  downloadFile(folder: string, filename: string, res: Response) {\n    const filePath = this.getSafePath(\n      this.config.storagePath,\n      folder,\n      filename,\n    );\n    if (!fs.existsSync(filePath)) {\n      this.logger.error(`File not found: ${filename} in folder: ${folder}`);\n      throw new NotFoundException('File not found');\n    }\n    return res.download(filePath);\n  }\n\n  async getFileMetadata(\n    folder: string,\n    filename: string,\n  ): Promise<FileMetadataResponse> {\n    const filePath = this.getSafePath(\n      this.config.storagePath,\n      folder,\n      filename,\n    );\n    if (!fs.existsSync(filePath)) {\n      this.logger.error(`File not found: ${filename} in folder: ${folder}`);\n      throw new NotFoundException('File not found');\n    }\n    try {\n      const stats = fs.statSync(filePath);\n      return {\n        filename,\n        size: stats.size,\n        createdAt: stats.birthtime,\n        modifiedAt: stats.mtime,\n      };\n    } catch (error) {\n      this.logger.error(\n        `Error retrieving metadata for ${filename}: ${error.message}`,\n      );\n      throw new InternalServerErrorException('Error retrieving file metadata');\n    }\n  }\n\n  moveFile(\n    folder: string,\n    filename: string,\n    body: { newFolder?: string; newFilename?: string },\n  ) {\n    const oldPath = this.getSafePath(this.config.storagePath, folder, filename);\n    const newFolder = body.newFolder || folder;\n    const newFilename = body.newFilename || filename;\n    const newFolderPath = this.getSafePath(this.config.storagePath, newFolder);\n    if (!fs.existsSync(newFolderPath)) {\n      try {\n        fs.mkdirSync(newFolderPath, { recursive: true });\n        this.logger.log(`Created destination folder: ${newFolder}`);\n      } catch (error) {\n        this.logger.error(\n          `Error creating folder ${newFolder}: ${error.message}`,\n        );\n        throw new InternalServerErrorException(\n          'Failed to create destination folder',\n        );\n      }\n    }\n    const newPath = this.getSafePath(newFolderPath, newFilename);\n    if (fs.existsSync(newPath)) {\n      this.logger.error(`File already exists at destination: ${newPath}`);\n      throw new BadRequestException('File already exists at destination');\n    }\n    try {\n      fs.renameSync(oldPath, newPath);\n      this.logger.log(`File moved from ${oldPath} to ${newPath}`);\n      return { message: 'File moved/renamed successfully', newPath };\n    } catch (error) {\n      this.logger.error(`Error moving file: ${error.message}`);\n      throw new InternalServerErrorException('Error moving file');\n    }\n  }\n\n  copyFile(folder: string, filename: string, body: { newFolder?: string }) {\n    const oldPath = this.getSafePath(this.config.storagePath, folder, filename);\n    const newFolder = body.newFolder || folder;\n    const newFolderPath = this.getSafePath(this.config.storagePath, newFolder);\n    if (!fs.existsSync(oldPath)) {\n      this.logger.error(`File not found: ${filename} in folder: ${folder}`);\n      throw new NotFoundException('File not found');\n    }\n    if (!fs.existsSync(newFolderPath)) {\n      try {\n        fs.mkdirSync(newFolderPath, { recursive: true });\n        this.logger.log(`Created destination folder: ${newFolder}`);\n      } catch (error) {\n        this.logger.error(\n          `Error creating folder ${newFolder}: ${error.message}`,\n        );\n        throw new InternalServerErrorException(\n          'Failed to create destination folder',\n        );\n      }\n    }\n    const newPath = this.getSafePath(newFolderPath, filename);\n    try {\n      fs.copyFileSync(oldPath, newPath);\n      this.logger.log(`File copied from ${oldPath} to ${newPath}`);\n      return { message: 'File copied successfully', newPath };\n    } catch (error) {\n      this.logger.error(`Error copying file: ${error.message}`);\n      throw new InternalServerErrorException('Error copying file');\n    }\n  }\n\n  async downloadAllFiles(folder: string, res: Response) {\n    const folderPath = this.getSafePath(this.config.storagePath, folder);\n    if (!fs.existsSync(folderPath)) {\n      this.logger.error(`Folder not found: ${folder}`);\n      throw new NotFoundException('Folder not found');\n    }\n    const files = fs.readdirSync(folderPath);\n    if (files.length === 0) {\n      this.logger.warn(`No files found in folder: ${folder}`);\n      throw new BadRequestException('No files available in this folder');\n    }\n    const archive = archiver('zip', { zlib: { level: 9 } });\n    res.attachment(`${folder}.zip`);\n    archive.pipe(res);\n    files.forEach((file) => {\n      try {\n        const filePath = this.getSafePath(folderPath, file);\n        archive.file(filePath, { name: file });\n      } catch (error) {\n        this.logger.error(`Error adding file ${file} to ZIP: ${error.message}`);\n      }\n    });\n    try {\n      await archive.finalize();\n      this.logger.log(`ZIP archive generated for folder: ${folder}`);\n    } catch (error) {\n      this.logger.error(`Error finalizing ZIP: ${error.message}`);\n      throw new InternalServerErrorException('Error generating ZIP archive');\n    }\n  }\n\n  getTemporaryLinks(folder: string) {\n    const folderPath = this.getSafePath(this.config.storagePath, folder);\n    if (!fs.existsSync(folderPath)) {\n      this.logger.error(`Folder not found: ${folder}`);\n      throw new NotFoundException('Folder not found');\n    }\n    const files = fs.readdirSync(folderPath);\n    if (files.length === 0) {\n      this.logger.warn(`No files found in folder: ${folder}`);\n      throw new BadRequestException('No files available in this folder');\n    }\n    const fileLinks = files.map((file) => ({\n      filename: file,\n      url: `${process.env.serviceUrl}/folders/${folder}/files/${file}?temp=true`,\n    }));\n    return { folder, fileLinks };\n  }\n\n  getTemporaryFileLink(folder: string, filename: string) {\n    return {\n      url: `${process.env.serviceUrl}/folders/${folder}/files/${filename}?temp=true`,\n    };\n  }\n\n  searchFiles(folder: string, pattern: string) {\n    const folderPath = this.getSafePath(this.config.storagePath, folder);\n    if (!fs.existsSync(folderPath)) {\n      this.logger.error(`Folder not found: ${folder}`);\n      throw new NotFoundException('Folder not found');\n    }\n    let regex: RegExp;\n    try {\n      regex = new RegExp(pattern, 'i');\n    } catch (error) {\n      console.log('error', error);\n      this.logger.error(`Invalid regex: ${pattern}`);\n      throw new BadRequestException('Invalid regular expression');\n    }\n    const files = fs.readdirSync(folderPath);\n    const matchingFiles = files.filter((file) => regex.test(file));\n    return { folder, pattern, matchingFiles };\n  }\n\n  async getJsonFile(\n    folder: string,\n    filename: string,\n  ): Promise<JsonFileResponse> {\n    const filePath = this.getSafePath(\n      this.config.storagePath,\n      folder,\n      `${filename}.json`,\n    );\n    if (!fs.existsSync(filePath)) {\n      this.logger.error(\n        `JSON file not found: ${filename}.json in folder ${folder}`,\n      );\n      throw new NotFoundException('JSON file not found');\n    }\n    try {\n      const fileContent = fs.readFileSync(filePath, 'utf-8');\n      return { content: JSON.parse(fileContent) };\n    } catch (error) {\n      this.logger.error(\n        `Error parsing JSON file ${filename}.json: ${error.message}`,\n      );\n      throw new InternalServerErrorException('Error parsing JSON file');\n    }\n  }\n\n  async getNestedJsonValue(\n    folder: string,\n    filename: string,\n    pathParams: any,\n  ): Promise<JsonValueResponse> {\n    const wildcardPath = pathParams['path'][0] || '';\n    const keys = wildcardPath.split('/').filter((key) => key !== '');\n\n    try {\n      JsonPathValidator.validate(keys);\n\n      const filePath = this.getSafePath(\n        this.config.storagePath,\n        folder,\n        `${filename}.json`,\n      );\n      if (!fs.existsSync(filePath)) {\n        this.logger.error(\n          `JSON file not found: ${filename}.json in folder ${folder}`,\n        );\n        throw new NotFoundException('JSON file not found');\n      }\n\n      const fileContent = fs.readFileSync(filePath, 'utf-8');\n      let result = JSON.parse(fileContent);\n\n      for (const key of keys) {\n        if (result[key] === undefined) {\n          this.logger.error(`Key '${key}' not found in ${filename}.json`);\n          throw new BadRequestException(`Key '${key}' not found`);\n        }\n        result = result[key];\n      }\n      return { value: result };\n    } catch (error) {\n      if (error instanceof JsonPathValidationError) {\n        throw new BadRequestException(error.message);\n      }\n      if (error instanceof BadRequestException) {\n        throw error;\n      }\n      this.logger.error(\n        `Error processing JSON file ${filename}.json: ${error.message}`,\n      );\n      throw new InternalServerErrorException('Error processing JSON file');\n    }\n  }\n\n  async queryJsonFile(\n    folder: string,\n    filename: string,\n    query: string,\n  ): Promise<JsonValueResponse> {\n    try {\n      JsonPathValidator.validateJsonQuery(query);\n\n      const filePath = this.getSafePath(\n        this.config.storagePath,\n        folder,\n        `${filename}.json`,\n      );\n      if (!fs.existsSync(filePath)) {\n        this.logger.error(\n          `JSON file not found: ${filename}.json in folder ${folder}`,\n        );\n        throw new NotFoundException('JSON file not found');\n      }\n\n      const fileContent = fs.readFileSync(filePath, 'utf-8');\n      const jsonData = JSON.parse(fileContent);\n\n      const segments = query.split('.');\n      let result = jsonData;\n\n      for (const segment of segments) {\n        const arrayMatch = segment.match(/^(\\w+)\\[(\\d+)\\]$/);\n        if (arrayMatch) {\n          const [, key, index] = arrayMatch;\n          result = result[key]?.[parseInt(index, 10)];\n        } else {\n          result = result[segment];\n        }\n\n        if (result === undefined) {\n          throw new BadRequestException(`Path '${query}' not found in JSON`);\n        }\n      }\n\n      return { value: result };\n    } catch (error) {\n      if (\n        error instanceof JsonPathValidationError ||\n        error instanceof BadRequestException\n      ) {\n        throw new BadRequestException(error.message);\n      }\n      this.logger.error(\n        `Error querying JSON file ${filename}.json: ${error.message}`,\n      );\n      throw new InternalServerErrorException('Error processing JSON file');\n    }\n  }\n\n  deleteFile(folder: string, filename: string) {\n    const filePath = this.getSafePath(\n      this.config.storagePath,\n      folder,\n      filename,\n    );\n    if (!fs.existsSync(filePath)) {\n      this.logger.error(`File not found: ${filename} in folder: ${folder}`);\n      throw new NotFoundException('File not found');\n    }\n    try {\n      fs.rmSync(filePath);\n      this.logger.log(\n        `File deleted successfully: ${filename} from folder: ${folder}`,\n      );\n      return { message: 'File deleted successfully' };\n    } catch (error) {\n      this.logger.error(`Error deleting file ${filename}: ${error.message}`);\n      throw new InternalServerErrorException('Error deleting file');\n    }\n  }\n\n  updateFileMetadata(\n    folder: string,\n    filename: string,\n    body: { newFilename?: string; newFolder?: string },\n  ) {\n    const oldPath = this.getSafePath(this.config.storagePath, folder, filename);\n    const newFolder = body.newFolder || folder;\n    const newFilename = body.newFilename || filename;\n    const newFolderPath = this.getSafePath(this.config.storagePath, newFolder);\n    if (!fs.existsSync(newFolderPath)) {\n      try {\n        fs.mkdirSync(newFolderPath, { recursive: true });\n        this.logger.log(`Created destination folder: ${newFolder}`);\n      } catch (error) {\n        this.logger.error(\n          `Error creating folder ${newFolder}: ${error.message}`,\n        );\n        throw new InternalServerErrorException(\n          'Failed to create destination folder',\n        );\n      }\n    }\n    const newPath = this.getSafePath(newFolderPath, newFilename);\n    if (fs.existsSync(newPath)) {\n      this.logger.error(`File already exists at destination: ${newPath}`);\n      throw new BadRequestException('File already exists at destination');\n    }\n    try {\n      fs.renameSync(oldPath, newPath);\n      this.logger.log(`File metadata updated from ${oldPath} to ${newPath}`);\n      return { message: 'File metadata updated successfully', newPath };\n    } catch (error) {\n      this.logger.error(`Error updating file metadata: ${error.message}`);\n      throw new InternalServerErrorException('Error updating file metadata');\n    }\n  }\n\n  getFolderSize(folder: string) {\n    const folderPath = this.getSafePath(this.config.storagePath, folder);\n    if (!fs.existsSync(folderPath)) {\n      this.logger.error(`Folder not found: ${folder}`);\n      throw new NotFoundException('Folder not found');\n    }\n    const getSize = (dirPath: string): number => {\n      const files = fs.readdirSync(dirPath);\n      return files.reduce((total, file) => {\n        const filePath = this.getSafePath(dirPath, file);\n        const stats = fs.statSync(filePath);\n        return total + (stats.isDirectory() ? getSize(filePath) : stats.size);\n      }, 0);\n    };\n    const size = getSize(folderPath);\n    return { folder, size };\n  }\n\n  listFiles(folder: string) {\n    const folderPath = this.getSafePath(this.config.storagePath, folder);\n    if (!fs.existsSync(folderPath)) {\n      this.logger.error(`Folder not found: ${folder}`);\n      throw new NotFoundException('Folder not found');\n    }\n    const files = fs.readdirSync(folderPath);\n    return { folder, files };\n  }\n\n  getFile(folder: string, filename: string, res: Response) {\n    const filePath = this.getSafePath(\n      this.config.storagePath,\n      folder,\n      filename,\n    );\n    if (!fs.existsSync(filePath)) {\n      this.logger.error(`File not found: ${filename} in folder: ${folder}`);\n      throw new NotFoundException('File not found');\n    }\n    return res.sendFile(filePath);\n  }\n\n  renameFolder(folder: string, newFolderName: string) {\n    const oldFolderPath = this.getSafePath(this.config.storagePath, folder);\n    const newFolderPath = this.getSafePath(\n      this.config.storagePath,\n      newFolderName,\n    );\n    if (!fs.existsSync(oldFolderPath)) {\n      this.logger.error(`Folder not found: ${folder}`);\n      throw new NotFoundException('Folder not found');\n    }\n    if (fs.existsSync(newFolderPath)) {\n      this.logger.error(`Folder already exists: ${newFolderName}`);\n      throw new BadRequestException('Folder already exists');\n    }\n    try {\n      fs.renameSync(oldFolderPath, newFolderPath);\n      this.logger.log(`Folder renamed from ${folder} to ${newFolderName}`);\n      return { message: 'Folder renamed successfully', newFolderName };\n    } catch (error) {\n      this.logger.error(`Error renaming folder ${folder}: ${error.message}`);\n      throw new InternalServerErrorException('Error renaming folder');\n    }\n  }\n\n  // Method to move a folder to a different location\n  moveFolder(folder: string, newLocation: string) {\n    const oldFolderPath = this.getSafePath(this.config.storagePath, folder);\n    const newFolderPath = this.getSafePath(\n      this.config.storagePath,\n      newLocation,\n      folder,\n    );\n    if (!fs.existsSync(oldFolderPath)) {\n      this.logger.error(`Folder not found: ${folder}`);\n      throw new NotFoundException('Folder not found');\n    }\n    if (fs.existsSync(newFolderPath)) {\n      this.logger.error(\n        `Folder already exists at destination: ${newFolderPath}`,\n      );\n      throw new BadRequestException('Folder already exists at destination');\n    }\n    try {\n      fs.renameSync(oldFolderPath, newFolderPath);\n      this.logger.log(`Folder moved from ${oldFolderPath} to ${newFolderPath}`);\n      return { message: 'Folder moved successfully', newFolderPath };\n    } catch (error) {\n      this.logger.error(`Error moving folder ${folder}: ${error.message}`);\n      throw new InternalServerErrorException('Error moving folder');\n    }\n  }\n\n  // Method to get a preview of a file\n  async getFilePreview(\n    folder: string,\n    filename: string,\n    req: Request,\n    res: Response,\n  ) {\n    const filePath = this.getSafePath(\n      this.config.storagePath,\n      folder,\n      filename,\n    );\n    if (!fs.existsSync(filePath)) {\n      this.logger.error(`File not found: ${filename} in folder: ${folder}`);\n      throw new NotFoundException('File not found');\n    }\n\n    const stats = fs.statSync(filePath);\n    const mimeType = lookup(filePath) || 'application/octet-stream';\n\n    // For large files, only show preview if supported\n    if (stats.size > VIEW_CONFIG.PREVIEW_SIZE_LIMIT) {\n      if (!this.isPreviewSupported(mimeType)) {\n        throw new BadRequestException(\n          'Preview not available for this file type or size',\n        );\n      }\n    }\n\n    try {\n      // Handle image previews\n      if (VIEW_CONFIG.IMAGE_TYPES.includes(mimeType)) {\n        const thumbnail = fs.readFileSync(filePath);\n\n        res.setHeader('Content-Type', mimeType);\n        return res.send(thumbnail);\n      }\n\n      // Handle video and audio previews - Stream with range support\n      if (\n        VIEW_CONFIG.VIDEO_TYPES.includes(mimeType) ||\n        VIEW_CONFIG.AUDIO_TYPES.includes(mimeType)\n      ) {\n        const range = req.headers.range;\n        if (range) {\n          const parts = range.replace(/bytes=/, '').split('-');\n          const start = parseInt(parts[0], 10);\n          const end = parts[1] ? parseInt(parts[1], 10) : stats.size - 1;\n          const chunkSize = end - start + 1;\n          const stream = fs.createReadStream(filePath, { start, end });\n\n          const headers = {\n            'Content-Range': `bytes ${start}-${end}/${stats.size}`,\n            'Accept-Ranges': 'bytes',\n            'Content-Length': chunkSize,\n            'Content-Type': mimeType,\n          };\n\n          res.writeHead(206, headers);\n          return stream.pipe(res);\n        } else {\n          const headers = {\n            'Content-Length': stats.size,\n            'Content-Type': mimeType,\n            'Accept-Ranges': 'bytes',\n          };\n          res.writeHead(200, headers);\n          return fs.createReadStream(filePath).pipe(res);\n        }\n      }\n\n      // Handle text previews\n      if (VIEW_CONFIG.TEXT_TYPES.includes(mimeType)) {\n        const content = fs.readFileSync(filePath, 'utf-8');\n        const preview =\n          content.substring(0, 1000) + (content.length > 1000 ? '...' : '');\n        return { preview, mimeType };\n      }\n\n      // Handle PDF previews\n      if (VIEW_CONFIG.PDF_TYPES.includes(mimeType)) {\n        res.setHeader('Content-Type', mimeType);\n        res.setHeader(\n          'Content-Range',\n          `bytes 0-${Math.min(stats.size, VIEW_CONFIG.PREVIEW_SIZE_LIMIT)}`,\n        );\n        const stream = createReadStream(filePath, {\n          start: 0,\n          end: VIEW_CONFIG.PREVIEW_SIZE_LIMIT - 1,\n        });\n        return stream.pipe(res);\n      }\n\n      throw new BadRequestException('Preview not available for this file type');\n    } catch (error) {\n      this.logger.error(\n        `Error generating preview for ${filename}: ${error.message}`,\n      );\n      throw new InternalServerErrorException('Error generating file preview');\n    }\n  }\n\n  async getThumbnail(folder: string, filename: string, res: Response) {\n    const filePath = this.getSafePath(\n      this.config.storagePath,\n      folder,\n      filename,\n    );\n    if (!fs.existsSync(filePath)) {\n      this.logger.error(`File not found: ${filename} in folder: ${folder}`);\n      throw new NotFoundException('File not found');\n    }\n\n    const mimeType = lookup(filePath) || 'application/octet-stream';\n    // const thumbnailsDir = this.getSafePath(\n    //   this.config.storagePath,\n    //   '.thumbnails',\n    // );\n    // const thumbnailPath = this.getSafePath(\n    //   thumbnailsDir,\n    //   `${folder}_${filename}.jpg`,\n    // );\n\n    try {\n      // Handle image thumbnails\n      if (VIEW_CONFIG.IMAGE_TYPES.includes(mimeType)) {\n        const thumbnail = fs.readFileSync(filePath);\n\n        res.setHeader('Content-Type', 'image/jpeg');\n        return res.send(thumbnail);\n      }\n\n      // For video types, try to extract frame or generate dynamic thumbnail\n      if (VIEW_CONFIG.VIDEO_TYPES.includes(mimeType)) {\n        res.setHeader('Content-Type', 'image/jpeg');\n        return res.send(undefined);\n      }\n\n      throw new BadRequestException(\n        'Thumbnail not available for this file type',\n      );\n    } catch (error) {\n      this.logger.error(\n        `Error generating thumbnail for ${filename}: ${error.message}`,\n      );\n      throw new InternalServerErrorException('Error generating thumbnail');\n    }\n  }\n\n  private isPreviewSupported(mimeType: string): boolean {\n    const supportedTypes = [\n      ...VIEW_CONFIG.IMAGE_TYPES,\n      ...VIEW_CONFIG.PDF_TYPES,\n      ...VIEW_CONFIG.TEXT_TYPES,\n      ...VIEW_CONFIG.AUDIO_TYPES,\n      ...VIEW_CONFIG.VIDEO_TYPES,\n    ] as string[];\n    return supportedTypes.includes(mimeType);\n  }\n\n  // Method to get a hierarchical tree structure of folders and files\n  async getFolderTree(): Promise<FolderTreeResponse> {\n    const buildTree = (dirPath: string) => {\n      const name = dirPath.split('/').pop();\n      const item = { name, children: [] };\n      const files = fs.readdirSync(dirPath, { withFileTypes: true });\n      for (const file of files) {\n        if (file.isDirectory()) {\n          item.children.push(buildTree(join(dirPath, file.name)));\n        } else {\n          item.children.push({ name: file.name });\n        }\n      }\n      return item;\n    };\n    return buildTree(this.config.storagePath);\n  }\n\n  // Method to generate a shareable link for a file\n  async generateShareableLink(\n    folder: string,\n    filename: string,\n  ): Promise<ShareableLinkResponse> {\n    const filePath = this.getSafePath(\n      this.config.storagePath,\n      folder,\n      filename,\n    );\n    if (!fs.existsSync(filePath)) {\n      this.logger.error(`File not found: ${filename} in folder: ${folder}`);\n      throw new NotFoundException('File not found');\n    }\n    const shareableLink = `${process.env.serviceUrl}/folders/${folder}/files/${filename}?share=true`;\n    return { shareableLink };\n  }\n\n  // Method to lock a file for editing\n  lockFile(folder: string, filename: string) {\n    const filePath = this.getSafePath(\n      this.config.storagePath,\n      folder,\n      filename,\n    );\n    if (!fs.existsSync(filePath)) {\n      this.logger.error(`File not found: ${filename} in folder: ${folder}`);\n      throw new NotFoundException('File not found');\n    }\n    const lockFilePath = `${filePath}.lock`;\n    if (fs.existsSync(lockFilePath)) {\n      this.logger.error(`File is already locked: ${filename}`);\n      throw new BadRequestException('File is already locked');\n    }\n    try {\n      fs.writeFileSync(lockFilePath, '');\n      this.logger.log(`File locked successfully: ${filename}`);\n      return { message: 'File locked successfully' };\n    } catch (error) {\n      this.logger.error(`Error locking file ${filename}: ${error.message}`);\n      throw new InternalServerErrorException('Error locking file');\n    }\n  }\n\n  // Method to unlock a file for editing\n  unlockFile(folder: string, filename: string) {\n    const filePath = this.getSafePath(\n      this.config.storagePath,\n      folder,\n      filename,\n    );\n    if (!fs.existsSync(filePath)) {\n      this.logger.error(`File not found: ${filename} in folder: ${folder}`);\n      throw new NotFoundException('File not found');\n    }\n    const lockFilePath = `${filePath}.lock`;\n    if (!fs.existsSync(lockFilePath)) {\n      this.logger.error(`File is not locked: ${filename}`);\n      throw new BadRequestException('File is not locked');\n    }\n    try {\n      fs.rmSync(lockFilePath);\n      this.logger.log(`File unlocked successfully: ${filename}`);\n      return { message: 'File unlocked successfully' };\n    } catch (error) {\n      this.logger.error(`Error unlocking file ${filename}: ${error.message}`);\n      throw new InternalServerErrorException('Error unlocking file');\n    }\n  }\n\n  // Method to get a list of recently modified files\n  getRecentFiles() {\n    const getRecentFilesFromDir = (dirPath: string) => {\n      const files = fs.readdirSync(dirPath, { withFileTypes: true });\n      let recentFiles = [];\n      for (const file of files) {\n        const filePath = join(dirPath, file.name);\n        if (file.isDirectory()) {\n          recentFiles = recentFiles.concat(getRecentFilesFromDir(filePath));\n        } else {\n          const stats = fs.statSync(filePath);\n          recentFiles.push({ name: file.name, modifiedAt: stats.mtime });\n        }\n      }\n      return recentFiles;\n    };\n    const recentFiles = getRecentFilesFromDir(this.config.storagePath);\n    recentFiles.sort((a, b) => b.modifiedAt - a.modifiedAt);\n    return recentFiles.slice(0, 10);\n  }\n\n  // Method to get different versions of a file\n  async getFileVersions(\n    folder: string,\n    filename: string,\n  ): Promise<FileVersionResponse> {\n    const filePath = this.getSafePath(\n      this.config.storagePath,\n      folder,\n      filename,\n    );\n    if (!fs.existsSync(filePath)) {\n      this.logger.error(`File not found: ${filename} in folder: ${folder}`);\n      throw new NotFoundException('File not found');\n    }\n    const versionFiles = fs\n      .readdirSync(this.config.storagePath)\n      .filter((file) => file.startsWith(`${filename}.v`))\n      .map((file) => ({ version: file.split('.v')[1], filename: file }));\n    return { filename, versions: versionFiles };\n  }\n\n  onModuleInit() {\n    // Create thumbnails directory if it doesn't exist\n    const thumbnailsPath = this.getSafePath(\n      this.config.storagePath,\n      '.thumbnails',\n    );\n    if (!fs.existsSync(thumbnailsPath)) {\n      fs.mkdirSync(thumbnailsPath, { recursive: true });\n    }\n    // Run initial cleanup when service starts\n    // this.cleanupFiles();\n  }\n\n  // @Interval(3600000) // Run every hour\n  // private async cleanupFiles() {\n  //     try {\n  //         await FileCleanupUtil.cleanupTempFiles(this.config.storagePath);\n  //         await FileCleanupUtil.cleanupEmptyFolders(this.config.storagePath);\n  //         this.logger.log('Completed periodic file cleanup');\n  //     } catch (error) {\n  //         this.logger.error('Error during file cleanup:', error);\n  //     }\n  // }\n\n  async copyFolder(sourceFolder: string, destinationFolder: string) {\n    const sourcePath = this.getSafePath(this.config.storagePath, sourceFolder);\n    const destPath = this.getSafePath(\n      this.config.storagePath,\n      destinationFolder,\n    );\n\n    // Validate source folder exists\n    if (!fs.existsSync(sourcePath)) {\n      this.logger.error(`Source folder not found: ${sourceFolder}`);\n      throw new NotFoundException('Source folder not found');\n    }\n\n    // Check if destination folder already exists\n    if (fs.existsSync(destPath)) {\n      this.logger.error(\n        `Destination folder already exists: ${destinationFolder}`,\n      );\n      throw new BadRequestException('Destination folder already exists');\n    }\n\n    try {\n      // Create destination folder\n      fs.mkdirSync(destPath, { recursive: true });\n\n      // Function to recursively copy folder contents\n      const copyRecursive = (src: string, dest: string) => {\n        const entries = fs.readdirSync(src, { withFileTypes: true });\n\n        for (const entry of entries) {\n          const srcPath = join(src, entry.name);\n          const destPath = join(dest, entry.name);\n\n          if (entry.isDirectory()) {\n            fs.mkdirSync(destPath, { recursive: true });\n            copyRecursive(srcPath, destPath);\n          } else {\n            fs.copyFileSync(srcPath, destPath);\n          }\n        }\n      };\n\n      // Start recursive copy\n      copyRecursive(sourcePath, destPath);\n\n      this.logger.log(`Folder copied from ${sourcePath} to ${destPath}`);\n      return {\n        message: 'Folder copied successfully',\n        sourceFolder,\n        destinationFolder,\n      };\n    } catch (error) {\n      this.logger.error(`Error copying folder: ${error.message}`);\n      throw new InternalServerErrorException('Error copying folder');\n    }\n  }\n}\n","// Detailed error types for file operations\nexport class FileOperationError extends Error {\n  constructor(\n    message: string,\n    public readonly code: string,\n    public readonly operation: string,\n    public readonly details?: any,\n  ) {\n    super(message);\n    this.name = 'FileOperationError';\n  }\n}\n\nexport const FileErrorCodes = {\n  FILE_NOT_FOUND: 'FILE_NOT_FOUND',\n  INVALID_PATH: 'INVALID_PATH',\n  ACCESS_DENIED: 'ACCESS_DENIED',\n  INVALID_OPERATION: 'INVALID_OPERATION',\n  STORAGE_FULL: 'STORAGE_FULL',\n  FILE_TOO_LARGE: 'FILE_TOO_LARGE',\n  INVALID_FILE_TYPE: 'INVALID_FILE_TYPE',\n  FOLDER_EXISTS: 'FOLDER_EXISTS',\n  FILE_EXISTS: 'FILE_EXISTS',\n  FOLDER_NOT_EMPTY: 'FOLDER_NOT_EMPTY',\n} as const;\n","export interface FileOperationMetrics {\n  operation: string;\n  success: boolean;\n  duration: number;\n  timestamp: number;\n  path?: string;\n  error?: string;\n}\n\nexport class FileOperationMonitor {\n  private static metrics: FileOperationMetrics[] = [];\n  private static readonly MAX_METRICS = 1000;\n\n  static recordOperation(metric: FileOperationMetrics): void {\n    this.metrics.unshift(metric);\n    if (this.metrics.length > this.MAX_METRICS) {\n      this.metrics.pop();\n    }\n  }\n\n  static getMetrics(limit = 100): FileOperationMetrics[] {\n    return this.metrics.slice(0, limit);\n  }\n\n  static getFailureRate(timeWindow = 3600000): number {\n    const now = Date.now();\n    const recentOperations = this.metrics.filter(\n      (m) => now - m.timestamp < timeWindow,\n    );\n    if (recentOperations.length === 0) return 0;\n\n    const failures = recentOperations.filter((m) => !m.success).length;\n    return failures / recentOperations.length;\n  }\n\n  static clearMetrics(): void {\n    this.metrics = [];\n  }\n}\n","import { FileOperationError, FileErrorCodes } from './file-operation-error';\nimport { FileOperationMonitor } from './file-operation-monitor';\n\nexport class FileOperationResult<T> {\n  constructor(\n    public readonly success: boolean,\n    public readonly data?: T,\n    public readonly error?: FileOperationError,\n  ) {}\n\n  static success<T>(data?: T): FileOperationResult<T> {\n    return new FileOperationResult(true, data);\n  }\n\n  static failure<T>(error: FileOperationError): FileOperationResult<T> {\n    return new FileOperationResult(false, undefined, error);\n  }\n}\n\nasync function withFileOperation<T>(\n  operation: string,\n  action: () => Promise<T> | T,\n  path?: string,\n): Promise<FileOperationResult<T>> {\n  const startTime = Date.now();\n  try {\n    const result = await action();\n    FileOperationMonitor.recordOperation({\n      operation,\n      success: true,\n      duration: Date.now() - startTime,\n      timestamp: startTime,\n      path,\n    });\n    return FileOperationResult.success(result);\n  } catch (error) {\n    const duration = Date.now() - startTime;\n    FileOperationMonitor.recordOperation({\n      operation,\n      success: false,\n      duration,\n      timestamp: startTime,\n      path,\n      error: error.message,\n    });\n\n    if (error instanceof FileOperationError) {\n      return FileOperationResult.failure(error);\n    }\n\n    let fileError: FileOperationError;\n    if (error.code === 'ENOENT') {\n      fileError = new FileOperationError(\n        'File or directory not found',\n        FileErrorCodes.FILE_NOT_FOUND,\n        operation,\n      );\n    } else if (error.code === 'EACCES') {\n      fileError = new FileOperationError(\n        'Access denied',\n        FileErrorCodes.ACCESS_DENIED,\n        operation,\n      );\n    } else if (error.code === 'EEXIST') {\n      fileError = new FileOperationError(\n        'File or folder already exists',\n        FileErrorCodes.FILE_EXISTS,\n        operation,\n      );\n    } else if (error.code === 'ENOSPC') {\n      fileError = new FileOperationError(\n        'No space left on storage',\n        FileErrorCodes.STORAGE_FULL,\n        operation,\n      );\n    } else {\n      fileError = new FileOperationError(\n        error.message || 'Unknown error occurred',\n        FileErrorCodes.INVALID_OPERATION,\n        operation,\n        error,\n      );\n    }\n    return FileOperationResult.failure(fileError);\n  }\n}\n\nexport { withFileOperation };\n","import { Injectable } from '@nestjs/common';\nimport { FileValidator } from '@nestjs/common';\n\n@Injectable()\nexport class CustomFileValidator extends FileValidator<{\n  fileTypes: string[];\n}> {\n  constructor(options: { fileTypes: string[] }) {\n    super(options);\n  }\n\n  isValid(file?: Express.Multer.File): boolean {\n    if (!file) {\n      return false;\n    }\n\n    return this.validationOptions.fileTypes.includes(file.mimetype);\n  }\n\n  buildErrorMessage(): string {\n    return `File type must be one of: ${this.validationOptions.fileTypes.join(', ')}`;\n  }\n}\n\n@Injectable()\nexport class FileSizeValidator extends FileValidator<{ maxSize: number }> {\n  constructor(options: { maxSize: number }) {\n    super(options);\n  }\n\n  isValid(file?: Express.Multer.File): boolean {\n    if (!file) {\n      return false;\n    }\n\n    return file.size <= this.validationOptions.maxSize;\n  }\n\n  buildErrorMessage(): string {\n    return `File size must not exceed ${this.validationOptions.maxSize / (1024 * 1024)}MB`;\n  }\n}\n","export class JsonPathValidationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'JsonPathValidationError';\n  }\n}\n\nexport class JsonPathValidator {\n  static validate(path: string[]): boolean {\n    if (!Array.isArray(path) || path.length === 0) {\n      throw new JsonPathValidationError('Path must be a non-empty array');\n    }\n\n    const validKeyRegex = /^[a-zA-Z_$][a-zA-Z0-9_$]*$/;\n    for (const segment of path) {\n      if (!validKeyRegex.test(segment)) {\n        throw new JsonPathValidationError(`Invalid path segment: ${segment}`);\n      }\n    }\n    return true;\n  }\n\n  static validateJsonQuery(query: string): boolean {\n    const validQueryRegex = /^[\\w.[\\]]+$/;\n    if (!validQueryRegex.test(query)) {\n      throw new JsonPathValidationError('Invalid JSON query format');\n    }\n    return true;\n  }\n}\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/platform-express\");","module.exports = require(\"@nestjs/swagger\");","module.exports = require(\"archiver\");","module.exports = require(\"class-validator\");","module.exports = require(\"dotenv\");","module.exports = require(\"fs\");","module.exports = require(\"mime-types\");","module.exports = require(\"multer\");","module.exports = require(\"node-telegram-bot-api\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// eslint-disable-next-line @typescript-eslint/no-require-imports\nrequire('dotenv').config();\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { setupSwagger } from './config/swagger.config';\nimport { ValidationPipe } from '@nestjs/common';\nimport { CorsOptions } from '@nestjs/common/interfaces/external/cors-options.interface';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule, {\n    logger: ['error', 'warn', 'log', 'debug', 'verbose'],\n  });\n\n  // Setup Swagger documentation\n  setupSwagger(app);\n\n  // Enable validation pipe globally\n  app.useGlobalPipes(\n    new ValidationPipe({\n      whitelist: true,\n      transform: true,\n      forbidNonWhitelisted: true,\n      transformOptions: {\n        enableImplicitConversion: true,\n      },\n    }),\n  );\n\n  // Enable CORS for all origins\n  const corsOptions: CorsOptions = {\n    origin: '*',\n    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS',\n    allowedHeaders: 'Content-Type, Accept, Authorization',\n    credentials: true,\n  };\n  app.enableCors(corsOptions);\n\n  await app.listen(8000);\n}\n\n// Add process event handlers\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n  // Application specific logging, throwing an error, or other logic here\n});\n\nprocess.on('uncaughtException', (error) => {\n  console.error('Uncaught Exception:', error);\n  // Application specific logging, throwing an error, or other logic here\n});\n\nprocess.on('SIGTERM', async () => {\n  console.log('Received SIGTERM signal. Starting graceful shutdown...');\n  // Add your cleanup logic here if needed\n  process.exit(0);\n});\n\nprocess.on('SIGINT', async () => {\n  console.log('Received SIGINT signal. Starting graceful shutdown...');\n  // Add your cleanup logic here if needed\n  process.exit(0);\n});\n\nbootstrap();\n"],"names":[],"sourceRoot":""}