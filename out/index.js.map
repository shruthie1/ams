{"version":3,"file":"index.js","mappings":"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","sources":[".././src/config/swagger.config.ts",".././src/files/config/view.config.ts","../external commonjs \"archiver\"",".././src/files/dto/requests.dto.ts",".././src/app.module.ts",".././src/files/file.service.ts",".././src/files/utils/json-path.validator.ts",".././src/files/file.module.interface.ts",".././src/config/telegram.config.ts",".././src/files/utils/file-validators.ts",".././src/files/dto/responses.dto.ts","../external commonjs \"class-validator\"",".././src/telegram/telegram.service.ts","../external commonjs \"@nestjs/config\"","../external commonjs \"multer\"",".././src/files/file.module.ts",".././src/files/utils/file-operation-wrapper.ts",".././src/files/config/file.config.ts",".././src/app.controller.ts","../external commonjs \"@nestjs/platform-express\"","../external commonjs \"@nestjs/common\"",".././src/files/utils/file-operation-error.ts",".././src/telegram/telegram.load-balancer.ts","../external commonjs \"node-telegram-bot-api\"",".././src/files/utils/file-operation-monitor.ts",".././src/telegram/dto/telegram.dto.ts","../external commonjs \"@nestjs/swagger\"","../external commonjs \"@nestjs/core\"",".././src/files/file.controller.ts","../external commonjs \"dotenv\"","../external node-commonjs \"fs\"","../external commonjs \"mime-types\"",".././src/telegram/telegram.module.ts",".././src/app.service.ts","../external node-commonjs \"path\"","../webpack/bootstrap",".././src/main.ts"],"sourcesContent":["import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';\r\nimport { INestApplication } from '@nestjs/common';\r\nimport * as fs from 'fs';\r\n\r\nexport function setupSwagger(app: INestApplication): void {\r\n  console.log('Setting up Swagger documentation...');\r\n  const config = new DocumentBuilder()\r\n    .setTitle('File Storage API')\r\n    .setDescription(\r\n      'API for managing files and folders in the Asset Management System',\r\n    )\r\n    .setVersion('1.0')\r\n    .build();\r\n  const document = SwaggerModule.createDocument(app, config);\r\n  console.log('Generated Swagger document');\r\n  fs.writeFileSync('./swagger-spec.json', JSON.stringify(document, null, 2));\r\n\r\n  SwaggerModule.setup('api-docs', app, document, {\r\n    swaggerOptions: {\r\n      persistAuthorization: true,\r\n      docExpansion: 'none',\r\n      filter: true,\r\n      showRequestDuration: true,\r\n      syntaxHighlight: {\r\n        theme: 'monokai',\r\n      },\r\n      tryItOutEnabled: true,\r\n      displayRequestDuration: true,\r\n    },\r\n    customSiteTitle: 'File Storage API Documentation',\r\n    customCss: `\r\n            .swagger-ui .topbar { display: none }\r\n            .swagger-ui .info { margin: 20px 0 }\r\n            .swagger-ui .info .title { color: #2c3e50 }\r\n            .swagger-ui .info__contact { padding: 1rem 0 }\r\n            .swagger-ui .markdown p { margin: 1em 0 }\r\n            .swagger-ui .btn.execute { background-color: #2c3e50 }\r\n            .swagger-ui .btn.execute:hover { background-color: #34495e }\r\n        `,\r\n    customfavIcon: 'https://nestjs.com/favicon.ico',\r\n  });\r\n}\r\n","export const VIEW_CONFIG = {\r\n  IMAGE_TYPES: [\r\n    'image/jpeg',\r\n    'image/png',\r\n    'image/gif',\r\n    'image/webp',\r\n    'image/svg+xml',\r\n    'image/bmp',\r\n  ] as const,\r\n  PDF_TYPES: ['application/pdf'] as const,\r\n  TEXT_TYPES: [\r\n    'text/plain',\r\n    'text/html',\r\n    'text/css',\r\n    'text/javascript',\r\n    'application/json',\r\n    'application/xml',\r\n  ] as const,\r\n  AUDIO_TYPES: [\r\n    'audio/mpeg',\r\n    'audio/wav',\r\n    'audio/ogg',\r\n    'audio/mp3',\r\n    'audio/aac',\r\n    'audio/webm',\r\n  ],\r\n  VIDEO_TYPES: [\r\n    'video/mp4',\r\n    'video/mpeg',\r\n    'video/webm',\r\n    'video/quicktime',\r\n    'video/x-msvideo',\r\n    'video/x-matroska',\r\n  ],\r\n  PREVIEW_SIZE_LIMIT: 1024 * 1024 * 100, // 100MB for preview generation\r\n  THUMBNAIL_OPTIONS: {\r\n    width: 320,\r\n    height: 240,\r\n    quality: 85,\r\n    format: 'jpeg',\r\n    fit: 'contain',\r\n    background: {\r\n      r: 245,\r\n      g: 245,\r\n      b: 245,\r\n      alpha: 1,\r\n    },\r\n  } as const,\r\n  DEFAULT_THUMBNAILS: {\r\n    video: 'assets/video-thumbnail.png',\r\n    audio: 'assets/audio-thumbnail.png',\r\n  },\r\n  VIDEO_PREVIEW: {\r\n    thumbnailTime: '00:00:01',\r\n    width: 320,\r\n    height: 240,\r\n  },\r\n  AUDIO_PREVIEW: {\r\n    duration: true,\r\n    metadata: true,\r\n    waveform: true,\r\n  },\r\n  VIDEO_THUMBNAIL: {\r\n    timePosition: '00:00:01',\r\n    frameCount: 1,\r\n  },\r\n  THUMBNAIL_STYLES: {\r\n    background: {\r\n      startColor: '#1a73e8',\r\n      endColor: '#174ea6',\r\n    },\r\n    text: {\r\n      color: '#ffffff',\r\n      fontFamily: 'Arial',\r\n      fontSize: {\r\n        title: 12,\r\n        format: 11,\r\n      },\r\n    },\r\n    playButton: {\r\n      size: 40,\r\n      color: '#1a73e8',\r\n      background: '#ffffff',\r\n    },\r\n  },\r\n};\r\n","module.exports = require(\"archiver\");","import { ApiProperty } from '@nestjs/swagger';\r\nimport { IsString, IsOptional, IsNotEmpty } from 'class-validator';\r\n\r\nexport class CreateFolderDto {\r\n  @ApiProperty({\r\n    example: 'documents',\r\n    description: 'Name of the folder to create',\r\n  })\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  folderName: string;\r\n}\r\n\r\nexport class MoveFileDto {\r\n  @ApiProperty({\r\n    example: 'destination',\r\n    description: 'New folder path for the file',\r\n  })\r\n  @IsString()\r\n  @IsOptional()\r\n  newFolder?: string;\r\n\r\n  @ApiProperty({ example: 'newname.pdf', description: 'New name for the file' })\r\n  @IsString()\r\n  @IsOptional()\r\n  newFilename?: string;\r\n}\r\n\r\nexport class MoveFolderDto {\r\n  @ApiProperty({\r\n    example: 'new-location',\r\n    description: 'New location path for the folder',\r\n  })\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  newLocation: string;\r\n}\r\n\r\nexport class RenameFolderDto {\r\n  @ApiProperty({\r\n    example: 'new-folder-name',\r\n    description: 'New name for the folder',\r\n  })\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  newFolderName: string;\r\n}\r\n\r\nexport class CopyFileDto {\r\n  @ApiProperty({\r\n    example: 'destination',\r\n    description: 'Destination folder for the file copy',\r\n  })\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  newFolder: string;\r\n}\r\n\r\nexport class UpdateFileMetadataDto {\r\n  @ApiProperty({ example: 'newname.pdf', description: 'New name for the file' })\r\n  @IsString()\r\n  @IsOptional()\r\n  newFilename?: string;\r\n\r\n  @ApiProperty({\r\n    example: 'new-folder',\r\n    description: 'New folder for the file',\r\n  })\r\n  @IsString()\r\n  @IsOptional()\r\n  newFolder?: string;\r\n}\r\n\r\nexport class JsonFileResponse {\r\n  @ApiProperty({\r\n    example: {\r\n      name: 'example',\r\n      age: 30,\r\n      nested: {\r\n        key: 'value',\r\n      },\r\n    },\r\n    description: 'JSON file content',\r\n  })\r\n  content: any;\r\n}\r\n\r\nexport class JsonValueResponse {\r\n  @ApiProperty({\r\n    example: 'value',\r\n    description: 'Value at the specified path in the JSON file',\r\n  })\r\n  value: any;\r\n}\r\n\r\nexport class JsonPathParams {\r\n  @ApiProperty({\r\n    example: ['user', 'profile', 'name'],\r\n    description: 'Path segments to the nested value',\r\n    isArray: true,\r\n  })\r\n  @IsString({ each: true })\r\n  @IsNotEmpty({ each: true })\r\n  path: string[];\r\n}\r\n\r\nexport class JsonQuery {\r\n  @ApiProperty({\r\n    example: 'data.users[0].name',\r\n    description: 'JSON path query using dot notation',\r\n  })\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  query: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { ConfigModule } from '@nestjs/config';\r\nimport { AppController } from './app.controller';\r\nimport { AppService } from './app.service';\r\nimport { FileModule } from './files/file.module';\r\nimport { TelegramModule } from './telegram/telegram.module';\r\nimport telegramConfig from './config/telegram.config';\r\n\r\n@Module({\r\n  imports: [\r\n    ConfigModule.forRoot({\r\n      isGlobal: true,\r\n      load: [telegramConfig],\r\n    }),\r\n    FileModule.register(),\r\n    TelegramModule,\r\n  ],\r\n  controllers: [AppController],\r\n  providers: [AppService],\r\n})\r\nexport class AppModule {}\r\n","import {\r\n  Injectable,\r\n  BadRequestException,\r\n  NotFoundException,\r\n  InternalServerErrorException,\r\n  Logger,\r\n  OnModuleInit,\r\n  Inject,\r\n  Optional,\r\n} from '@nestjs/common';\r\nimport { Response, Request } from 'express';\r\nimport { join, resolve } from 'path';\r\nimport * as fs from 'fs';\r\nimport * as archiver from 'archiver';\r\nimport { FILE_CONFIG } from './config/file.config';\r\nimport { VIEW_CONFIG } from './config/view.config';\r\nimport { createReadStream } from 'fs';\r\nimport { lookup } from 'mime-types';\r\nimport {\r\n  FileMetadataResponse,\r\n  FolderResponse,\r\n  FolderDetailsResponse,\r\n  ShareableLinkResponse,\r\n  FileVersionResponse,\r\n  FolderTreeResponse,\r\n  JsonFileResponse,\r\n  JsonValueResponse,\r\n} from './dto/responses.dto';\r\nimport {\r\n  JsonPathValidator,\r\n  JsonPathValidationError,\r\n} from './utils/json-path.validator';\r\nimport {\r\n  FileOperationError,\r\n  FileErrorCodes,\r\n} from './utils/file-operation-error';\r\nimport { withFileOperation } from './utils/file-operation-wrapper';\r\nimport {\r\n  FILE_MODULE_OPTIONS,\r\n  FileModuleOptions,\r\n} from './file.module.interface';\r\n\r\ntype MimeType =\r\n  | (typeof VIEW_CONFIG.IMAGE_TYPES)[number]\r\n  | (typeof VIEW_CONFIG.PDF_TYPES)[number]\r\n  | (typeof VIEW_CONFIG.TEXT_TYPES)[number];\r\n\r\n@Injectable()\r\nexport class FileService implements OnModuleInit {\r\n  private readonly logger = new Logger(FileService.name);\r\n  private readonly config: {\r\n    storagePath: string;\r\n    maxFileSize: number;\r\n    allowedFileTypes: string[];\r\n  };\r\n\r\n  constructor(\r\n    @Optional()\r\n    @Inject(FILE_MODULE_OPTIONS)\r\n    private options?: FileModuleOptions,\r\n  ) {\r\n    this.config = {\r\n      storagePath: options?.storagePath || FILE_CONFIG.STORAGE_PATH,\r\n      maxFileSize: options?.maxFileSize || FILE_CONFIG.MAX_FILE_SIZE,\r\n      allowedFileTypes:\r\n        options?.allowedFileTypes || FILE_CONFIG.ALLOWED_FILE_TYPES,\r\n    };\r\n\r\n    this.logger.log(\r\n      `FileService initialized with storage path: ${this.config.storagePath}`,\r\n    );\r\n  }\r\n\r\n  private getSafePath(...segments: string[]): string {\r\n    const filePath = join(...segments);\r\n    const resolvedPath = resolve(filePath);\r\n    const uploadsPath = resolve(this.config.storagePath);\r\n    if (!resolvedPath.startsWith(uploadsPath)) {\r\n      throw new Error(`Invalid path detected: ${resolvedPath}`);\r\n    }\r\n    return filePath;\r\n  }\r\n\r\n  // Method to validate file type\r\n  public validateFileType(file: Express.Multer.File): boolean {\r\n    return this.config.allowedFileTypes.includes(file.mimetype as MimeType);\r\n  }\r\n\r\n  // Method to validate file size\r\n  public validateFileSize(file: Express.Multer.File): boolean {\r\n    return file.size <= this.config.maxFileSize;\r\n  }\r\n\r\n  async listFolders(): Promise<FolderResponse> {\r\n    const result = await withFileOperation('listFolders', async () => {\r\n      if (!fs.existsSync(this.config.storagePath)) {\r\n        fs.mkdirSync(this.config.storagePath, { recursive: true });\r\n      }\r\n      const folders = fs\r\n        .readdirSync(this.config.storagePath, { withFileTypes: true })\r\n        .filter((dirent) => dirent.isDirectory())\r\n        .map((dirent) => dirent.name);\r\n      return { folders };\r\n    });\r\n\r\n    if (!result.success) {\r\n      this.logger.error(`Failed to list folders: ${result.error.message}`);\r\n      throw new InternalServerErrorException('Failed to list folders');\r\n    }\r\n\r\n    return result.data;\r\n  }\r\n\r\n  async getFolderDetails(\r\n    folder: string,\r\n    page = 1,\r\n    limit = 10,\r\n  ): Promise<FolderDetailsResponse> {\r\n    const folderPath = this.getSafePath(this.config.storagePath, folder);\r\n    if (!fs.existsSync(folderPath)) {\r\n      this.logger.error(`Folder not found: ${folder}`);\r\n      throw new NotFoundException('Folder not found');\r\n    }\r\n    const files = fs.readdirSync(folderPath);\r\n    const startIndex = (page - 1) * limit;\r\n    const endIndex = page * limit;\r\n    const paginatedFiles = files.slice(startIndex, endIndex);\r\n    return {\r\n      folder,\r\n      files: paginatedFiles,\r\n      totalFiles: files.length,\r\n      page,\r\n      limit,\r\n    };\r\n  }\r\n\r\n  async createFolder(folderName: string) {\r\n    const result = await withFileOperation('createFolder', async () => {\r\n      const folderPath = this.getSafePath(this.config.storagePath, folderName);\r\n      if (fs.existsSync(folderPath)) {\r\n        throw new FileOperationError(\r\n          'Folder already exists',\r\n          FileErrorCodes.FOLDER_EXISTS,\r\n          'createFolder',\r\n          { folderName },\r\n        );\r\n      }\r\n      fs.mkdirSync(folderPath, { recursive: true });\r\n      return { message: 'Folder created successfully', folder: folderName };\r\n    });\r\n\r\n    if (!result.success) {\r\n      if (result.error.code === FileErrorCodes.FOLDER_EXISTS) {\r\n        throw new BadRequestException(result.error.message);\r\n      }\r\n      this.logger.error(`Failed to create folder: ${result.error.message}`);\r\n      throw new InternalServerErrorException('Failed to create folder');\r\n    }\r\n\r\n    return result.data;\r\n  }\r\n\r\n  async deleteFolder(folder: string) {\r\n    const result = await withFileOperation('deleteFolder', async () => {\r\n      const folderPath = this.getSafePath(this.config.storagePath, folder);\r\n      if (!fs.existsSync(folderPath)) {\r\n        throw new FileOperationError(\r\n          'Folder not found',\r\n          FileErrorCodes.FILE_NOT_FOUND,\r\n          'deleteFolder',\r\n          { folder },\r\n        );\r\n      }\r\n\r\n      const files = fs.readdirSync(folderPath);\r\n      if (files.length > 0) {\r\n        throw new FileOperationError(\r\n          'Cannot delete non-empty folder',\r\n          FileErrorCodes.FOLDER_NOT_EMPTY,\r\n          'deleteFolder',\r\n          { folder, fileCount: files.length },\r\n        );\r\n      }\r\n\r\n      fs.rmdirSync(folderPath);\r\n      return { message: 'Folder deleted successfully' };\r\n    });\r\n\r\n    if (!result.success) {\r\n      if (result.error.code === FileErrorCodes.FILE_NOT_FOUND) {\r\n        throw new NotFoundException(result.error.message);\r\n      }\r\n      if (result.error.code === FileErrorCodes.FOLDER_NOT_EMPTY) {\r\n        throw new BadRequestException(result.error.message);\r\n      }\r\n      this.logger.error(`Failed to delete folder: ${result.error.message}`);\r\n      throw new InternalServerErrorException('Failed to delete folder');\r\n    }\r\n\r\n    return result.data;\r\n  }\r\n\r\n  getDestination(req, file, cb) {\r\n    try {\r\n      const folderPath = this.getSafePath(\r\n        this.config.storagePath,\r\n        req.params.folder,\r\n      );\r\n      if (!fs.existsSync(folderPath)) {\r\n        fs.mkdirSync(folderPath, { recursive: true });\r\n      }\r\n      cb(null, folderPath);\r\n    } catch (error) {\r\n      cb(error, null);\r\n    }\r\n  }\r\n\r\n  getFilename(req, file, cb) {\r\n    try {\r\n      const extension = file.originalname.substring(\r\n        file.originalname.lastIndexOf('.'),\r\n      );\r\n      const baseFilename = req.query.filename || 'uploaded_file';\r\n\r\n      const files = (req as any).files as Express.Multer.File[];\r\n\r\n      let finalFilename: string;\r\n\r\n      if (files.length === 1) {\r\n        finalFilename = `${baseFilename}${extension}`;\r\n      } else {\r\n        if (!(req as any)._fileCounter) {\r\n          (req as any)._fileCounter = 0;\r\n        }\r\n\r\n        (req as any)._fileCounter++;\r\n        finalFilename = `${baseFilename}${(req as any)._fileCounter}${extension}`;\r\n      }\r\n\r\n      cb(null, finalFilename);\r\n    } catch (error) {\r\n      cb(error, null);\r\n    }\r\n  }\r\n\r\n  uploadFiles(folder: string, files: Express.Multer.File[]) {\r\n    if (!files || files.length === 0) {\r\n      this.logger.error(`No files provided for folder ${folder}`);\r\n      throw new BadRequestException('File upload failed: No files provided');\r\n    }\r\n\r\n    const uploadedFiles = files.map((file) => {\r\n      if (!this.validateFileType(file)) {\r\n        this.logger.error(\r\n          `Invalid file type: ${file.mimetype} for ${file.originalname}`,\r\n        );\r\n        throw new BadRequestException(\r\n          `Invalid file type for ${file.originalname}`,\r\n        );\r\n      }\r\n      if (!this.validateFileSize(file)) {\r\n        this.logger.error(`File size exceeds limit: ${file.size} bytes`);\r\n        throw new BadRequestException(\r\n          `File size exceeds limit for ${file.originalname}`,\r\n        );\r\n      }\r\n      this.logger.log(`File uploaded: ${file.filename} to folder: ${folder}`);\r\n      return { filename: file.filename };\r\n    });\r\n\r\n    return { message: 'Files uploaded successfully', files: uploadedFiles };\r\n  }\r\n\r\n  downloadFile(folder: string, filename: string, res: Response) {\r\n    const filePath = this.getSafePath(\r\n      this.config.storagePath,\r\n      folder,\r\n      filename,\r\n    );\r\n    if (!fs.existsSync(filePath)) {\r\n      this.logger.error(`File not found: ${filename} in folder: ${folder}`);\r\n      throw new NotFoundException('File not found');\r\n    }\r\n    return res.download(filePath);\r\n  }\r\n\r\n  async getFileMetadata(\r\n    folder: string,\r\n    filename: string,\r\n  ): Promise<FileMetadataResponse> {\r\n    const filePath = this.getSafePath(\r\n      this.config.storagePath,\r\n      folder,\r\n      filename,\r\n    );\r\n    if (!fs.existsSync(filePath)) {\r\n      this.logger.error(`File not found: ${filename} in folder: ${folder}`);\r\n      throw new NotFoundException('File not found');\r\n    }\r\n    try {\r\n      const stats = fs.statSync(filePath);\r\n      return {\r\n        filename,\r\n        size: stats.size,\r\n        createdAt: stats.birthtime,\r\n        modifiedAt: stats.mtime,\r\n      };\r\n    } catch (error) {\r\n      this.logger.error(\r\n        `Error retrieving metadata for ${filename}: ${error.message}`,\r\n      );\r\n      throw new InternalServerErrorException('Error retrieving file metadata');\r\n    }\r\n  }\r\n\r\n  moveFile(\r\n    folder: string,\r\n    filename: string,\r\n    body: { newFolder?: string; newFilename?: string },\r\n  ) {\r\n    const oldPath = this.getSafePath(this.config.storagePath, folder, filename);\r\n    const newFolder = body.newFolder || folder;\r\n    const newFilename = body.newFilename || filename;\r\n    const newFolderPath = this.getSafePath(this.config.storagePath, newFolder);\r\n    if (!fs.existsSync(newFolderPath)) {\r\n      try {\r\n        fs.mkdirSync(newFolderPath, { recursive: true });\r\n        this.logger.log(`Created destination folder: ${newFolder}`);\r\n      } catch (error) {\r\n        this.logger.error(\r\n          `Error creating folder ${newFolder}: ${error.message}`,\r\n        );\r\n        throw new InternalServerErrorException(\r\n          'Failed to create destination folder',\r\n        );\r\n      }\r\n    }\r\n    const newPath = this.getSafePath(newFolderPath, newFilename);\r\n    if (fs.existsSync(newPath)) {\r\n      this.logger.error(`File already exists at destination: ${newPath}`);\r\n      throw new BadRequestException('File already exists at destination');\r\n    }\r\n    try {\r\n      fs.renameSync(oldPath, newPath);\r\n      this.logger.log(`File moved from ${oldPath} to ${newPath}`);\r\n      return { message: 'File moved/renamed successfully', newPath };\r\n    } catch (error) {\r\n      this.logger.error(`Error moving file: ${error.message}`);\r\n      throw new InternalServerErrorException('Error moving file');\r\n    }\r\n  }\r\n\r\n  copyFile(folder: string, filename: string, body: { newFolder?: string }) {\r\n    const oldPath = this.getSafePath(this.config.storagePath, folder, filename);\r\n    const newFolder = body.newFolder || folder;\r\n    const newFolderPath = this.getSafePath(this.config.storagePath, newFolder);\r\n    if (!fs.existsSync(oldPath)) {\r\n      this.logger.error(`File not found: ${filename} in folder: ${folder}`);\r\n      throw new NotFoundException('File not found');\r\n    }\r\n    if (!fs.existsSync(newFolderPath)) {\r\n      try {\r\n        fs.mkdirSync(newFolderPath, { recursive: true });\r\n        this.logger.log(`Created destination folder: ${newFolder}`);\r\n      } catch (error) {\r\n        this.logger.error(\r\n          `Error creating folder ${newFolder}: ${error.message}`,\r\n        );\r\n        throw new InternalServerErrorException(\r\n          'Failed to create destination folder',\r\n        );\r\n      }\r\n    }\r\n    const newPath = this.getSafePath(newFolderPath, filename);\r\n    try {\r\n      fs.copyFileSync(oldPath, newPath);\r\n      this.logger.log(`File copied from ${oldPath} to ${newPath}`);\r\n      return { message: 'File copied successfully', newPath };\r\n    } catch (error) {\r\n      this.logger.error(`Error copying file: ${error.message}`);\r\n      throw new InternalServerErrorException('Error copying file');\r\n    }\r\n  }\r\n\r\n  async downloadAllFiles(folder: string, res: Response) {\r\n    const folderPath = this.getSafePath(this.config.storagePath, folder);\r\n    if (!fs.existsSync(folderPath)) {\r\n      this.logger.error(`Folder not found: ${folder}`);\r\n      throw new NotFoundException('Folder not found');\r\n    }\r\n    const files = fs.readdirSync(folderPath);\r\n    if (files.length === 0) {\r\n      this.logger.warn(`No files found in folder: ${folder}`);\r\n      throw new BadRequestException('No files available in this folder');\r\n    }\r\n    const archive = archiver('zip', { zlib: { level: 9 } });\r\n    res.attachment(`${folder}.zip`);\r\n    archive.pipe(res);\r\n    files.forEach((file) => {\r\n      try {\r\n        const filePath = this.getSafePath(folderPath, file);\r\n        archive.file(filePath, { name: file });\r\n      } catch (error) {\r\n        this.logger.error(`Error adding file ${file} to ZIP: ${error.message}`);\r\n      }\r\n    });\r\n    try {\r\n      await archive.finalize();\r\n      this.logger.log(`ZIP archive generated for folder: ${folder}`);\r\n    } catch (error) {\r\n      this.logger.error(`Error finalizing ZIP: ${error.message}`);\r\n      throw new InternalServerErrorException('Error generating ZIP archive');\r\n    }\r\n  }\r\n\r\n  getTemporaryLinks(folder: string) {\r\n    const folderPath = this.getSafePath(this.config.storagePath, folder);\r\n    if (!fs.existsSync(folderPath)) {\r\n      this.logger.error(`Folder not found: ${folder}`);\r\n      throw new NotFoundException('Folder not found');\r\n    }\r\n    const files = fs.readdirSync(folderPath);\r\n    if (files.length === 0) {\r\n      this.logger.warn(`No files found in folder: ${folder}`);\r\n      throw new BadRequestException('No files available in this folder');\r\n    }\r\n    const fileLinks = files.map((file) => ({\r\n      filename: file,\r\n      url: `${process.env.serviceUrl}/folders/${folder}/files/${file}?temp=true`,\r\n    }));\r\n    return { folder, fileLinks };\r\n  }\r\n\r\n  getTemporaryFileLink(folder: string, filename: string) {\r\n    return {\r\n      url: `${process.env.serviceUrl}/folders/${folder}/files/${filename}?temp=true`,\r\n    };\r\n  }\r\n\r\n  searchFiles(folder: string, pattern: string) {\r\n    const folderPath = this.getSafePath(this.config.storagePath, folder);\r\n    if (!fs.existsSync(folderPath)) {\r\n      this.logger.error(`Folder not found: ${folder}`);\r\n      throw new NotFoundException('Folder not found');\r\n    }\r\n    let regex: RegExp;\r\n    try {\r\n      regex = new RegExp(pattern, 'i');\r\n    } catch (error) {\r\n      console.log('error', error);\r\n      this.logger.error(`Invalid regex: ${pattern}`);\r\n      throw new BadRequestException('Invalid regular expression');\r\n    }\r\n    const files = fs.readdirSync(folderPath);\r\n    const matchingFiles = files.filter((file) => regex.test(file));\r\n    return { folder, pattern, matchingFiles };\r\n  }\r\n\r\n  async getJsonFile(\r\n    folder: string,\r\n    filename: string,\r\n  ): Promise<JsonFileResponse> {\r\n    const filePath = this.getSafePath(\r\n      this.config.storagePath,\r\n      folder,\r\n      `${filename}.json`,\r\n    );\r\n    if (!fs.existsSync(filePath)) {\r\n      this.logger.error(\r\n        `JSON file not found: ${filename}.json in folder ${folder}`,\r\n      );\r\n      throw new NotFoundException('JSON file not found');\r\n    }\r\n    try {\r\n      const fileContent = fs.readFileSync(filePath, 'utf-8');\r\n      return { content: JSON.parse(fileContent) };\r\n    } catch (error) {\r\n      this.logger.error(\r\n        `Error parsing JSON file ${filename}.json: ${error.message}`,\r\n      );\r\n      throw new InternalServerErrorException('Error parsing JSON file');\r\n    }\r\n  }\r\n\r\n  async getNestedJsonValue(\r\n    folder: string,\r\n    filename: string,\r\n    pathParams: any,\r\n  ): Promise<JsonValueResponse> {\r\n    const wildcardPath = pathParams['path'][0] || '';\r\n    const keys = wildcardPath.split('/').filter((key) => key !== '');\r\n\r\n    try {\r\n      JsonPathValidator.validate(keys);\r\n\r\n      const filePath = this.getSafePath(\r\n        this.config.storagePath,\r\n        folder,\r\n        `${filename}.json`,\r\n      );\r\n      if (!fs.existsSync(filePath)) {\r\n        this.logger.error(\r\n          `JSON file not found: ${filename}.json in folder ${folder}`,\r\n        );\r\n        throw new NotFoundException('JSON file not found');\r\n      }\r\n\r\n      const fileContent = fs.readFileSync(filePath, 'utf-8');\r\n      let result = JSON.parse(fileContent);\r\n\r\n      for (const key of keys) {\r\n        if (result[key] === undefined) {\r\n          this.logger.error(`Key '${key}' not found in ${filename}.json`);\r\n          throw new BadRequestException(`Key '${key}' not found`);\r\n        }\r\n        result = result[key];\r\n      }\r\n      return { value: result };\r\n    } catch (error) {\r\n      if (error instanceof JsonPathValidationError) {\r\n        throw new BadRequestException(error.message);\r\n      }\r\n      if (error instanceof BadRequestException) {\r\n        throw error;\r\n      }\r\n      this.logger.error(\r\n        `Error processing JSON file ${filename}.json: ${error.message}`,\r\n      );\r\n      throw new InternalServerErrorException('Error processing JSON file');\r\n    }\r\n  }\r\n\r\n  async queryJsonFile(\r\n    folder: string,\r\n    filename: string,\r\n    query: string,\r\n  ): Promise<JsonValueResponse> {\r\n    try {\r\n      JsonPathValidator.validateJsonQuery(query);\r\n\r\n      const filePath = this.getSafePath(\r\n        this.config.storagePath,\r\n        folder,\r\n        `${filename}.json`,\r\n      );\r\n      if (!fs.existsSync(filePath)) {\r\n        this.logger.error(\r\n          `JSON file not found: ${filename}.json in folder ${folder}`,\r\n        );\r\n        throw new NotFoundException('JSON file not found');\r\n      }\r\n\r\n      const fileContent = fs.readFileSync(filePath, 'utf-8');\r\n      const jsonData = JSON.parse(fileContent);\r\n\r\n      const segments = query.split('.');\r\n      let result = jsonData;\r\n\r\n      for (const segment of segments) {\r\n        const arrayMatch = segment.match(/^(\\w+)\\[(\\d+)\\]$/);\r\n        if (arrayMatch) {\r\n          const [, key, index] = arrayMatch;\r\n          result = result[key]?.[parseInt(index, 10)];\r\n        } else {\r\n          result = result[segment];\r\n        }\r\n\r\n        if (result === undefined) {\r\n          throw new BadRequestException(`Path '${query}' not found in JSON`);\r\n        }\r\n      }\r\n\r\n      return { value: result };\r\n    } catch (error) {\r\n      if (\r\n        error instanceof JsonPathValidationError ||\r\n        error instanceof BadRequestException\r\n      ) {\r\n        throw new BadRequestException(error.message);\r\n      }\r\n      this.logger.error(\r\n        `Error querying JSON file ${filename}.json: ${error.message}`,\r\n      );\r\n      throw new InternalServerErrorException('Error processing JSON file');\r\n    }\r\n  }\r\n\r\n  deleteFile(folder: string, filename: string) {\r\n    const filePath = this.getSafePath(\r\n      this.config.storagePath,\r\n      folder,\r\n      filename,\r\n    );\r\n    if (!fs.existsSync(filePath)) {\r\n      this.logger.error(`File not found: ${filename} in folder: ${folder}`);\r\n      throw new NotFoundException('File not found');\r\n    }\r\n    try {\r\n      fs.rmSync(filePath);\r\n      this.logger.log(\r\n        `File deleted successfully: ${filename} from folder: ${folder}`,\r\n      );\r\n      return { message: 'File deleted successfully' };\r\n    } catch (error) {\r\n      this.logger.error(`Error deleting file ${filename}: ${error.message}`);\r\n      throw new InternalServerErrorException('Error deleting file');\r\n    }\r\n  }\r\n\r\n  updateFileMetadata(\r\n    folder: string,\r\n    filename: string,\r\n    body: { newFilename?: string; newFolder?: string },\r\n  ) {\r\n    const oldPath = this.getSafePath(this.config.storagePath, folder, filename);\r\n    const newFolder = body.newFolder || folder;\r\n    const newFilename = body.newFilename || filename;\r\n    const newFolderPath = this.getSafePath(this.config.storagePath, newFolder);\r\n    if (!fs.existsSync(newFolderPath)) {\r\n      try {\r\n        fs.mkdirSync(newFolderPath, { recursive: true });\r\n        this.logger.log(`Created destination folder: ${newFolder}`);\r\n      } catch (error) {\r\n        this.logger.error(\r\n          `Error creating folder ${newFolder}: ${error.message}`,\r\n        );\r\n        throw new InternalServerErrorException(\r\n          'Failed to create destination folder',\r\n        );\r\n      }\r\n    }\r\n    const newPath = this.getSafePath(newFolderPath, newFilename);\r\n    if (fs.existsSync(newPath)) {\r\n      this.logger.error(`File already exists at destination: ${newPath}`);\r\n      throw new BadRequestException('File already exists at destination');\r\n    }\r\n    try {\r\n      fs.renameSync(oldPath, newPath);\r\n      this.logger.log(`File metadata updated from ${oldPath} to ${newPath}`);\r\n      return { message: 'File metadata updated successfully', newPath };\r\n    } catch (error) {\r\n      this.logger.error(`Error updating file metadata: ${error.message}`);\r\n      throw new InternalServerErrorException('Error updating file metadata');\r\n    }\r\n  }\r\n\r\n  getFolderSize(folder: string) {\r\n    const folderPath = this.getSafePath(this.config.storagePath, folder);\r\n    if (!fs.existsSync(folderPath)) {\r\n      this.logger.error(`Folder not found: ${folder}`);\r\n      throw new NotFoundException('Folder not found');\r\n    }\r\n    const getSize = (dirPath: string): number => {\r\n      const files = fs.readdirSync(dirPath);\r\n      return files.reduce((total, file) => {\r\n        const filePath = this.getSafePath(dirPath, file);\r\n        const stats = fs.statSync(filePath);\r\n        return total + (stats.isDirectory() ? getSize(filePath) : stats.size);\r\n      }, 0);\r\n    };\r\n    const size = getSize(folderPath);\r\n    return { folder, size };\r\n  }\r\n\r\n  listFiles(folder: string) {\r\n    const folderPath = this.getSafePath(this.config.storagePath, folder);\r\n    if (!fs.existsSync(folderPath)) {\r\n      this.logger.error(`Folder not found: ${folder}`);\r\n      throw new NotFoundException('Folder not found');\r\n    }\r\n    const files = fs.readdirSync(folderPath);\r\n    return { folder, files };\r\n  }\r\n\r\n  getFile(folder: string, filename: string, res: Response) {\r\n    const filePath = this.getSafePath(\r\n      this.config.storagePath,\r\n      folder,\r\n      filename,\r\n    );\r\n    if (!fs.existsSync(filePath)) {\r\n      this.logger.error(`File not found: ${filename} in folder: ${folder}`);\r\n      throw new NotFoundException('File not found');\r\n    }\r\n    return res.sendFile(filePath);\r\n  }\r\n\r\n  renameFolder(folder: string, newFolderName: string) {\r\n    const oldFolderPath = this.getSafePath(this.config.storagePath, folder);\r\n    const newFolderPath = this.getSafePath(\r\n      this.config.storagePath,\r\n      newFolderName,\r\n    );\r\n    if (!fs.existsSync(oldFolderPath)) {\r\n      this.logger.error(`Folder not found: ${folder}`);\r\n      throw new NotFoundException('Folder not found');\r\n    }\r\n    if (fs.existsSync(newFolderPath)) {\r\n      this.logger.error(`Folder already exists: ${newFolderName}`);\r\n      throw new BadRequestException('Folder already exists');\r\n    }\r\n    try {\r\n      fs.renameSync(oldFolderPath, newFolderPath);\r\n      this.logger.log(`Folder renamed from ${folder} to ${newFolderName}`);\r\n      return { message: 'Folder renamed successfully', newFolderName };\r\n    } catch (error) {\r\n      this.logger.error(`Error renaming folder ${folder}: ${error.message}`);\r\n      throw new InternalServerErrorException('Error renaming folder');\r\n    }\r\n  }\r\n\r\n  // Method to move a folder to a different location\r\n  moveFolder(folder: string, newLocation: string) {\r\n    const oldFolderPath = this.getSafePath(this.config.storagePath, folder);\r\n    const newFolderPath = this.getSafePath(\r\n      this.config.storagePath,\r\n      newLocation,\r\n      folder,\r\n    );\r\n    if (!fs.existsSync(oldFolderPath)) {\r\n      this.logger.error(`Folder not found: ${folder}`);\r\n      throw new NotFoundException('Folder not found');\r\n    }\r\n    if (fs.existsSync(newFolderPath)) {\r\n      this.logger.error(\r\n        `Folder already exists at destination: ${newFolderPath}`,\r\n      );\r\n      throw new BadRequestException('Folder already exists at destination');\r\n    }\r\n    try {\r\n      fs.renameSync(oldFolderPath, newFolderPath);\r\n      this.logger.log(`Folder moved from ${oldFolderPath} to ${newFolderPath}`);\r\n      return { message: 'Folder moved successfully', newFolderPath };\r\n    } catch (error) {\r\n      this.logger.error(`Error moving folder ${folder}: ${error.message}`);\r\n      throw new InternalServerErrorException('Error moving folder');\r\n    }\r\n  }\r\n\r\n  // Method to get a preview of a file\r\n  async getFilePreview(\r\n    folder: string,\r\n    filename: string,\r\n    req: Request,\r\n    res: Response,\r\n  ) {\r\n    const filePath = this.getSafePath(\r\n      this.config.storagePath,\r\n      folder,\r\n      filename,\r\n    );\r\n    if (!fs.existsSync(filePath)) {\r\n      this.logger.error(`File not found: ${filename} in folder: ${folder}`);\r\n      throw new NotFoundException('File not found');\r\n    }\r\n\r\n    const stats = fs.statSync(filePath);\r\n    const mimeType = lookup(filePath) || 'application/octet-stream';\r\n\r\n    // For large files, only show preview if supported\r\n    if (stats.size > VIEW_CONFIG.PREVIEW_SIZE_LIMIT) {\r\n      if (!this.isPreviewSupported(mimeType)) {\r\n        throw new BadRequestException(\r\n          'Preview not available for this file type or size',\r\n        );\r\n      }\r\n    }\r\n\r\n    try {\r\n      // Handle image previews\r\n      if (VIEW_CONFIG.IMAGE_TYPES.includes(mimeType)) {\r\n        const thumbnail = fs.readFileSync(filePath);\r\n\r\n        res.setHeader('Content-Type', mimeType);\r\n        return res.send(thumbnail);\r\n      }\r\n\r\n      // Handle video and audio previews - Stream with range support\r\n      if (\r\n        VIEW_CONFIG.VIDEO_TYPES.includes(mimeType) ||\r\n        VIEW_CONFIG.AUDIO_TYPES.includes(mimeType)\r\n      ) {\r\n        const range = req.headers.range;\r\n        if (range) {\r\n          const parts = range.replace(/bytes=/, '').split('-');\r\n          const start = parseInt(parts[0], 10);\r\n          const end = parts[1] ? parseInt(parts[1], 10) : stats.size - 1;\r\n          const chunkSize = end - start + 1;\r\n          const stream = fs.createReadStream(filePath, { start, end });\r\n\r\n          const headers = {\r\n            'Content-Range': `bytes ${start}-${end}/${stats.size}`,\r\n            'Accept-Ranges': 'bytes',\r\n            'Content-Length': chunkSize,\r\n            'Content-Type': mimeType,\r\n          };\r\n\r\n          res.writeHead(206, headers);\r\n          return stream.pipe(res);\r\n        } else {\r\n          const headers = {\r\n            'Content-Length': stats.size,\r\n            'Content-Type': mimeType,\r\n            'Accept-Ranges': 'bytes',\r\n          };\r\n          res.writeHead(200, headers);\r\n          return fs.createReadStream(filePath).pipe(res);\r\n        }\r\n      }\r\n\r\n      // Handle text previews\r\n      if (VIEW_CONFIG.TEXT_TYPES.includes(mimeType)) {\r\n        const content = fs.readFileSync(filePath, 'utf-8');\r\n        const preview =\r\n          content.substring(0, 1000) + (content.length > 1000 ? '...' : '');\r\n        return { preview, mimeType };\r\n      }\r\n\r\n      // Handle PDF previews\r\n      if (VIEW_CONFIG.PDF_TYPES.includes(mimeType)) {\r\n        res.setHeader('Content-Type', mimeType);\r\n        res.setHeader(\r\n          'Content-Range',\r\n          `bytes 0-${Math.min(stats.size, VIEW_CONFIG.PREVIEW_SIZE_LIMIT)}`,\r\n        );\r\n        const stream = createReadStream(filePath, {\r\n          start: 0,\r\n          end: VIEW_CONFIG.PREVIEW_SIZE_LIMIT - 1,\r\n        });\r\n        return stream.pipe(res);\r\n      }\r\n\r\n      throw new BadRequestException('Preview not available for this file type');\r\n    } catch (error) {\r\n      this.logger.error(\r\n        `Error generating preview for ${filename}: ${error.message}`,\r\n      );\r\n      throw new InternalServerErrorException('Error generating file preview');\r\n    }\r\n  }\r\n\r\n  async getThumbnail(folder: string, filename: string, res: Response) {\r\n    const filePath = this.getSafePath(\r\n      this.config.storagePath,\r\n      folder,\r\n      filename,\r\n    );\r\n    if (!fs.existsSync(filePath)) {\r\n      this.logger.error(`File not found: ${filename} in folder: ${folder}`);\r\n      throw new NotFoundException('File not found');\r\n    }\r\n\r\n    const mimeType = lookup(filePath) || 'application/octet-stream';\r\n    // const thumbnailsDir = this.getSafePath(\r\n    //   this.config.storagePath,\r\n    //   '.thumbnails',\r\n    // );\r\n    // const thumbnailPath = this.getSafePath(\r\n    //   thumbnailsDir,\r\n    //   `${folder}_${filename}.jpg`,\r\n    // );\r\n\r\n    try {\r\n      // Handle image thumbnails\r\n      if (VIEW_CONFIG.IMAGE_TYPES.includes(mimeType)) {\r\n        const thumbnail = fs.readFileSync(filePath);\r\n\r\n        res.setHeader('Content-Type', 'image/jpeg');\r\n        return res.send(thumbnail);\r\n      }\r\n\r\n      // For video types, try to extract frame or generate dynamic thumbnail\r\n      if (VIEW_CONFIG.VIDEO_TYPES.includes(mimeType)) {\r\n        res.setHeader('Content-Type', 'image/jpeg');\r\n        return res.send(undefined);\r\n      }\r\n\r\n      throw new BadRequestException(\r\n        'Thumbnail not available for this file type',\r\n      );\r\n    } catch (error) {\r\n      this.logger.error(\r\n        `Error generating thumbnail for ${filename}: ${error.message}`,\r\n      );\r\n      throw new InternalServerErrorException('Error generating thumbnail');\r\n    }\r\n  }\r\n\r\n  private isPreviewSupported(mimeType: string): boolean {\r\n    const supportedTypes = [\r\n      ...VIEW_CONFIG.IMAGE_TYPES,\r\n      ...VIEW_CONFIG.PDF_TYPES,\r\n      ...VIEW_CONFIG.TEXT_TYPES,\r\n      ...VIEW_CONFIG.AUDIO_TYPES,\r\n      ...VIEW_CONFIG.VIDEO_TYPES,\r\n    ] as string[];\r\n    return supportedTypes.includes(mimeType);\r\n  }\r\n\r\n  // Method to get a hierarchical tree structure of folders and files\r\n  async getFolderTree(): Promise<FolderTreeResponse> {\r\n    const buildTree = (dirPath: string) => {\r\n      const name = dirPath.split('/').pop();\r\n      const item = { name, children: [] };\r\n      const files = fs.readdirSync(dirPath, { withFileTypes: true });\r\n      for (const file of files) {\r\n        if (file.isDirectory()) {\r\n          item.children.push(buildTree(join(dirPath, file.name)));\r\n        } else {\r\n          item.children.push({ name: file.name });\r\n        }\r\n      }\r\n      return item;\r\n    };\r\n    return buildTree(this.config.storagePath);\r\n  }\r\n\r\n  // Method to generate a shareable link for a file\r\n  async generateShareableLink(\r\n    folder: string,\r\n    filename: string,\r\n  ): Promise<ShareableLinkResponse> {\r\n    const filePath = this.getSafePath(\r\n      this.config.storagePath,\r\n      folder,\r\n      filename,\r\n    );\r\n    if (!fs.existsSync(filePath)) {\r\n      this.logger.error(`File not found: ${filename} in folder: ${folder}`);\r\n      throw new NotFoundException('File not found');\r\n    }\r\n    const shareableLink = `${process.env.serviceUrl}/folders/${folder}/files/${filename}?share=true`;\r\n    return { shareableLink };\r\n  }\r\n\r\n  // Method to lock a file for editing\r\n  lockFile(folder: string, filename: string) {\r\n    const filePath = this.getSafePath(\r\n      this.config.storagePath,\r\n      folder,\r\n      filename,\r\n    );\r\n    if (!fs.existsSync(filePath)) {\r\n      this.logger.error(`File not found: ${filename} in folder: ${folder}`);\r\n      throw new NotFoundException('File not found');\r\n    }\r\n    const lockFilePath = `${filePath}.lock`;\r\n    if (fs.existsSync(lockFilePath)) {\r\n      this.logger.error(`File is already locked: ${filename}`);\r\n      throw new BadRequestException('File is already locked');\r\n    }\r\n    try {\r\n      fs.writeFileSync(lockFilePath, '');\r\n      this.logger.log(`File locked successfully: ${filename}`);\r\n      return { message: 'File locked successfully' };\r\n    } catch (error) {\r\n      this.logger.error(`Error locking file ${filename}: ${error.message}`);\r\n      throw new InternalServerErrorException('Error locking file');\r\n    }\r\n  }\r\n\r\n  // Method to unlock a file for editing\r\n  unlockFile(folder: string, filename: string) {\r\n    const filePath = this.getSafePath(\r\n      this.config.storagePath,\r\n      folder,\r\n      filename,\r\n    );\r\n    if (!fs.existsSync(filePath)) {\r\n      this.logger.error(`File not found: ${filename} in folder: ${folder}`);\r\n      throw new NotFoundException('File not found');\r\n    }\r\n    const lockFilePath = `${filePath}.lock`;\r\n    if (!fs.existsSync(lockFilePath)) {\r\n      this.logger.error(`File is not locked: ${filename}`);\r\n      throw new BadRequestException('File is not locked');\r\n    }\r\n    try {\r\n      fs.rmSync(lockFilePath);\r\n      this.logger.log(`File unlocked successfully: ${filename}`);\r\n      return { message: 'File unlocked successfully' };\r\n    } catch (error) {\r\n      this.logger.error(`Error unlocking file ${filename}: ${error.message}`);\r\n      throw new InternalServerErrorException('Error unlocking file');\r\n    }\r\n  }\r\n\r\n  // Method to get a list of recently modified files\r\n  getRecentFiles() {\r\n    const getRecentFilesFromDir = (dirPath: string) => {\r\n      const files = fs.readdirSync(dirPath, { withFileTypes: true });\r\n      let recentFiles = [];\r\n      for (const file of files) {\r\n        const filePath = join(dirPath, file.name);\r\n        if (file.isDirectory()) {\r\n          recentFiles = recentFiles.concat(getRecentFilesFromDir(filePath));\r\n        } else {\r\n          const stats = fs.statSync(filePath);\r\n          recentFiles.push({ name: file.name, modifiedAt: stats.mtime });\r\n        }\r\n      }\r\n      return recentFiles;\r\n    };\r\n    const recentFiles = getRecentFilesFromDir(this.config.storagePath);\r\n    recentFiles.sort((a, b) => b.modifiedAt - a.modifiedAt);\r\n    return recentFiles.slice(0, 10);\r\n  }\r\n\r\n  // Method to get different versions of a file\r\n  async getFileVersions(\r\n    folder: string,\r\n    filename: string,\r\n  ): Promise<FileVersionResponse> {\r\n    const filePath = this.getSafePath(\r\n      this.config.storagePath,\r\n      folder,\r\n      filename,\r\n    );\r\n    if (!fs.existsSync(filePath)) {\r\n      this.logger.error(`File not found: ${filename} in folder: ${folder}`);\r\n      throw new NotFoundException('File not found');\r\n    }\r\n    const versionFiles = fs\r\n      .readdirSync(this.config.storagePath)\r\n      .filter((file) => file.startsWith(`${filename}.v`))\r\n      .map((file) => ({ version: file.split('.v')[1], filename: file }));\r\n    return { filename, versions: versionFiles };\r\n  }\r\n\r\n  onModuleInit() {\r\n    // Create thumbnails directory if it doesn't exist\r\n    const thumbnailsPath = this.getSafePath(\r\n      this.config.storagePath,\r\n      '.thumbnails',\r\n    );\r\n    if (!fs.existsSync(thumbnailsPath)) {\r\n      fs.mkdirSync(thumbnailsPath, { recursive: true });\r\n    }\r\n    // Run initial cleanup when service starts\r\n    // this.cleanupFiles();\r\n  }\r\n\r\n  // @Interval(3600000) // Run every hour\r\n  // private async cleanupFiles() {\r\n  //     try {\r\n  //         await FileCleanupUtil.cleanupTempFiles(this.config.storagePath);\r\n  //         await FileCleanupUtil.cleanupEmptyFolders(this.config.storagePath);\r\n  //         this.logger.log('Completed periodic file cleanup');\r\n  //     } catch (error) {\r\n  //         this.logger.error('Error during file cleanup:', error);\r\n  //     }\r\n  // }\r\n}\r\n","export class JsonPathValidationError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = 'JsonPathValidationError';\r\n  }\r\n}\r\n\r\nexport class JsonPathValidator {\r\n  static validate(path: string[]): boolean {\r\n    if (!Array.isArray(path) || path.length === 0) {\r\n      throw new JsonPathValidationError('Path must be a non-empty array');\r\n    }\r\n\r\n    const validKeyRegex = /^[a-zA-Z_$][a-zA-Z0-9_$]*$/;\r\n    for (const segment of path) {\r\n      if (!validKeyRegex.test(segment)) {\r\n        throw new JsonPathValidationError(`Invalid path segment: ${segment}`);\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  static validateJsonQuery(query: string): boolean {\r\n    const validQueryRegex = /^[\\w.[\\]]+$/;\r\n    if (!validQueryRegex.test(query)) {\r\n      throw new JsonPathValidationError('Invalid JSON query format');\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","export interface FileModuleOptions {\r\n  storagePath?: string;\r\n  maxFileSize?: number;\r\n  allowedFileTypes?: string[];\r\n}\r\n\r\nexport const FILE_MODULE_OPTIONS = 'FILE_MODULE_OPTIONS';\r\n","import { registerAs } from '@nestjs/config';\r\n\r\nexport interface TelegramBotConfig {\r\n  token: string;\r\n  maxConcurrentOperations: number;\r\n}\r\n\r\nexport interface TelegramChannelConfig {\r\n  channelId: string;\r\n  description?: string;\r\n  botTokens: string[]; // List of bot tokens that can forward to this channel\r\n}\r\n\r\nexport interface TelegramConfig {\r\n  bots: TelegramBotConfig[];\r\n  channels: TelegramChannelConfig[];\r\n  adminChatId?: string;\r\n}\r\n\r\nexport default registerAs('telegram', () => {\r\n  const maxOps = parseInt(process.env.TELEGRAM_BOT_MAX_OPERATIONS || '10');\r\n  const adminChatId = process.env.TELEGRAM_ADMIN_CHAT_ID;\r\n  // Parse channel configurations from environment variables\r\n  const channelConfigs = parseChannelConfigs();\r\n\r\n  if (!channelConfigs.length) {\r\n    console.warn('No Telegram channel configurations found!');\r\n  } else {\r\n    console.log(\r\n      'Parsed channel configurations:',\r\n      channelConfigs.map((channel) => ({\r\n        channelId: channel.channelId,\r\n        description: channel.description || 'no description',\r\n        botCount: channel.botTokens.length,\r\n      })),\r\n    );\r\n  }\r\n\r\n  // Extract unique bot tokens from channel configurations\r\n  const uniqueBotTokens = new Set<string>();\r\n  const botChannelMapping = new Map<string, string[]>();\r\n\r\n  channelConfigs.forEach((channel) => {\r\n    channel.botTokens.forEach((token) => {\r\n      uniqueBotTokens.add(token);\r\n      const channels = botChannelMapping.get(token) || [];\r\n      channels.push(channel.channelId);\r\n      botChannelMapping.set(token, channels);\r\n    });\r\n  });\r\n\r\n  if (!uniqueBotTokens.size) {\r\n    console.warn('No Telegram bot tokens found in channel configurations!');\r\n  }\r\n\r\n  const config: TelegramConfig = {\r\n    bots: Array.from(uniqueBotTokens).map((token) => ({\r\n      token: token.trim(),\r\n      maxConcurrentOperations: maxOps,\r\n    })),\r\n    channels: channelConfigs,\r\n    adminChatId,\r\n  };\r\n  console.log('Loaded Telegram configuration:', {\r\n    botsCount: config.bots.length,\r\n    channelsCount: config.channels.length,\r\n    botMappings: Array.from(botChannelMapping.entries()).map(\r\n      ([token, channels]) => ({\r\n        botToken: `${token.slice(0, 6)}...`,\r\n        channels,\r\n      }),\r\n    ),\r\n    hasAdminChatId: !!config.adminChatId,\r\n    maxOpsPerBot: maxOps,\r\n  });\r\n\r\n  return config;\r\n});\r\n\r\nfunction parseChannelConfigs(): TelegramChannelConfig[] {\r\n  const channelConfigs: TelegramChannelConfig[] = [];\r\n\r\n  // Get all environment variables\r\n  const envVars = Object.keys(process.env);\r\n\r\n  // Find all channel config variables (they can be in any order)\r\n  const channelConfigVars = envVars.filter((key) =>\r\n    key.startsWith('TELEGRAM_CHANNEL_CONFIG_'),\r\n  );\r\n\r\n  for (const configVar of channelConfigVars) {\r\n    const channelConfig = process.env[configVar];\r\n    if (!channelConfig) continue;\r\n\r\n    const [channelId, description, botTokensStr] = channelConfig.split('::');\r\n    if (!channelId || !botTokensStr) {\r\n      console.warn(`Invalid channel configuration format in ${configVar}`);\r\n      continue;\r\n    }\r\n\r\n    channelConfigs.push({\r\n      channelId: channelId.trim(),\r\n      description: description?.trim(),\r\n      botTokens: botTokensStr\r\n        .split(',')\r\n        .map((token) => token.trim())\r\n        .filter(Boolean),\r\n    });\r\n  }\r\n\r\n  return channelConfigs;\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { FileValidator } from '@nestjs/common';\r\n\r\n@Injectable()\r\nexport class CustomFileValidator extends FileValidator<{\r\n  fileTypes: string[];\r\n}> {\r\n  constructor(options: { fileTypes: string[] }) {\r\n    super(options);\r\n  }\r\n\r\n  isValid(file?: Express.Multer.File): boolean {\r\n    if (!file) {\r\n      return false;\r\n    }\r\n\r\n    return this.validationOptions.fileTypes.includes(file.mimetype);\r\n  }\r\n\r\n  buildErrorMessage(): string {\r\n    return `File type must be one of: ${this.validationOptions.fileTypes.join(', ')}`;\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class FileSizeValidator extends FileValidator<{ maxSize: number }> {\r\n  constructor(options: { maxSize: number }) {\r\n    super(options);\r\n  }\r\n\r\n  isValid(file?: Express.Multer.File): boolean {\r\n    if (!file) {\r\n      return false;\r\n    }\r\n\r\n    return file.size <= this.validationOptions.maxSize;\r\n  }\r\n\r\n  buildErrorMessage(): string {\r\n    return `File size must not exceed ${this.validationOptions.maxSize / (1024 * 1024)}MB`;\r\n  }\r\n}\r\n","import { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class FileMetadataResponse {\r\n  @ApiProperty({ example: 'document.pdf', description: 'Name of the file' })\r\n  filename: string;\r\n\r\n  @ApiProperty({ example: 1024, description: 'Size of file in bytes' })\r\n  size: number;\r\n\r\n  @ApiProperty({\r\n    example: '2024-02-20T10:00:00.000Z',\r\n    description: 'Creation timestamp',\r\n  })\r\n  createdAt: Date;\r\n\r\n  @ApiProperty({\r\n    example: '2024-02-20T11:30:00.000Z',\r\n    description: 'Last modification timestamp',\r\n  })\r\n  modifiedAt: Date;\r\n}\r\n\r\nexport class FolderResponse {\r\n  @ApiProperty({\r\n    example: ['folder1', 'folder2'],\r\n    description: 'List of folder names',\r\n  })\r\n  folders: string[];\r\n}\r\n\r\nexport class FolderDetailsResponse {\r\n  @ApiProperty({ example: 'documents', description: 'Name of the folder' })\r\n  folder: string;\r\n\r\n  @ApiProperty({\r\n    example: ['file1.pdf', 'file2.jpg'],\r\n    description: 'List of files in the folder',\r\n  })\r\n  files: string[];\r\n\r\n  @ApiProperty({ example: 100, description: 'Total number of files in folder' })\r\n  totalFiles: number;\r\n\r\n  @ApiProperty({ example: 1, description: 'Current page number' })\r\n  page: number;\r\n\r\n  @ApiProperty({ example: 10, description: 'Number of items per page' })\r\n  limit: number;\r\n}\r\n\r\nexport class ShareableLinkResponse {\r\n  @ApiProperty({\r\n    example:\r\n      'https://promoteClients2.glitch.me/folders/docs/files/example.pdf?share=true',\r\n    description: 'Generated shareable link for the file',\r\n  })\r\n  shareableLink: string;\r\n}\r\n\r\nexport class FileVersionResponse {\r\n  @ApiProperty({\r\n    example: 'document.pdf',\r\n    description: 'Name of the original file',\r\n  })\r\n  filename: string;\r\n\r\n  @ApiProperty({\r\n    example: [\r\n      { version: '1', filename: 'document.pdf.v1' },\r\n      { version: '2', filename: 'document.pdf.v2' },\r\n    ],\r\n    description: 'List of available versions',\r\n  })\r\n  versions: Array<{ version: string; filename: string }>;\r\n}\r\n\r\nexport class FolderTreeResponse {\r\n  @ApiProperty({ example: 'root', description: 'Name of the current node' })\r\n  name: string;\r\n\r\n  @ApiProperty({\r\n    example: [{ name: 'folder1', children: [] }, { name: 'file1.pdf' }],\r\n    description: 'Child nodes (folders and files)',\r\n  })\r\n  children: Array<{ name: string; children?: any[] }>;\r\n}\r\n\r\nexport class ErrorResponse {\r\n  @ApiProperty({ example: 400, description: 'HTTP status code' })\r\n  statusCode: number;\r\n\r\n  @ApiProperty({ example: 'File not found', description: 'Error message' })\r\n  message: string;\r\n\r\n  @ApiProperty({ example: 'Bad Request', description: 'Error type' })\r\n  error: string;\r\n}\r\n\r\nexport class JsonFileResponse {\r\n  @ApiProperty({\r\n    example: { key: 'value' },\r\n    description: 'JSON file content',\r\n  })\r\n  content: any;\r\n}\r\n\r\nexport class JsonValueResponse {\r\n  @ApiProperty({\r\n    example: 'value',\r\n    description: 'Value at the specified path in the JSON file',\r\n  })\r\n  value: any;\r\n}\r\n\r\nexport class FileOperationMetricDto {\r\n  @ApiProperty({\r\n    example: 'createFolder',\r\n    description: 'Name of the file operation',\r\n  })\r\n  operation: string;\r\n\r\n  @ApiProperty({\r\n    example: true,\r\n    description: 'Whether the operation succeeded',\r\n  })\r\n  success: boolean;\r\n\r\n  @ApiProperty({\r\n    example: 123,\r\n    description: 'Duration of operation in milliseconds',\r\n  })\r\n  duration: number;\r\n\r\n  @ApiProperty({\r\n    example: 1645564789123,\r\n    description: 'Timestamp of the operation',\r\n  })\r\n  timestamp: number;\r\n\r\n  @ApiProperty({\r\n    example: '/uploads/docs',\r\n    required: false,\r\n    description: 'Path involved in the operation',\r\n  })\r\n  path?: string;\r\n\r\n  @ApiProperty({\r\n    required: false,\r\n    description: 'Error message if operation failed',\r\n  })\r\n  error?: string;\r\n}\r\n\r\nexport class FileOperationMetricsResponse {\r\n  @ApiProperty({\r\n    type: [FileOperationMetricDto],\r\n    description: 'Recent file operation metrics',\r\n  })\r\n  metrics: FileOperationMetricDto[];\r\n\r\n  @ApiProperty({\r\n    example: 0.05,\r\n    description: 'Rate of failed operations in the time window',\r\n  })\r\n  failureRate: number;\r\n\r\n  @ApiProperty({ example: 3600000, description: 'Time window in milliseconds' })\r\n  timeWindow: number;\r\n\r\n  @ApiProperty({\r\n    example: 100,\r\n    description: 'Total number of operations recorded',\r\n  })\r\n  totalOperations: number;\r\n}\r\n","module.exports = require(\"class-validator\");","import { Injectable, OnModuleInit, Logger } from '@nestjs/common';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport TelegramBot from 'node-telegram-bot-api';\r\nimport { TelegramLoadBalancer } from './telegram.load-balancer';\r\nimport { TelegramConfig } from '../config/telegram.config';\r\nimport {\r\n  BroadcastMessageDto,\r\n  BotStatusResponseDto,\r\n  ConfigurationResponseDto,\r\n  BroadcastResponseDto,\r\n  MessageType,\r\n} from './dto/telegram.dto';\r\n\r\n@Injectable()\r\nexport class TelegramService implements OnModuleInit {\r\n  private readonly logger = new Logger(TelegramService.name);\r\n  private readonly config: TelegramConfig;\r\n  private readonly MAX_RETRIES = 3;\r\n  private readonly RETRY_DELAY = 1000; // 1 second\r\n  private messageQueue: Map<string, {\r\n    retries: number;\r\n    message: TelegramBot.Message;\r\n    channelId: string;\r\n  }> = new Map();\r\n\r\n  constructor(\r\n    private readonly configService: ConfigService,\r\n    private readonly loadBalancer: TelegramLoadBalancer,\r\n  ) {\r\n    this.config = this.configService.get<TelegramConfig>('telegram');\r\n  }\r\n\r\n  async onModuleInit() {\r\n    this.logger.log('Initializing Telegram service...');\r\n    await this.initializeBots();\r\n    this.startMessageQueueProcessor();\r\n    this.logger.log('Telegram service initialized successfully');\r\n  }\r\n\r\n  private async initializeBots() {\r\n    if (!this.config?.bots?.length) {\r\n      this.logger.warn('No bots configured in telegram config');\r\n      return;\r\n    }\r\n    \r\n    this.logger.debug(`Initializing ${this.config.bots.length} bots...`);\r\n    const initPromises = this.config.bots.map(async botConfig => {\r\n      try {\r\n        this.loadBalancer.addBot(botConfig);\r\n        const bot = this.loadBalancer.getBotByToken(botConfig.token);\r\n        if (bot) {\r\n          this.setupMessageHandlers(bot);\r\n          const botInfo = await bot.getMe();\r\n          this.logger.log(`Bot @${botInfo.username} initialized successfully`);\r\n        }\r\n      } catch (error) {\r\n        this.logger.error(`Failed to initialize bot with token ${botConfig.token.slice(0, 6)}...`, error.stack);\r\n        this.queueBotRecovery(botConfig);\r\n      }\r\n    });\r\n\r\n    await Promise.allSettled(initPromises);\r\n  }\r\n\r\n  private queueBotRecovery(botConfig: any) {\r\n    this.logger.debug(`Queuing recovery for bot with token ${botConfig.token.slice(0, 6)}...`);\r\n    setTimeout(() => {\r\n      try {\r\n        this.loadBalancer.addBot(botConfig);\r\n        const bot = this.loadBalancer.getBotByToken(botConfig.token);\r\n        if (bot) {\r\n          this.setupMessageHandlers(bot);\r\n          this.logger.log(`Successfully recovered bot with token ${botConfig.token.slice(0, 6)}...`);\r\n        }\r\n      } catch (error) {\r\n        this.logger.warn(`Bot recovery failed, retrying... Token: ${botConfig.token.slice(0, 6)}...`);\r\n        this.queueBotRecovery(botConfig);\r\n      }\r\n    }, this.RETRY_DELAY);\r\n  }\r\n\r\n  private startMessageQueueProcessor() {\r\n    this.logger.log('Starting message queue processor');\r\n    setInterval(() => this.processMessageQueue(), 1000);\r\n  }\r\n\r\n  private async processMessageQueue() {\r\n    if (this.messageQueue.size === 0) return;\r\n    \r\n    this.logger.debug(`Processing message queue. Size: ${this.messageQueue.size}`);\r\n    for (const [messageId, queueItem] of this.messageQueue) {\r\n      try {\r\n        const bot = this.loadBalancer.getNextBot();\r\n        await this.forwardMessage(bot, queueItem.message, queueItem.channelId);\r\n        this.messageQueue.delete(messageId);\r\n        this.logger.debug(`Successfully processed queued message ${messageId}`);\r\n      } catch (error) {\r\n        if (queueItem.retries >= this.MAX_RETRIES) {\r\n          this.messageQueue.delete(messageId);\r\n          this.logger.error(`Failed to forward message ${messageId} after ${this.MAX_RETRIES} retries:`, error.stack);\r\n          this.notifyAdmin(`Failed to forward message after ${this.MAX_RETRIES} retries: ${error.message}`);\r\n        } else {\r\n          queueItem.retries++;\r\n          this.logger.warn(`Retry ${queueItem.retries}/${this.MAX_RETRIES} for message ${messageId}`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private setupMessageHandlers(bot: TelegramBot) {\r\n    bot.on('message', msg => {\r\n      this.handleIncomingMessage(bot, msg)\r\n        .catch(error => this.handleMessageError(error, msg));\r\n    });\r\n\r\n    bot.on('error', error => {\r\n      this.notifyAdmin(`Bot error occurred: ${error.message}`);\r\n    });\r\n  }\r\n\r\n  private async handleMessageError(error: Error, message: TelegramBot.Message) {\r\n    const messageId = `${message.chat.id}-${message.message_id}`;\r\n    if (!this.messageQueue.has(messageId)) {\r\n      this.messageQueue.set(messageId, {\r\n        retries: 0,\r\n        message,\r\n        channelId: this.findChannelForMessage(message)\r\n      });\r\n    }\r\n    await this.notifyAdmin(`Message queued for retry: ${error.message}`);\r\n  }\r\n\r\n  private findChannelForMessage(message: TelegramBot.Message): string {\r\n    const availableChannel = this.config.channels[0];\r\n    return availableChannel?.channelId;\r\n  }\r\n\r\n  private async notifyAdmin(message: string) {\r\n    if (!this.config.adminChatId) return;\r\n    \r\n    try {\r\n      const bot = this.loadBalancer.getNextBot();\r\n      await bot.sendMessage(this.config.adminChatId, message);\r\n    } catch {\r\n      // Silent fail for admin notifications\r\n    }\r\n  }\r\n\r\n  private async handleIncomingMessage(\r\n    bot: TelegramBot,\r\n    message: TelegramBot.Message,\r\n  ) {\r\n    const messageId = `${message.chat.id}-${message.message_id}`;\r\n\r\n    // Only handle messages from private chats\r\n    // if (message.chat.type !== 'private') {\r\n    //   this.logger.debug(`Skipping non-private message ${messageId}`);\r\n    //   return;\r\n    // }\r\n\r\n    // Skip messages containing 'start' (case insensitive)\r\n    if (message.text?.toLowerCase().startsWith('start')) {\r\n      this.logger.debug(`Skipping start command message ${messageId}`);\r\n      return;\r\n    }\r\n\r\n    const botToken = this.loadBalancer.getBotToken(bot);\r\n    const matchingChannel = this.config.channels.find(channel =>\r\n      channel.botTokens.includes(botToken)\r\n    );\r\n\r\n    if (!matchingChannel) {\r\n      this.logger.warn(`No channel configured for bot token: ${botToken.slice(0, 6)}...`);\r\n      await this.notifyAdmin(\r\n        `⚠️ Configuration issue: No channel configured for bot token: ${botToken.slice(0, 6)}...`\r\n      );\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await this.forwardMessageWithRetry(bot, message, matchingChannel.channelId);\r\n      await this.notifyAdmin(`Message forwarded to channel ${matchingChannel.channelId}`);\r\n    } catch (error) {\r\n      this.logger.warn(`Failed to forward message ${messageId}, queueing for retry: ${error.message}`);\r\n      this.messageQueue.set(messageId, {\r\n        retries: 0,\r\n        message,\r\n        channelId: matchingChannel.channelId\r\n      });\r\n      await this.notifyAdmin(`Message queued for retry: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  private async forwardMessageWithRetry(\r\n    bot: TelegramBot,\r\n    message: TelegramBot.Message,\r\n    channelId: string,\r\n    retryCount = 0\r\n  ): Promise<void> {\r\n    const messageId = `${message.chat.id}-${message.message_id}`;\r\n    try {\r\n      await this.forwardMessage(bot, message, channelId);\r\n    } catch (error) {\r\n      if (retryCount < this.MAX_RETRIES) {\r\n        this.logger.debug(`Retry attempt ${retryCount + 1} failed, switching to next bot`);\r\n        await new Promise(resolve => setTimeout(resolve, this.RETRY_DELAY));\r\n        const nextBot = this.loadBalancer.getNextBot();\r\n        return this.forwardMessageWithRetry(nextBot, message, channelId, retryCount + 1);\r\n      }\r\n      this.logger.error(`All retry attempts failed for message ${messageId}`);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async forwardMessage(\r\n    bot: TelegramBot,\r\n    message: TelegramBot.Message,\r\n    channelId: string,\r\n  ): Promise<void> {\r\n    const messageId = `${message.chat.id}-${message.message_id}`;\r\n    try {\r\n      await bot.forwardMessage(\r\n        channelId,\r\n        message.chat.id,\r\n        message.message_id,\r\n      );\r\n      this.logger.debug(`Message ${messageId} forwarded successfully`);\r\n    } catch (error) {\r\n      this.logger.debug(`Forward attempt failed, trying fallback bot for message ${messageId}`);\r\n      const fallbackBot = this.loadBalancer.getNextBot();\r\n      if (fallbackBot === bot) {\r\n        this.logger.error(`No available bots for forwarding message ${messageId}`);\r\n        throw new Error('No available bots for forwarding');\r\n      }\r\n      \r\n      await fallbackBot.forwardMessage(\r\n        channelId,\r\n        message.chat.id,\r\n        message.message_id,\r\n      );\r\n      this.logger.debug(`Message ${messageId} forwarded successfully using fallback bot`);\r\n    }\r\n  }\r\n\r\n  async broadcastMessage(\r\n    messageDto: BroadcastMessageDto,\r\n  ): Promise<BroadcastResponseDto> {\r\n    this.logger.debug('Starting broadcast message operation');\r\n    try {\r\n      const bot = this.loadBalancer.getNextBot();\r\n      const channel = this.config.channels[0];\r\n      \r\n      const result = await this.sendMessageByType(bot, channel.channelId, messageDto);\r\n      this.logger.log(`Successfully broadcasted message with ID: ${result.message_id}`);\r\n\r\n      return {\r\n        success: true,\r\n        messageId: result.message_id.toString(),\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('Failed to broadcast message:', error.stack);\r\n      return {\r\n        success: false,\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n    }\r\n  }\r\n\r\n  private async sendMessageByType(\r\n    bot: TelegramBot,\r\n    channelId: string,\r\n    messageDto: BroadcastMessageDto,\r\n  ): Promise<TelegramBot.Message> {\r\n    this.logger.debug(`Sending ${messageDto.type} message to channel ${channelId}`);\r\n    switch (messageDto.type) {\r\n      case MessageType.PHOTO:\r\n        if (!messageDto.mediaUrl) {\r\n          this.logger.error('Media URL is required for photo messages');\r\n          throw new Error('Media URL is required for photo messages');\r\n        }\r\n        return bot.sendPhoto(channelId, messageDto.mediaUrl, {\r\n          caption: messageDto.message,\r\n        });\r\n\r\n      case MessageType.VIDEO:\r\n        if (!messageDto.mediaUrl) {\r\n          this.logger.error('Media URL is required for video messages');\r\n          throw new Error('Media URL is required for video messages');\r\n        }\r\n        return bot.sendVideo(channelId, messageDto.mediaUrl, {\r\n          caption: messageDto.message,\r\n        });\r\n\r\n      case MessageType.TEXT:\r\n      default:\r\n        return bot.sendMessage(channelId, messageDto.message);\r\n    }\r\n  }\r\n\r\n  async getBotStatus(): Promise<BotStatusResponseDto[]> {\r\n    this.logger.debug('Fetching bot status information');\r\n    const bots = this.loadBalancer.getBots() || [];\r\n    return bots.map((botInfo, index) => {\r\n      const operations = this.loadBalancer.getBotOperationCount(botInfo.bot);\r\n      const maxOps = this.loadBalancer.getBotMaxOperations(botInfo.bot);\r\n      return {\r\n        id: index + 1,\r\n        activeOperations: operations,\r\n        maxOperations: maxOps,\r\n        utilizationPercentage: this.loadBalancer.getBotUtilizationPercentage(\r\n          botInfo.bot,\r\n        ),\r\n      };\r\n    });\r\n  }\r\n\r\n  async getConfiguration(): Promise<ConfigurationResponseDto> {\r\n    this.logger.debug('Fetching Telegram service configuration');\r\n    const firstBot = this.loadBalancer.getBots()?.[0]?.bot;\r\n    return {\r\n      channelConfigured: this.config.channels?.length > 0,\r\n      botsCount: this.config.bots?.length || 0,\r\n      maxOperationsPerBot: firstBot\r\n        ? this.loadBalancer.getBotMaxOperations(firstBot)\r\n        : 0,\r\n    };\r\n  }\r\n}\r\n","module.exports = require(\"@nestjs/config\");","module.exports = require(\"multer\");","import { Module, DynamicModule, Provider } from '@nestjs/common';\r\nimport { FileController } from './file.controller';\r\nimport { FileService } from './file.service';\r\nimport { MulterModule } from '@nestjs/platform-express';\r\nimport { FILE_CONFIG } from './config/file.config';\r\nimport {\r\n  FileModuleOptions,\r\n  FILE_MODULE_OPTIONS,\r\n} from './file.module.interface';\r\n\r\n@Module({})\r\nexport class FileModule {\r\n  /**\r\n   * Register the FileModule with default configuration\r\n   */\r\n  static register(): DynamicModule {\r\n    return {\r\n      module: FileModule,\r\n      imports: [\r\n        MulterModule.register({\r\n          dest: FILE_CONFIG.STORAGE_PATH,\r\n        }),\r\n      ],\r\n      controllers: [FileController],\r\n      providers: [FileService],\r\n      exports: [FileService],\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Register the FileModule with custom configuration\r\n   * @param options Configuration options for the file module\r\n   */\r\n  static forRoot(options: FileModuleOptions = {}): DynamicModule {\r\n    const providers: Provider[] = [\r\n      {\r\n        provide: FILE_MODULE_OPTIONS,\r\n        useValue: {\r\n          storagePath: options.storagePath || FILE_CONFIG.STORAGE_PATH,\r\n          maxFileSize: options.maxFileSize || FILE_CONFIG.MAX_FILE_SIZE,\r\n          allowedFileTypes:\r\n            options.allowedFileTypes || FILE_CONFIG.ALLOWED_FILE_TYPES,\r\n        },\r\n      },\r\n      FileService,\r\n    ];\r\n\r\n    return {\r\n      module: FileModule,\r\n      imports: [\r\n        MulterModule.register({\r\n          dest: options.storagePath || FILE_CONFIG.STORAGE_PATH,\r\n        }),\r\n      ],\r\n      controllers: [FileController],\r\n      providers: providers,\r\n      exports: [FileService],\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Register the FileModule as a global module with custom configuration\r\n   * @param options Configuration options for the file module\r\n   */\r\n  static forRootGlobal(options: FileModuleOptions = {}): DynamicModule {\r\n    const module = this.forRoot(options);\r\n    return {\r\n      ...module,\r\n      global: true,\r\n    };\r\n  }\r\n}\r\n","import { FileOperationError, FileErrorCodes } from './file-operation-error';\r\nimport { FileOperationMonitor } from './file-operation-monitor';\r\n\r\nexport class FileOperationResult<T> {\r\n  constructor(\r\n    public readonly success: boolean,\r\n    public readonly data?: T,\r\n    public readonly error?: FileOperationError,\r\n  ) {}\r\n\r\n  static success<T>(data?: T): FileOperationResult<T> {\r\n    return new FileOperationResult(true, data);\r\n  }\r\n\r\n  static failure<T>(error: FileOperationError): FileOperationResult<T> {\r\n    return new FileOperationResult(false, undefined, error);\r\n  }\r\n}\r\n\r\nasync function withFileOperation<T>(\r\n  operation: string,\r\n  action: () => Promise<T> | T,\r\n  path?: string,\r\n): Promise<FileOperationResult<T>> {\r\n  const startTime = Date.now();\r\n  try {\r\n    const result = await action();\r\n    FileOperationMonitor.recordOperation({\r\n      operation,\r\n      success: true,\r\n      duration: Date.now() - startTime,\r\n      timestamp: startTime,\r\n      path,\r\n    });\r\n    return FileOperationResult.success(result);\r\n  } catch (error) {\r\n    const duration = Date.now() - startTime;\r\n    FileOperationMonitor.recordOperation({\r\n      operation,\r\n      success: false,\r\n      duration,\r\n      timestamp: startTime,\r\n      path,\r\n      error: error.message,\r\n    });\r\n\r\n    if (error instanceof FileOperationError) {\r\n      return FileOperationResult.failure(error);\r\n    }\r\n\r\n    let fileError: FileOperationError;\r\n    if (error.code === 'ENOENT') {\r\n      fileError = new FileOperationError(\r\n        'File or directory not found',\r\n        FileErrorCodes.FILE_NOT_FOUND,\r\n        operation,\r\n      );\r\n    } else if (error.code === 'EACCES') {\r\n      fileError = new FileOperationError(\r\n        'Access denied',\r\n        FileErrorCodes.ACCESS_DENIED,\r\n        operation,\r\n      );\r\n    } else if (error.code === 'EEXIST') {\r\n      fileError = new FileOperationError(\r\n        'File or folder already exists',\r\n        FileErrorCodes.FILE_EXISTS,\r\n        operation,\r\n      );\r\n    } else if (error.code === 'ENOSPC') {\r\n      fileError = new FileOperationError(\r\n        'No space left on storage',\r\n        FileErrorCodes.STORAGE_FULL,\r\n        operation,\r\n      );\r\n    } else {\r\n      fileError = new FileOperationError(\r\n        error.message || 'Unknown error occurred',\r\n        FileErrorCodes.INVALID_OPERATION,\r\n        operation,\r\n        error,\r\n      );\r\n    }\r\n    return FileOperationResult.failure(fileError);\r\n  }\r\n}\r\n\r\nexport { withFileOperation };\r\n","import { join } from 'path';\r\n\r\n// File configuration constants\r\nexport const FILE_CONFIG = {\r\n  MAX_FILE_SIZE: 1024 * 1024 * 100, // 100MB\r\n  MAX_FILES_PER_UPLOAD: 10,\r\n  ALLOWED_FILE_TYPES: ['image/jpeg', 'image/png', 'application/pdf'],\r\n  TEMP_LINK_EXPIRY: 24 * 60 * 60 * 1000, // 24 hours in milliseconds\r\n  STORAGE_PATH: join(process.cwd(), 'uploads'),\r\n  // Add more configuration as needed\r\n};\r\n","import { Controller, Get } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\r\nimport { AppService } from './app.service';\r\n\r\n@ApiTags('Health Check')\r\n@Controller()\r\nexport class AppController {\r\n  constructor(private readonly appService: AppService) {}\r\n  @Get()\r\n  @ApiOperation({ summary: 'Health check endpoint' })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'The service is up and running',\r\n  })\r\n  getHello(): string {\r\n    return this.appService.getHello();\r\n  }\r\n}\r\n","module.exports = require(\"@nestjs/platform-express\");","module.exports = require(\"@nestjs/common\");","// Detailed error types for file operations\r\nexport class FileOperationError extends Error {\r\n  constructor(\r\n    message: string,\r\n    public readonly code: string,\r\n    public readonly operation: string,\r\n    public readonly details?: any,\r\n  ) {\r\n    super(message);\r\n    this.name = 'FileOperationError';\r\n  }\r\n}\r\n\r\nexport const FileErrorCodes = {\r\n  FILE_NOT_FOUND: 'FILE_NOT_FOUND',\r\n  INVALID_PATH: 'INVALID_PATH',\r\n  ACCESS_DENIED: 'ACCESS_DENIED',\r\n  INVALID_OPERATION: 'INVALID_OPERATION',\r\n  STORAGE_FULL: 'STORAGE_FULL',\r\n  FILE_TOO_LARGE: 'FILE_TOO_LARGE',\r\n  INVALID_FILE_TYPE: 'INVALID_FILE_TYPE',\r\n  FOLDER_EXISTS: 'FOLDER_EXISTS',\r\n  FILE_EXISTS: 'FILE_EXISTS',\r\n  FOLDER_NOT_EMPTY: 'FOLDER_NOT_EMPTY',\r\n} as const;\r\n","import { Injectable, Logger } from '@nestjs/common';\r\nimport * as TelegramBot from 'node-telegram-bot-api';\r\nimport { TelegramBotConfig } from '../config/telegram.config';\r\n\r\n@Injectable()\r\nexport class TelegramLoadBalancer {\r\n  private readonly bots: Array<{\r\n    bot: TelegramBot;\r\n    operationCount: number;\r\n    config: TelegramBotConfig;\r\n  }> = [];\r\n  private readonly logger = new Logger(TelegramLoadBalancer.name);\r\n\r\n  getBotOperationCount(bot: TelegramBot): number {\r\n    const botInfo = this.bots.find((b) => b.bot === bot);\r\n    return botInfo?.operationCount || 0;\r\n  }\r\n\r\n  getBotMaxOperations(bot: TelegramBot): number {\r\n    const botInfo = this.bots.find((b) => b.bot === bot);\r\n    return botInfo?.config.maxConcurrentOperations || 0;\r\n  }\r\n\r\n  getBotUtilizationPercentage(bot: TelegramBot): number {\r\n    const maxOps = this.getBotMaxOperations(bot);\r\n    if (!maxOps) return 0;\r\n    return (this.getBotOperationCount(bot) / maxOps) * 100;\r\n  }\r\n\r\n  public addBot(config: TelegramBotConfig): void {\r\n    const bot = new TelegramBot(config.token, { polling: true });\r\n    this.bots.push({\r\n      bot,\r\n      operationCount: 0,\r\n      config,\r\n    });\r\n    this.logger.log(\r\n      `Added new bot to the pool. Total bots: ${this.bots.length}`,\r\n    );\r\n  }\r\n\r\n  public getNextBot(): TelegramBot {\r\n    if (!this.bots.length) {\r\n      throw new Error('No bots available in the pool');\r\n    }\r\n\r\n    // Find bot with least operations\r\n    const selectedBot = this.bots.reduce((prev, curr) => {\r\n      return prev.operationCount <= curr.operationCount ? prev : curr;\r\n    });\r\n\r\n    if (\r\n      selectedBot.operationCount >= selectedBot.config.maxConcurrentOperations\r\n    ) {\r\n      // this.logger.warn('All bots are at maximum capacity');\r\n      // Return least loaded bot anyway as fallback\r\n    }\r\n\r\n    selectedBot.operationCount++;\r\n    return selectedBot.bot;\r\n  }\r\n\r\n  public releaseBot(bot: TelegramBot): void {\r\n    const botInfo = this.bots.find((b) => b.bot === bot);\r\n    if (botInfo) {\r\n      botInfo.operationCount = Math.max(0, botInfo.operationCount - 1);\r\n    }\r\n  }\r\n\r\n  public getAllBots(): TelegramBot[] {\r\n    return this.bots.map((b) => b.bot);\r\n  }\r\n\r\n  public getBotToken(bot: TelegramBot): string | undefined {\r\n    const botInfo = this.bots.find((b) => b.bot === bot);\r\n    return botInfo?.config.token;\r\n  }\r\n\r\n  public getBotByToken(token: string): TelegramBot | undefined {\r\n    for (const botInfo of this.bots) {\r\n      if (botInfo.config.token === token) {\r\n        return botInfo.bot;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  public getBots() {\r\n    return this.bots;\r\n  }\r\n}\r\n","module.exports = require(\"node-telegram-bot-api\");","export interface FileOperationMetrics {\r\n  operation: string;\r\n  success: boolean;\r\n  duration: number;\r\n  timestamp: number;\r\n  path?: string;\r\n  error?: string;\r\n}\r\n\r\nexport class FileOperationMonitor {\r\n  private static metrics: FileOperationMetrics[] = [];\r\n  private static readonly MAX_METRICS = 1000;\r\n\r\n  static recordOperation(metric: FileOperationMetrics): void {\r\n    this.metrics.unshift(metric);\r\n    if (this.metrics.length > this.MAX_METRICS) {\r\n      this.metrics.pop();\r\n    }\r\n  }\r\n\r\n  static getMetrics(limit = 100): FileOperationMetrics[] {\r\n    return this.metrics.slice(0, limit);\r\n  }\r\n\r\n  static getFailureRate(timeWindow = 3600000): number {\r\n    const now = Date.now();\r\n    const recentOperations = this.metrics.filter(\r\n      (m) => now - m.timestamp < timeWindow,\r\n    );\r\n    if (recentOperations.length === 0) return 0;\r\n\r\n    const failures = recentOperations.filter((m) => !m.success).length;\r\n    return failures / recentOperations.length;\r\n  }\r\n\r\n  static clearMetrics(): void {\r\n    this.metrics = [];\r\n  }\r\n}\r\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\r\nimport {\r\n  IsEnum,\r\n  IsString,\r\n  IsUrl,\r\n  IsOptional,\r\n  IsNotEmpty,\r\n} from 'class-validator';\r\n\r\nexport enum MessageType {\r\n  TEXT = 'text',\r\n  PHOTO = 'photo',\r\n  VIDEO = 'video',\r\n}\r\n\r\nexport class BroadcastMessageDto {\r\n  @ApiProperty({\r\n    description: 'Message text or caption for media',\r\n    example: 'Hello everyone! Check out this photo.',\r\n  })\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  message: string;\r\n\r\n  @ApiPropertyOptional({\r\n    enum: MessageType,\r\n    default: MessageType.TEXT,\r\n    description: 'Type of message to broadcast',\r\n  })\r\n  @IsEnum(MessageType)\r\n  @IsOptional()\r\n  type?: MessageType = MessageType.TEXT;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'URL of the media to be sent (required for photo/video types)',\r\n    example: 'https://example.com/image.jpg',\r\n  })\r\n  @IsUrl({ protocols: ['http', 'https'], require_protocol: true })\r\n  @IsOptional()\r\n  mediaUrl?: string;\r\n}\r\n\r\nexport class BotStatusResponseDto {\r\n  @ApiProperty({\r\n    description: 'Unique identifier for the bot',\r\n    example: 1,\r\n  })\r\n  id: number;\r\n\r\n  @ApiProperty({\r\n    description: 'Number of current active operations',\r\n    example: 5,\r\n  })\r\n  activeOperations: number;\r\n\r\n  @ApiProperty({\r\n    description: 'Maximum allowed concurrent operations',\r\n    example: 10,\r\n  })\r\n  maxOperations: number;\r\n\r\n  @ApiProperty({\r\n    description: 'Current utilization percentage',\r\n    example: 50,\r\n  })\r\n  utilizationPercentage: number;\r\n}\r\n\r\nexport class ConfigurationResponseDto {\r\n  @ApiProperty({\r\n    description: 'List of allowed media types',\r\n    example: ['photo', 'video'],\r\n    isArray: true,\r\n  })\r\n  @ApiProperty({\r\n    description: 'Whether the target channel is properly configured',\r\n    example: true,\r\n  })\r\n  channelConfigured: boolean;\r\n\r\n  @ApiProperty({\r\n    description: 'Total number of configured bots',\r\n    example: 3,\r\n  })\r\n  botsCount: number;\r\n\r\n  @ApiProperty({\r\n    description: 'Maximum concurrent operations allowed per bot',\r\n    example: 10,\r\n  })\r\n  maxOperationsPerBot: number;\r\n}\r\n\r\nexport class BroadcastResponseDto {\r\n  @ApiProperty({\r\n    description: 'Whether the broadcast was successful',\r\n    example: true,\r\n  })\r\n  success: boolean;\r\n\r\n  @ApiProperty({\r\n    description: 'Message ID in the channel (if available)',\r\n    example: '12345',\r\n    required: false,\r\n  })\r\n  messageId?: string;\r\n\r\n  @ApiProperty({\r\n    description: 'Timestamp of the broadcast',\r\n    example: '2025-05-01T12:00:00Z',\r\n  })\r\n  timestamp: string;\r\n}\r\n","module.exports = require(\"@nestjs/swagger\");","module.exports = require(\"@nestjs/core\");","import {\r\n  Controller,\r\n  Get,\r\n  Post,\r\n  Put,\r\n  Delete,\r\n  Param,\r\n  Query,\r\n  Body,\r\n  UploadedFiles,\r\n  UseInterceptors,\r\n  Res,\r\n  Logger,\r\n  DefaultValuePipe,\r\n  ParseIntPipe,\r\n  Injectable,\r\n  ParseFilePipe,\r\n  BadRequestException,\r\n  Req,\r\n} from '@nestjs/common';\r\nimport { FilesInterceptor } from '@nestjs/platform-express';\r\nimport { diskStorage } from 'multer';\r\nimport {\r\n  CustomFileValidator,\r\n  FileSizeValidator,\r\n} from './utils/file-validators';\r\nimport { FILE_CONFIG } from './config/file.config';\r\nimport { Response, Request } from 'express';\r\nimport { FileService } from './file.service';\r\nimport {\r\n  ApiTags,\r\n  ApiOperation,\r\n  ApiParam,\r\n  ApiResponse,\r\n  ApiConsumes,\r\n  ApiBody,\r\n  ApiQuery,\r\n} from '@nestjs/swagger';\r\nimport { existsSync, mkdirSync } from 'fs';\r\nimport { join, resolve } from 'path';\r\nimport {\r\n  CreateFolderDto,\r\n  MoveFileDto,\r\n  MoveFolderDto,\r\n  RenameFolderDto,\r\n  CopyFileDto,\r\n  UpdateFileMetadataDto,\r\n} from './dto/requests.dto';\r\nimport {\r\n  FileMetadataResponse,\r\n  FolderResponse,\r\n  FolderDetailsResponse,\r\n  ShareableLinkResponse,\r\n  FileVersionResponse,\r\n  FolderTreeResponse,\r\n  ErrorResponse,\r\n  JsonFileResponse,\r\n  JsonValueResponse,\r\n  FileOperationMetricsResponse,\r\n} from './dto/responses.dto';\r\nimport { JsonPathParams } from './dto/requests.dto';\r\nimport { FileOperationMonitor } from './utils/file-operation-monitor';\r\n\r\nconst MAX_FILE_SIZE = 1024 * 1024 * 100; // 100MB\r\nconst UPLOADS_BASE = join(process.cwd(), 'uploads');\r\n\r\nfunction getSafePath(...segments: string[]): string {\r\n  const filePath = join(...segments);\r\n  const resolvedPath = resolve(filePath);\r\n  const uploadsPath = resolve(UPLOADS_BASE);\r\n  if (!resolvedPath.startsWith(uploadsPath)) {\r\n    throw new Error(`Invalid path detected: ${resolvedPath}`);\r\n  }\r\n  return filePath;\r\n}\r\n@ApiTags('Folders & Files')\r\n@Injectable()\r\n@Controller()\r\nexport class FileController {\r\n  private readonly logger = new Logger(FileController.name);\r\n  private readonly fileService: FileService;\r\n\r\n  constructor(fileService: FileService) {\r\n    if (!fileService) {\r\n      throw new Error('FileService is required');\r\n    }\r\n    this.fileService = fileService;\r\n  }\r\n\r\n  @Post('folders/:folder/files')\r\n  @UseInterceptors(\r\n    FilesInterceptor('files', 10, {\r\n      storage: diskStorage({\r\n        destination: (req, file, cb) => {\r\n          try {\r\n            const folderName = req.params.folder;\r\n            const folderPath = getSafePath(UPLOADS_BASE, folderName);\r\n            if (!existsSync(folderPath)) {\r\n              mkdirSync(folderPath, { recursive: true });\r\n              console.log(`Created folder: ${folderPath}`);\r\n            }\r\n            cb(null, folderPath);\r\n          } catch (error) {\r\n            console.error(`Error setting destination: ${error.message}`);\r\n            cb(error, null);\r\n          }\r\n        },\r\n        filename: (req, file, cb) => {\r\n          try {\r\n            const filenameQuery = req.query.filename as string;\r\n            const { originalname } = file;\r\n            const extension = originalname.substring(\r\n              originalname.lastIndexOf('.'),\r\n            );\r\n\r\n            // Initialize the fileCounter in the request object if not exists\r\n            if (!(req as any).fileCounter) {\r\n              (req as any).fileCounter = 0;\r\n            }\r\n            (req as any).fileCounter++;\r\n\r\n            let finalFilename = originalname;\r\n            if (filenameQuery) {\r\n              const currentCount = (req as any).fileCounter;\r\n              finalFilename = `${filenameQuery}${currentCount}${extension}`;\r\n            }\r\n\r\n            console.log(`Saving file as: ${finalFilename}`);\r\n            cb(null, finalFilename);\r\n          } catch (error) {\r\n            console.error(`Error setting filename: ${error.message}`);\r\n            cb(error, null);\r\n          }\r\n        },\r\n      }),\r\n      limits: { fileSize: MAX_FILE_SIZE },\r\n    }),\r\n  )\r\n  @ApiOperation({\r\n    summary: 'Upload files to a folder',\r\n    description: 'Upload single or multiple files to a specified folder',\r\n  })\r\n  @ApiConsumes('multipart/form-data')\r\n  @ApiBody({\r\n    schema: {\r\n      type: 'object',\r\n      required: ['files'],\r\n      properties: {\r\n        files: {\r\n          type: 'array',\r\n          items: { type: 'string', format: 'binary' },\r\n          description: 'Files to upload',\r\n        },\r\n      },\r\n    },\r\n  })\r\n  @ApiParam({ name: 'folder', description: 'Target folder name' })\r\n  @ApiQuery({\r\n    name: 'filename',\r\n    required: false,\r\n    description: 'Optional custom filename for single file upload',\r\n  })\r\n  async uploadFiles(\r\n    @Param('folder') folder: string,\r\n    @UploadedFiles(\r\n      new ParseFilePipe({\r\n        validators: [\r\n          new CustomFileValidator({\r\n            fileTypes: FILE_CONFIG.ALLOWED_FILE_TYPES,\r\n          }),\r\n          new FileSizeValidator({ maxSize: FILE_CONFIG.MAX_FILE_SIZE }),\r\n        ],\r\n        errorHttpStatusCode: 400,\r\n      }),\r\n    )\r\n    files: Express.Multer.File[],\r\n  ) {\r\n    if (!files?.length) {\r\n      throw new BadRequestException('No files provided');\r\n    }\r\n\r\n    return this.fileService.uploadFiles(folder, files);\r\n  }\r\n\r\n  // =====================================================\r\n\r\n  // Folder Endpoints\r\n  // =====================================================\r\n\r\n  @ApiTags('Folder Management')\r\n  @Get('folders')\r\n  @ApiOperation({ summary: 'List all folders' })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'Folders listed successfully',\r\n    type: FolderResponse,\r\n  })\r\n  @ApiResponse({\r\n    status: 500,\r\n    description: 'Server error while listing folders',\r\n    type: ErrorResponse,\r\n  })\r\n  listFolders(): Promise<FolderResponse> {\r\n    return this.fileService.listFolders();\r\n  }\r\n\r\n  @Get('folders/:folder')\r\n  @ApiOperation({ summary: 'Get folder details and list files' })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'Folder details retrieved successfully',\r\n    type: FolderDetailsResponse,\r\n  })\r\n  @ApiResponse({\r\n    status: 404,\r\n    description: 'Folder not found',\r\n  })\r\n  @ApiParam({ name: 'folder', description: 'Folder name' })\r\n  @ApiQuery({\r\n    name: 'page',\r\n    required: false,\r\n    description: 'Page number for pagination',\r\n  })\r\n  @ApiQuery({\r\n    name: 'limit',\r\n    required: false,\r\n    description: 'Number of files per page',\r\n  })\r\n  getFolderDetails(\r\n    @Param('folder') folder: string,\r\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\r\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\r\n  ): Promise<FolderDetailsResponse> {\r\n    return this.fileService.getFolderDetails(folder, page, limit);\r\n  }\r\n\r\n  @ApiTags('Folder Management')\r\n  @Post('folders')\r\n  @ApiOperation({ summary: 'Create a new folder' })\r\n  @ApiResponse({\r\n    status: 201,\r\n    description: 'Folder created successfully',\r\n  })\r\n  @ApiResponse({\r\n    status: 400,\r\n    description: 'Invalid folder name',\r\n  })\r\n  @ApiBody({\r\n    schema: { type: 'object', properties: { folderName: { type: 'string' } } },\r\n  })\r\n  createFolder(@Body() createFolderDto: CreateFolderDto) {\r\n    return this.fileService.createFolder(createFolderDto.folderName);\r\n  }\r\n\r\n  @ApiTags('Folder Management')\r\n  @Delete('folders/:folder')\r\n  @ApiOperation({ summary: 'Delete a folder and all its contents' })\r\n  @ApiParam({ name: 'folder', description: 'Folder to delete' })\r\n  deleteFolder(@Param('folder') folder: string) {\r\n    return this.fileService.deleteFolder(folder);\r\n  }\r\n\r\n  // =====================================================\r\n\r\n  // File Endpoints (Nested under folders)\r\n  // =====================================================\r\n\r\n  @ApiTags('File Operations')\r\n  @Get('folders/:folder/files/:filename/download')\r\n  @ApiOperation({ summary: 'Download a file from a folder' })\r\n  @ApiParam({ name: 'folder', description: 'Folder name' })\r\n  @ApiParam({ name: 'filename', description: 'File name' })\r\n  downloadFile(\r\n    @Param('folder') folder: string,\r\n    @Param('filename') filename: string,\r\n    @Res() res: Response,\r\n  ) {\r\n    return this.fileService.downloadFile(folder, filename, res);\r\n  }\r\n\r\n  @ApiTags('File Metadata')\r\n  @Get('folders/:folder/files/:filename/metadata')\r\n  @ApiOperation({ summary: 'Get metadata of a file' })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'File metadata retrieved successfully',\r\n    type: FileMetadataResponse,\r\n  })\r\n  @ApiResponse({\r\n    status: 404,\r\n    description: 'File not found',\r\n  })\r\n  @ApiParam({ name: 'folder', description: 'Folder name' })\r\n  @ApiParam({ name: 'filename', description: 'File name' })\r\n  getFileMetadata(\r\n    @Param('folder') folder: string,\r\n    @Param('filename') filename: string,\r\n  ): Promise<FileMetadataResponse> {\r\n    return this.fileService.getFileMetadata(folder, filename);\r\n  }\r\n\r\n  @Put('folders/:folder/files/:filename/move')\r\n  @ApiOperation({ summary: 'Move or rename a file' })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'File moved successfully',\r\n  })\r\n  @ApiResponse({\r\n    status: 400,\r\n    description: 'Invalid destination',\r\n  })\r\n  @ApiResponse({\r\n    status: 404,\r\n    description: 'File not found',\r\n  })\r\n  @ApiParam({ name: 'folder', description: 'Current folder of the file' })\r\n  @ApiParam({ name: 'filename', description: 'Current file name' })\r\n  @ApiBody({\r\n    schema: {\r\n      type: 'object',\r\n      properties: {\r\n        newFolder: { type: 'string' },\r\n        newFilename: { type: 'string' },\r\n      },\r\n    },\r\n  })\r\n  moveFile(\r\n    @Param('folder') folder: string,\r\n    @Param('filename') filename: string,\r\n    @Body() moveFileDto: MoveFileDto,\r\n  ) {\r\n    return this.fileService.moveFile(folder, filename, moveFileDto);\r\n  }\r\n\r\n  @Post('folders/:folder/files/:filename/copy')\r\n  @ApiOperation({ summary: 'Copy a file to another location' })\r\n  @ApiResponse({ status: 201, description: 'File copied successfully' })\r\n  @ApiResponse({ status: 400, description: 'Invalid destination' })\r\n  @ApiResponse({ status: 404, description: 'File not found' })\r\n  @ApiParam({ name: 'folder', description: 'Source folder' })\r\n  @ApiParam({ name: 'filename', description: 'File to copy' })\r\n  @ApiBody({\r\n    schema: { type: 'object', properties: { newFolder: { type: 'string' } } },\r\n  })\r\n  copyFile(\r\n    @Param('folder') folder: string,\r\n    @Param('filename') filename: string,\r\n    @Body() copyFileDto: CopyFileDto,\r\n  ) {\r\n    return this.fileService.copyFile(folder, filename, copyFileDto);\r\n  }\r\n\r\n  @Get('folders/:folder/files/download-all')\r\n  @ApiOperation({ summary: 'Download all files in a folder as a ZIP archive' })\r\n  @ApiParam({ name: 'folder', description: 'Folder name' })\r\n  async downloadAllFiles(\r\n    @Param('folder') folder: string,\r\n    @Res() res: Response,\r\n  ) {\r\n    return this.fileService.downloadAllFiles(folder, res);\r\n  }\r\n\r\n  @Get('folders/:folder/files/temp-links')\r\n  @ApiOperation({\r\n    summary: 'Get temporary access links for all files in a folder',\r\n  })\r\n  @ApiParam({ name: 'folder', description: 'Folder name' })\r\n  getTemporaryLinks(@Param('folder') folder: string) {\r\n    return this.fileService.getTemporaryLinks(folder);\r\n  }\r\n\r\n  @ApiTags('File Sharing')\r\n  @Get('folders/:folder/files/:filename/temp-link')\r\n  @ApiOperation({ summary: 'Generate a temporary access link for a file' })\r\n  @ApiParam({ name: 'folder', description: 'Folder name' })\r\n  @ApiParam({ name: 'filename', description: 'File name' })\r\n  getTemporaryFileLink(\r\n    @Param('folder') folder: string,\r\n    @Param('filename') filename: string,\r\n  ) {\r\n    return this.fileService.getTemporaryFileLink(folder, filename);\r\n  }\r\n\r\n  @ApiTags('Search & Browse')\r\n  @Get('folders/:folder/files/search')\r\n  @ApiOperation({ summary: 'Search for files by name in a folder' })\r\n  @ApiParam({ name: 'folder', description: 'Folder name' })\r\n  @ApiQuery({\r\n    name: 'pattern',\r\n    description: 'Regex pattern for matching filenames',\r\n  })\r\n  searchFiles(\r\n    @Param('folder') folder: string,\r\n    @Query('pattern') pattern: string,\r\n  ) {\r\n    return this.fileService.searchFiles(folder, pattern);\r\n  }\r\n\r\n  // =====================================================\r\n\r\n  // JSON File Endpoints (with dedicated \"json\" prefix)\r\n  // =====================================================\r\n\r\n  @ApiTags('JSON Operations')\r\n  @Get('json/folders/:folder/files/:filename')\r\n  @ApiOperation({\r\n    summary: 'Retrieve the entire JSON file',\r\n    description: 'Returns the complete contents of a JSON file',\r\n  })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'JSON file contents retrieved successfully',\r\n    type: JsonFileResponse,\r\n  })\r\n  @ApiResponse({\r\n    status: 404,\r\n    description: 'JSON file not found',\r\n    type: ErrorResponse,\r\n  })\r\n  @ApiResponse({\r\n    status: 500,\r\n    description: 'Error parsing JSON file',\r\n    type: ErrorResponse,\r\n  })\r\n  getJsonFile(\r\n    @Param('folder') folder: string,\r\n    @Param('filename') filename: string,\r\n  ) {\r\n    return this.fileService.getJsonFile(folder, filename);\r\n  }\r\n\r\n  @ApiTags('JSON Operations')\r\n  @Get('json/folders/:folder/files/:filename/*path')\r\n  @ApiOperation({\r\n    summary: 'Retrieve a nested value from a JSON file by key path',\r\n    description:\r\n      'Returns a specific value from a JSON file using a path with / as separator',\r\n  })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'JSON value retrieved successfully',\r\n    type: JsonValueResponse,\r\n  })\r\n  @ApiResponse({\r\n    status: 400,\r\n    description: 'Invalid path or key not found',\r\n    type: ErrorResponse,\r\n  })\r\n  @ApiResponse({\r\n    status: 404,\r\n    description: 'JSON file not found',\r\n    type: ErrorResponse,\r\n  })\r\n  @ApiParam({\r\n    name: 'path',\r\n    description: 'Path to the nested value (e.g., user/profile/name)',\r\n    type: String,\r\n  })\r\n  getNestedJsonValue(\r\n    @Param('folder') folder: string,\r\n    @Param('filename') filename: string,\r\n    @Param() pathParams: JsonPathParams,\r\n  ) {\r\n    return this.fileService.getNestedJsonValue(folder, filename, pathParams);\r\n  }\r\n\r\n  @ApiTags('JSON Operations')\r\n  @Get('json/folders/:folder/files/:filename/query')\r\n  @ApiOperation({\r\n    summary: 'Query a JSON file using dot notation',\r\n    description:\r\n      'Query JSON data using dot notation and array indices. Example: users[0].profile.name',\r\n  })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'JSON value retrieved successfully',\r\n    type: JsonValueResponse,\r\n  })\r\n  @ApiResponse({\r\n    status: 400,\r\n    description: 'Invalid query format or path not found',\r\n    type: ErrorResponse,\r\n  })\r\n  @ApiResponse({\r\n    status: 404,\r\n    description: 'JSON file not found',\r\n    type: ErrorResponse,\r\n  })\r\n  @ApiQuery({\r\n    name: 'query',\r\n    description:\r\n      'JSON path query using dot notation (e.g., users[0].profile.name)',\r\n    required: true,\r\n    type: String,\r\n  })\r\n  queryJsonFile(\r\n    @Param('folder') folder: string,\r\n    @Param('filename') filename: string,\r\n    @Query('query') query: string,\r\n  ) {\r\n    return this.fileService.queryJsonFile(folder, filename, query);\r\n  }\r\n\r\n  // =====================================================\r\n\r\n  // Additional File Endpoints\r\n  // =====================================================\r\n\r\n  @ApiTags('File Operations')\r\n  @Delete('folders/:folder/files/:filename')\r\n  @ApiOperation({ summary: 'Delete a file from a folder' })\r\n  @ApiParam({ name: 'folder', description: 'Folder name' })\r\n  @ApiParam({ name: 'filename', description: 'File name' })\r\n  deleteFile(\r\n    @Param('folder') folder: string,\r\n    @Param('filename') filename: string,\r\n  ) {\r\n    return this.fileService.deleteFile(folder, filename);\r\n  }\r\n\r\n  @ApiTags('File Metadata')\r\n  @Put('folders/:folder/files/:filename/metadata')\r\n  @ApiOperation({ summary: 'Update file metadata' })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'File metadata updated successfully',\r\n  })\r\n  @ApiResponse({ status: 400, description: 'Invalid metadata' })\r\n  @ApiResponse({ status: 404, description: 'File not found' })\r\n  @ApiParam({ name: 'folder', description: 'Folder name' })\r\n  @ApiParam({ name: 'filename', description: 'File name' })\r\n  @ApiBody({\r\n    schema: {\r\n      type: 'object',\r\n      properties: {\r\n        newFilename: { type: 'string', description: 'New filename' },\r\n        newFolder: { type: 'string', description: 'New folder' },\r\n      },\r\n    },\r\n  })\r\n  updateFileMetadata(\r\n    @Param('folder') folder: string,\r\n    @Param('filename') filename: string,\r\n    @Body() updateFileMetadataDto: UpdateFileMetadataDto,\r\n  ) {\r\n    return this.fileService.updateFileMetadata(\r\n      folder,\r\n      filename,\r\n      updateFileMetadataDto,\r\n    );\r\n  }\r\n\r\n  @Get('folders/:folder/size')\r\n  @ApiOperation({ summary: 'Get the total size of a folder' })\r\n  @ApiParam({ name: 'folder', description: 'Folder name' })\r\n  getFolderSize(@Param('folder') folder: string) {\r\n    return this.fileService.getFolderSize(folder);\r\n  }\r\n\r\n  @Get('folders/:folder/files')\r\n  @ApiOperation({ summary: 'List all files in a folder' })\r\n  @ApiParam({ name: 'folder', description: 'Folder name' })\r\n  listFiles(@Param('folder') folder: string) {\r\n    return this.fileService.listFiles(folder);\r\n  }\r\n\r\n  @Get('folders/:folder/files/:filename/thumbnail')\r\n  @ApiOperation({ summary: 'Get a thumbnail of an image or video file' })\r\n  @ApiParam({ name: 'folder', description: 'Folder name' })\r\n  @ApiParam({ name: 'filename', description: 'File name' })\r\n  getThumbnail(\r\n    @Param('folder') folder: string,\r\n    @Param('filename') filename: string,\r\n    @Res() res: Response,\r\n  ) {\r\n    return this.fileService.getThumbnail(folder, filename, res);\r\n  }\r\n\r\n  // =====================================================\r\n\r\n  // File Retrieval Endpoint (Catch-all for file serving)\r\n  // =====================================================\r\n\r\n  @ApiTags('File Operations')\r\n  @Get('folders/:folder/files/:filename')\r\n  @ApiOperation({ summary: 'Retrieve a file from a folder' })\r\n  @ApiParam({ name: 'folder', description: 'Folder name' })\r\n  @ApiParam({ name: 'filename', description: 'File name' })\r\n  getFile(\r\n    @Param('folder') folder: string,\r\n    @Param('filename') filename: string,\r\n    @Res() res: Response,\r\n  ) {\r\n    return this.fileService.getFile(folder, filename, res);\r\n  }\r\n\r\n  // =====================================================\r\n\r\n  // Additional Folder Endpoints\r\n  // =====================================================\r\n\r\n  @ApiTags('Folder Management')\r\n  @Put('folders/:folder/rename')\r\n  @ApiOperation({ summary: 'Rename a folder' })\r\n  @ApiResponse({ status: 200, description: 'Folder renamed successfully' })\r\n  @ApiResponse({ status: 400, description: 'Invalid folder name' })\r\n  @ApiResponse({ status: 404, description: 'Folder not found' })\r\n  @ApiParam({ name: 'folder', description: 'Current folder name' })\r\n  @ApiBody({\r\n    schema: {\r\n      type: 'object',\r\n      properties: { newFolderName: { type: 'string' } },\r\n    },\r\n  })\r\n  renameFolder(\r\n    @Param('folder') folder: string,\r\n    @Body() renameFolderDto: RenameFolderDto,\r\n  ) {\r\n    return this.fileService.renameFolder(folder, renameFolderDto.newFolderName);\r\n  }\r\n\r\n  @ApiTags('Folder Management')\r\n  @Put('folders/:folder/move')\r\n  @ApiOperation({ summary: 'Move a folder to a different location' })\r\n  @ApiResponse({ status: 200, description: 'Folder moved successfully' })\r\n  @ApiResponse({ status: 400, description: 'Invalid destination' })\r\n  @ApiResponse({ status: 404, description: 'Folder not found' })\r\n  @ApiParam({ name: 'folder', description: 'Current folder name' })\r\n  @ApiBody({\r\n    schema: { type: 'object', properties: { newLocation: { type: 'string' } } },\r\n  })\r\n  moveFolder(\r\n    @Param('folder') folder: string,\r\n    @Body() moveFolderDto: MoveFolderDto,\r\n  ) {\r\n    return this.fileService.moveFolder(folder, moveFolderDto.newLocation);\r\n  }\r\n\r\n  @Get('folders/:folder/files/:filename/preview')\r\n  @ApiOperation({ summary: 'Get a preview of a file' })\r\n  @ApiParam({ name: 'folder', description: 'Folder name' })\r\n  @ApiParam({ name: 'filename', description: 'File name' })\r\n  getFilePreview(\r\n    @Param('folder') folder: string,\r\n    @Param('filename') filename: string,\r\n    @Req() req: Request,\r\n    @Res() res: Response,\r\n  ) {\r\n    return this.fileService.getFilePreview(folder, filename, req, res);\r\n  }\r\n\r\n  @ApiTags('Search & Browse')\r\n  @Get('folders/tree')\r\n  @ApiOperation({\r\n    summary: 'Get a hierarchical tree structure of folders and files',\r\n  })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'Folder tree retrieved successfully',\r\n    type: FolderTreeResponse,\r\n  })\r\n  getFolderTree(): Promise<FolderTreeResponse> {\r\n    return this.fileService.getFolderTree();\r\n  }\r\n\r\n  @ApiTags('File Sharing')\r\n  @Post('folders/:folder/files/:filename/share')\r\n  @ApiOperation({ summary: 'Generate a shareable link for a file' })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'Shareable link generated',\r\n    type: ShareableLinkResponse,\r\n  })\r\n  @ApiResponse({\r\n    status: 404,\r\n    description: 'File not found',\r\n  })\r\n  @ApiParam({ name: 'folder', description: 'Folder name' })\r\n  @ApiParam({ name: 'filename', description: 'File name' })\r\n  generateShareableLink(\r\n    @Param('folder') folder: string,\r\n    @Param('filename') filename: string,\r\n  ): Promise<ShareableLinkResponse> {\r\n    return this.fileService.generateShareableLink(folder, filename);\r\n  }\r\n\r\n  @ApiTags('File Locking')\r\n  @Put('folders/:folder/files/:filename/lock')\r\n  @ApiOperation({ summary: 'Lock a file for editing' })\r\n  @ApiParam({ name: 'folder', description: 'Folder name' })\r\n  @ApiParam({ name: 'filename', description: 'File name' })\r\n  @ApiResponse({\r\n    status: 400,\r\n    description: 'File is already locked',\r\n    type: ErrorResponse,\r\n  })\r\n  @ApiResponse({\r\n    status: 404,\r\n    description: 'File not found',\r\n    type: ErrorResponse,\r\n  })\r\n  @ApiResponse({\r\n    status: 500,\r\n    description: 'Error locking file',\r\n    type: ErrorResponse,\r\n  })\r\n  lockFile(\r\n    @Param('folder') folder: string,\r\n    @Param('filename') filename: string,\r\n  ) {\r\n    return this.fileService.lockFile(folder, filename);\r\n  }\r\n\r\n  @ApiTags('File Locking')\r\n  @Put('folders/:folder/files/:filename/unlock')\r\n  @ApiOperation({ summary: 'Unlock a file for editing' })\r\n  @ApiParam({ name: 'folder', description: 'Folder name' })\r\n  @ApiParam({ name: 'filename', description: 'File name' })\r\n  unlockFile(\r\n    @Param('folder') folder: string,\r\n    @Param('filename') filename: string,\r\n  ) {\r\n    return this.fileService.unlockFile(folder, filename);\r\n  }\r\n\r\n  @ApiTags('Search & Browse')\r\n  @Get('files/recent')\r\n  @ApiOperation({ summary: 'Get a list of recently modified files' })\r\n  getRecentFiles() {\r\n    return this.fileService.getRecentFiles();\r\n  }\r\n\r\n  @ApiTags('File Versions')\r\n  @Get('folders/:folder/files/:filename/versions')\r\n  @ApiOperation({ summary: 'Get different versions of a file' })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'File versions retrieved successfully',\r\n    type: FileVersionResponse,\r\n  })\r\n  @ApiResponse({\r\n    status: 404,\r\n    description: 'File not found',\r\n  })\r\n  @ApiParam({ name: 'folder', description: 'Folder name' })\r\n  @ApiParam({ name: 'filename', description: 'File name' })\r\n  getFileVersions(\r\n    @Param('folder') folder: string,\r\n    @Param('filename') filename: string,\r\n  ): Promise<FileVersionResponse> {\r\n    return this.fileService.getFileVersions(folder, filename);\r\n  }\r\n\r\n  @Get('metrics/file-operations')\r\n  @ApiOperation({\r\n    summary: 'Get file operation metrics',\r\n    description:\r\n      'Retrieve metrics about recent file operations including success rate and performance data',\r\n  })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'File operation metrics retrieved successfully',\r\n    type: FileOperationMetricsResponse,\r\n  })\r\n  @ApiQuery({\r\n    name: 'timeWindow',\r\n    required: false,\r\n    description: 'Time window in milliseconds for failure rate calculation',\r\n    type: Number,\r\n    example: 3600000,\r\n  })\r\n  @ApiQuery({\r\n    name: 'limit',\r\n    required: false,\r\n    description: 'Maximum number of metrics to return',\r\n    type: Number,\r\n    example: 100,\r\n  })\r\n  getFileOperationMetrics(\r\n    @Query('timeWindow', new DefaultValuePipe(3600000), ParseIntPipe)\r\n    timeWindow: number,\r\n    @Query('limit', new DefaultValuePipe(100), ParseIntPipe) limit: number,\r\n  ): FileOperationMetricsResponse {\r\n    const metrics = FileOperationMonitor.getMetrics(limit);\r\n    const failureRate = FileOperationMonitor.getFailureRate(timeWindow);\r\n\r\n    return {\r\n      metrics,\r\n      failureRate,\r\n      timeWindow,\r\n      totalOperations: metrics.length,\r\n    };\r\n  }\r\n}\r\n","module.exports = require(\"dotenv\");","module.exports = require(\"fs\");","module.exports = require(\"mime-types\");","import { Module } from '@nestjs/common';\r\nimport { ConfigModule } from '@nestjs/config';\r\nimport { TelegramService } from './telegram.service';\r\nimport { TelegramLoadBalancer } from './telegram.load-balancer';\r\n\r\n@Module({\r\n  imports: [ConfigModule],\r\n  providers: [TelegramService, TelegramLoadBalancer],\r\n  exports: [TelegramService],\r\n})\r\nexport class TelegramModule {}\r\n","import { Injectable } from '@nestjs/common';\r\n\r\n@Injectable()\r\nexport class AppService {\r\n  getHello(): string {\r\n    return 'Hello World!';\r\n  }\r\n}\r\n","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// eslint-disable-next-line @typescript-eslint/no-require-imports\r\nrequire('dotenv').config();\r\nimport { NestFactory } from '@nestjs/core';\r\nimport { AppModule } from './app.module';\r\nimport { setupSwagger } from './config/swagger.config';\r\nimport { ValidationPipe } from '@nestjs/common';\r\nimport { CorsOptions } from '@nestjs/common/interfaces/external/cors-options.interface';\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule, {\r\n    logger: ['error', 'warn', 'log', 'debug', 'verbose'],\r\n  });\r\n\r\n  // Setup Swagger documentation\r\n  setupSwagger(app);\r\n\r\n  // Enable validation pipe globally\r\n  app.useGlobalPipes(\r\n    new ValidationPipe({\r\n      whitelist: true,\r\n      transform: true,\r\n      forbidNonWhitelisted: true,\r\n      transformOptions: {\r\n        enableImplicitConversion: true,\r\n      },\r\n    }),\r\n  );\r\n\r\n  // Enable CORS for all origins\r\n  const corsOptions: CorsOptions = {\r\n    origin: '*',\r\n    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS',\r\n    allowedHeaders: 'Content-Type, Accept, Authorization',\r\n    credentials: true,\r\n  };\r\n  app.enableCors(corsOptions);\r\n\r\n  await app.listen(8000);\r\n}\r\n\r\n// Add process event handlers\r\nprocess.on('unhandledRejection', (reason, promise) => {\r\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\r\n  // Application specific logging, throwing an error, or other logic here\r\n});\r\n\r\nprocess.on('uncaughtException', (error) => {\r\n  console.error('Uncaught Exception:', error);\r\n  // Application specific logging, throwing an error, or other logic here\r\n});\r\n\r\nprocess.on('SIGTERM', async () => {\r\n  console.log('Received SIGTERM signal. Starting graceful shutdown...');\r\n  // Add your cleanup logic here if needed\r\n  process.exit(0);\r\n});\r\n\r\nprocess.on('SIGINT', async () => {\r\n  console.log('Received SIGINT signal. Starting graceful shutdown...');\r\n  // Add your cleanup logic here if needed\r\n  process.exit(0);\r\n});\r\n\r\nbootstrap();\r\n"],"names":["app","console","log","config","DocumentBuilder","setTitle","setDescription","setVersion","build","document","SwaggerModule","createDocument","fs","writeFileSync","JSON","stringify","setup","swaggerOptions","persistAuthorization","docExpansion","filter","showRequestDuration","syntaxHighlight","theme","tryItOutEnabled","displayRequestDuration","customSiteTitle","customCss","customfavIcon","VIEW_CONFIG","IMAGE_TYPES","PDF_TYPES","TEXT_TYPES","AUDIO_TYPES","VIDEO_TYPES","PREVIEW_SIZE_LIMIT","THUMBNAIL_OPTIONS","width","height","quality","format","fit","background","r","g","b","alpha","DEFAULT_THUMBNAILS","video","audio","VIDEO_PREVIEW","thumbnailTime","AUDIO_PREVIEW","duration","metadata","waveform","VIDEO_THUMBNAIL","timePosition","frameCount","THUMBNAIL_STYLES","startColor","endColor","text","color","fontFamily","fontSize","title","playButton","size","module","exports","require","CreateFolderDto","ApiProperty","example","description","IsString","IsNotEmpty","MoveFileDto","IsOptional","MoveFolderDto","RenameFolderDto","CopyFileDto","UpdateFileMetadataDto","JsonFileResponse","name","age","nested","key","JsonValueResponse","JsonPathParams","isArray","each","JsonQuery","AppModule","Module","imports","ConfigModule","forRoot","isGlobal","load","FileModule","register","TelegramModule","controllers","AppController","providers","AppService","FileService","constructor","options","logger","Logger","this","storagePath","FILE_CONFIG","STORAGE_PATH","maxFileSize","MAX_FILE_SIZE","allowedFileTypes","ALLOWED_FILE_TYPES","getSafePath","segments","filePath","join","resolvedPath","resolve","uploadsPath","startsWith","Error","validateFileType","file","includes","mimetype","validateFileSize","listFolders","result","withFileOperation","async","existsSync","mkdirSync","recursive","folders","readdirSync","withFileTypes","dirent","isDirectory","map","success","error","message","InternalServerErrorException","data","getFolderDetails","folder","page","limit","folderPath","NotFoundException","files","startIndex","endIndex","slice","totalFiles","length","createFolder","folderName","FileOperationError","FileErrorCodes","FOLDER_EXISTS","code","BadRequestException","deleteFolder","FILE_NOT_FOUND","FOLDER_NOT_EMPTY","fileCount","rmdirSync","getDestination","req","cb","params","getFilename","extension","originalname","substring","lastIndexOf","baseFilename","query","filename","finalFilename","_fileCounter","uploadFiles","downloadFile","res","download","getFileMetadata","stats","statSync","createdAt","birthtime","modifiedAt","mtime","moveFile","body","oldPath","newFolder","newFilename","newFolderPath","newPath","renameSync","copyFile","copyFileSync","downloadAllFiles","warn","archive","archiver","zlib","level","attachment","pipe","forEach","finalize","getTemporaryLinks","fileLinks","url","process","env","serviceUrl","getTemporaryFileLink","searchFiles","pattern","regex","RegExp","matchingFiles","test","getJsonFile","fileContent","readFileSync","content","parse","getNestedJsonValue","pathParams","keys","split","JsonPathValidator","validate","undefined","value","JsonPathValidationError","queryJsonFile","validateJsonQuery","jsonData","segment","arrayMatch","match","index","parseInt","deleteFile","rmSync","updateFileMetadata","getFolderSize","getSize","dirPath","reduce","total","listFiles","getFile","sendFile","renameFolder","newFolderName","oldFolderPath","moveFolder","newLocation","getFilePreview","mimeType","lookup","isPreviewSupported","thumbnail","setHeader","send","range","headers","parts","replace","start","end","chunkSize","stream","createReadStream","writeHead","preview","Math","min","getThumbnail","getFolderTree","buildTree","item","pop","children","push","generateShareableLink","shareableLink","lockFile","lockFilePath","unlockFile","getRecentFiles","getRecentFilesFromDir","recentFiles","concat","sort","a","getFileVersions","versionFiles","version","versions","onModuleInit","thumbnailsPath","Injectable","Optional","Inject","FILE_MODULE_OPTIONS","super","path","Array","validKeyRegex","registerAs","maxOps","TELEGRAM_BOT_MAX_OPERATIONS","adminChatId","TELEGRAM_ADMIN_CHAT_ID","channelConfigs","channelConfigVars","Object","configVar","channelConfig","channelId","botTokensStr","trim","botTokens","token","Boolean","parseChannelConfigs","channel","botCount","uniqueBotTokens","Set","botChannelMapping","Map","add","channels","get","set","bots","from","maxConcurrentOperations","botsCount","channelsCount","botMappings","entries","botToken","hasAdminChatId","maxOpsPerBot","CustomFileValidator","FileValidator","isValid","validationOptions","fileTypes","buildErrorMessage","FileSizeValidator","maxSize","FileMetadataResponse","Date","FolderResponse","FolderDetailsResponse","ShareableLinkResponse","FileVersionResponse","FolderTreeResponse","ErrorResponse","FileOperationMetricDto","required","FileOperationMetricsResponse","type","TelegramService","configService","loadBalancer","MAX_RETRIES","RETRY_DELAY","messageQueue","initializeBots","startMessageQueueProcessor","debug","initPromises","botConfig","addBot","bot","getBotByToken","setupMessageHandlers","botInfo","getMe","username","stack","queueBotRecovery","Promise","allSettled","setTimeout","setInterval","processMessageQueue","messageId","queueItem","getNextBot","forwardMessage","delete","retries","notifyAdmin","on","msg","handleIncomingMessage","catch","handleMessageError","chat","id","message_id","has","findChannelForMessage","availableChannel","sendMessage","toLowerCase","getBotToken","matchingChannel","find","forwardMessageWithRetry","retryCount","nextBot","fallbackBot","broadcastMessage","messageDto","sendMessageByType","toString","timestamp","toISOString","MessageType","PHOTO","mediaUrl","sendPhoto","caption","VIDEO","sendVideo","TEXT","getBotStatus","getBots","activeOperations","getBotOperationCount","maxOperations","getBotMaxOperations","utilizationPercentage","getBotUtilizationPercentage","getConfiguration","firstBot","channelConfigured","maxOperationsPerBot","ConfigService","TelegramLoadBalancer","MulterModule","dest","FileController","provide","useValue","forRootGlobal","global","operation","action","startTime","now","FileOperationMonitor","recordOperation","FileOperationResult","failure","fileError","ACCESS_DENIED","FILE_EXISTS","STORAGE_FULL","INVALID_OPERATION","MAX_FILES_PER_UPLOAD","TEMP_LINK_EXPIRY","cwd","appService","getHello","Get","ApiOperation","summary","ApiResponse","status","ApiTags","Controller","details","INVALID_PATH","FILE_TOO_LARGE","INVALID_FILE_TYPE","operationCount","TelegramBot","polling","selectedBot","prev","curr","releaseBot","max","getAllBots","metric","metrics","unshift","MAX_METRICS","getMetrics","getFailureRate","timeWindow","recentOperations","m","clearMetrics","BroadcastMessageDto","ApiPropertyOptional","enum","default","IsEnum","IsUrl","protocols","require_protocol","BotStatusResponseDto","ConfigurationResponseDto","BroadcastResponseDto","UPLOADS_BASE","fileService","createFolderDto","moveFileDto","copyFileDto","updateFileMetadataDto","renameFolderDto","moveFolderDto","getFileOperationMetrics","failureRate","totalOperations","Post","UseInterceptors","FilesInterceptor","storage","diskStorage","destination","filenameQuery","fileCounter","limits","fileSize","ApiConsumes","ApiBody","schema","properties","items","ApiParam","ApiQuery","Param","UploadedFiles","ParseFilePipe","validators","errorHttpStatusCode","Query","DefaultValuePipe","ParseIntPipe","Body","Delete","Res","Put","String","Req","Number","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","reason","promise","exit","NestFactory","create","setupSwagger","useGlobalPipes","ValidationPipe","whitelist","transform","forbidNonWhitelisted","transformOptions","enableImplicitConversion","enableCors","origin","methods","allowedHeaders","credentials","listen","bootstrap"],"sourceRoot":""}