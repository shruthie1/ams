(()=>{"use strict";var e={35:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupSwagger=function(e){console.log("Setting up Swagger documentation...");const t=(new o.DocumentBuilder).setTitle("File Storage API").setDescription("API for managing files and folders in the Asset Management System").setVersion("1.0").build(),r=o.SwaggerModule.createDocument(e,t);console.log("Generated Swagger document"),i.writeFileSync("./swagger-spec.json",JSON.stringify(r,null,2)),o.SwaggerModule.setup("api-docs",e,r,{swaggerOptions:{persistAuthorization:!0,docExpansion:"none",filter:!0,showRequestDuration:!0,syntaxHighlight:{theme:"monokai"},tryItOutEnabled:!0,displayRequestDuration:!0},customSiteTitle:"File Storage API Documentation",customCss:"\n            .swagger-ui .topbar { display: none }\n            .swagger-ui .info { margin: 20px 0 }\n            .swagger-ui .info .title { color: #2c3e50 }\n            .swagger-ui .info__contact { padding: 1rem 0 }\n            .swagger-ui .markdown p { margin: 1em 0 }\n            .swagger-ui .btn.execute { background-color: #2c3e50 }\n            .swagger-ui .btn.execute:hover { background-color: #34495e }\n        ",customfavIcon:"https://nestjs.com/favicon.ico"})};const o=r(742),i=r(896)},140:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.VIEW_CONFIG=void 0,t.VIEW_CONFIG={IMAGE_TYPES:["image/jpeg","image/png","image/gif","image/webp","image/svg+xml","image/bmp"],PDF_TYPES:["application/pdf"],TEXT_TYPES:["text/plain","text/html","text/css","text/javascript","application/json","application/xml"],AUDIO_TYPES:["audio/mpeg","audio/wav","audio/ogg","audio/mp3","audio/aac","audio/webm"],VIDEO_TYPES:["video/mp4","video/mpeg","video/webm","video/quicktime","video/x-msvideo","video/x-matroska"],PREVIEW_SIZE_LIMIT:104857600,THUMBNAIL_OPTIONS:{width:320,height:240,quality:85,format:"jpeg",fit:"contain",background:{r:245,g:245,b:245,alpha:1}},DEFAULT_THUMBNAILS:{video:"assets/video-thumbnail.png",audio:"assets/audio-thumbnail.png"},VIDEO_PREVIEW:{thumbnailTime:"00:00:01",width:320,height:240},AUDIO_PREVIEW:{duration:!0,metadata:!0,waveform:!0},VIDEO_THUMBNAIL:{timePosition:"00:00:01",frameCount:1},THUMBNAIL_STYLES:{background:{startColor:"#1a73e8",endColor:"#174ea6"},text:{color:"#ffffff",fontFamily:"Arial",fontSize:{title:12,format:11}},playButton:{size:40,color:"#1a73e8",background:"#ffffff"}}}},172:e=>{e.exports=require("archiver")},173:function(e,t,r){var o=this&&this.__decorate||function(e,t,r,o){var i,n=arguments.length,s=n<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(n<3?i(s):n>3?i(t,r,s):i(t,r))||s);return n>3&&s&&Object.defineProperty(t,r,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0}),t.JsonQuery=t.JsonPathParams=t.JsonValueResponse=t.JsonFileResponse=t.UpdateFileMetadataDto=t.CopyFileDto=t.RenameFolderDto=t.MoveFolderDto=t.MoveFileDto=t.CreateFolderDto=void 0;const n=r(742),s=r(403);class a{}t.CreateFolderDto=a,o([(0,n.ApiProperty)({example:"documents",description:"Name of the folder to create"}),(0,s.IsString)(),(0,s.IsNotEmpty)(),i("design:type",String)],a.prototype,"folderName",void 0);class l{}t.MoveFileDto=l,o([(0,n.ApiProperty)({example:"destination",description:"New folder path for the file"}),(0,s.IsString)(),(0,s.IsOptional)(),i("design:type",String)],l.prototype,"newFolder",void 0),o([(0,n.ApiProperty)({example:"newname.pdf",description:"New name for the file"}),(0,s.IsString)(),(0,s.IsOptional)(),i("design:type",String)],l.prototype,"newFilename",void 0);class d{}t.MoveFolderDto=d,o([(0,n.ApiProperty)({example:"new-location",description:"New location path for the folder"}),(0,s.IsString)(),(0,s.IsNotEmpty)(),i("design:type",String)],d.prototype,"newLocation",void 0);class p{}t.RenameFolderDto=p,o([(0,n.ApiProperty)({example:"new-folder-name",description:"New name for the folder"}),(0,s.IsString)(),(0,s.IsNotEmpty)(),i("design:type",String)],p.prototype,"newFolderName",void 0);class c{}t.CopyFileDto=c,o([(0,n.ApiProperty)({example:"destination",description:"Destination folder for the file copy"}),(0,s.IsString)(),(0,s.IsNotEmpty)(),i("design:type",String)],c.prototype,"newFolder",void 0);class f{}t.UpdateFileMetadataDto=f,o([(0,n.ApiProperty)({example:"newname.pdf",description:"New name for the file"}),(0,s.IsString)(),(0,s.IsOptional)(),i("design:type",String)],f.prototype,"newFilename",void 0),o([(0,n.ApiProperty)({example:"new-folder",description:"New folder for the file"}),(0,s.IsString)(),(0,s.IsOptional)(),i("design:type",String)],f.prototype,"newFolder",void 0);class g{}t.JsonFileResponse=g,o([(0,n.ApiProperty)({example:{name:"example",age:30,nested:{key:"value"}},description:"JSON file content"}),i("design:type",Object)],g.prototype,"content",void 0);class u{}t.JsonValueResponse=u,o([(0,n.ApiProperty)({example:"value",description:"Value at the specified path in the JSON file"}),i("design:type",Object)],u.prototype,"value",void 0);class m{}t.JsonPathParams=m,o([(0,n.ApiProperty)({example:["user","profile","name"],description:"Path segments to the nested value",isArray:!0}),(0,s.IsString)({each:!0}),(0,s.IsNotEmpty)({each:!0}),i("design:type",Array)],m.prototype,"path",void 0);class h{}t.JsonQuery=h,o([(0,n.ApiProperty)({example:"data.users[0].name",description:"JSON path query using dot notation"}),(0,s.IsString)(),(0,s.IsNotEmpty)(),i("design:type",String)],h.prototype,"query",void 0)},205:function(e,t,r){var o=this&&this.__decorate||function(e,t,r,o){var i,n=arguments.length,s=n<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(n<3?i(s):n>3?i(t,r,s):i(t,r))||s);return n>3&&s&&Object.defineProperty(t,r,s),s};Object.defineProperty(t,"__esModule",{value:!0}),t.AppModule=void 0;const i=r(563),n=r(428),s=r(509),a=r(918),l=r(464),d=r(905),p=r(286);let c=class{};t.AppModule=c,t.AppModule=c=o([(0,i.Module)({imports:[n.ConfigModule.forRoot({isGlobal:!0,load:[p.default]}),l.FileModule.register(),d.TelegramModule],controllers:[s.AppController],providers:[a.AppService]})],c)},209:function(e,t,r){var o,i=this&&this.__decorate||function(e,t,r,o){var i,n=arguments.length,s=n<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(n<3?i(s):n>3?i(t,r,s):i(t,r))||s);return n>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},s=this&&this.__param||function(e,t){return function(r,o){t(r,o,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.FileService=void 0;const a=r(563),l=r(928),d=r(896),p=r(172),c=r(481),f=r(140),g=r(896),u=r(904),m=r(212),h=r(573),y=r(468),F=r(249);let S=o=class{constructor(e){this.options=e,this.logger=new a.Logger(o.name),this.config={storagePath:e?.storagePath||c.FILE_CONFIG.STORAGE_PATH,maxFileSize:e?.maxFileSize||c.FILE_CONFIG.MAX_FILE_SIZE,allowedFileTypes:e?.allowedFileTypes||c.FILE_CONFIG.ALLOWED_FILE_TYPES},this.logger.log(`FileService initialized with storage path: ${this.config.storagePath}`)}getSafePath(...e){const t=(0,l.join)(...e),r=(0,l.resolve)(t),o=(0,l.resolve)(this.config.storagePath);if(!r.startsWith(o))throw new Error(`Invalid path detected: ${r}`);return t}validateFileType(e){return this.config.allowedFileTypes.includes(e.mimetype)}validateFileSize(e){return e.size<=this.config.maxFileSize}async listFolders(){const e=await(0,y.withFileOperation)("listFolders",(async()=>(d.existsSync(this.config.storagePath)||d.mkdirSync(this.config.storagePath,{recursive:!0}),{folders:d.readdirSync(this.config.storagePath,{withFileTypes:!0}).filter((e=>e.isDirectory())).map((e=>e.name))})));if(!e.success)throw this.logger.error(`Failed to list folders: ${e.error.message}`),new a.InternalServerErrorException("Failed to list folders");return e.data}async getFolderDetails(e,t=1,r=10){const o=this.getSafePath(this.config.storagePath,e);if(!d.existsSync(o))throw this.logger.error(`Folder not found: ${e}`),new a.NotFoundException("Folder not found");const i=d.readdirSync(o),n=(t-1)*r,s=t*r;return{folder:e,files:i.slice(n,s),totalFiles:i.length,page:t,limit:r}}async createFolder(e){const t=await(0,y.withFileOperation)("createFolder",(async()=>{const t=this.getSafePath(this.config.storagePath,e);if(d.existsSync(t))throw new h.FileOperationError("Folder already exists",h.FileErrorCodes.FOLDER_EXISTS,"createFolder",{folderName:e});return d.mkdirSync(t,{recursive:!0}),{message:"Folder created successfully",folder:e}}));if(!t.success){if(t.error.code===h.FileErrorCodes.FOLDER_EXISTS)throw new a.BadRequestException(t.error.message);throw this.logger.error(`Failed to create folder: ${t.error.message}`),new a.InternalServerErrorException("Failed to create folder")}return t.data}async deleteFolder(e){const t=await(0,y.withFileOperation)("deleteFolder",(async()=>{const t=this.getSafePath(this.config.storagePath,e);if(!d.existsSync(t))throw new h.FileOperationError("Folder not found",h.FileErrorCodes.FILE_NOT_FOUND,"deleteFolder",{folder:e});const r=d.readdirSync(t);if(r.length>0)throw new h.FileOperationError("Cannot delete non-empty folder",h.FileErrorCodes.FOLDER_NOT_EMPTY,"deleteFolder",{folder:e,fileCount:r.length});return d.rmdirSync(t),{message:"Folder deleted successfully"}}));if(!t.success){if(t.error.code===h.FileErrorCodes.FILE_NOT_FOUND)throw new a.NotFoundException(t.error.message);if(t.error.code===h.FileErrorCodes.FOLDER_NOT_EMPTY)throw new a.BadRequestException(t.error.message);throw this.logger.error(`Failed to delete folder: ${t.error.message}`),new a.InternalServerErrorException("Failed to delete folder")}return t.data}getDestination(e,t,r){try{const t=this.getSafePath(this.config.storagePath,e.params.folder);d.existsSync(t)||d.mkdirSync(t,{recursive:!0}),r(null,t)}catch(e){r(e,null)}}getFilename(e,t,r){try{const o=t.originalname.substring(t.originalname.lastIndexOf(".")),i=e.query.filename||"uploaded_file";let n;1===e.files.length?n=`${i}${o}`:(e._fileCounter||(e._fileCounter=0),e._fileCounter++,n=`${i}${e._fileCounter}${o}`),r(null,n)}catch(e){r(e,null)}}uploadFiles(e,t){if(!t||0===t.length)throw this.logger.error(`No files provided for folder ${e}`),new a.BadRequestException("File upload failed: No files provided");return{message:"Files uploaded successfully",files:t.map((t=>{if(!this.validateFileType(t))throw this.logger.error(`Invalid file type: ${t.mimetype} for ${t.originalname}`),new a.BadRequestException(`Invalid file type for ${t.originalname}`);if(!this.validateFileSize(t))throw this.logger.error(`File size exceeds limit: ${t.size} bytes`),new a.BadRequestException(`File size exceeds limit for ${t.originalname}`);return this.logger.log(`File uploaded: ${t.filename} to folder: ${e}`),{filename:t.filename}}))}}downloadFile(e,t,r){const o=this.getSafePath(this.config.storagePath,e,t);if(!d.existsSync(o))throw this.logger.error(`File not found: ${t} in folder: ${e}`),new a.NotFoundException("File not found");return r.download(o)}async getFileMetadata(e,t){const r=this.getSafePath(this.config.storagePath,e,t);if(!d.existsSync(r))throw this.logger.error(`File not found: ${t} in folder: ${e}`),new a.NotFoundException("File not found");try{const e=d.statSync(r);return{filename:t,size:e.size,createdAt:e.birthtime,modifiedAt:e.mtime}}catch(e){throw this.logger.error(`Error retrieving metadata for ${t}: ${e.message}`),new a.InternalServerErrorException("Error retrieving file metadata")}}moveFile(e,t,r){const o=this.getSafePath(this.config.storagePath,e,t),i=r.newFolder||e,n=r.newFilename||t,s=this.getSafePath(this.config.storagePath,i);if(!d.existsSync(s))try{d.mkdirSync(s,{recursive:!0}),this.logger.log(`Created destination folder: ${i}`)}catch(e){throw this.logger.error(`Error creating folder ${i}: ${e.message}`),new a.InternalServerErrorException("Failed to create destination folder")}const l=this.getSafePath(s,n);if(d.existsSync(l))throw this.logger.error(`File already exists at destination: ${l}`),new a.BadRequestException("File already exists at destination");try{return d.renameSync(o,l),this.logger.log(`File moved from ${o} to ${l}`),{message:"File moved/renamed successfully",newPath:l}}catch(e){throw this.logger.error(`Error moving file: ${e.message}`),new a.InternalServerErrorException("Error moving file")}}copyFile(e,t,r){const o=this.getSafePath(this.config.storagePath,e,t),i=r.newFolder||e,n=this.getSafePath(this.config.storagePath,i);if(!d.existsSync(o))throw this.logger.error(`File not found: ${t} in folder: ${e}`),new a.NotFoundException("File not found");if(!d.existsSync(n))try{d.mkdirSync(n,{recursive:!0}),this.logger.log(`Created destination folder: ${i}`)}catch(e){throw this.logger.error(`Error creating folder ${i}: ${e.message}`),new a.InternalServerErrorException("Failed to create destination folder")}const s=this.getSafePath(n,t);try{return d.copyFileSync(o,s),this.logger.log(`File copied from ${o} to ${s}`),{message:"File copied successfully",newPath:s}}catch(e){throw this.logger.error(`Error copying file: ${e.message}`),new a.InternalServerErrorException("Error copying file")}}async downloadAllFiles(e,t){const r=this.getSafePath(this.config.storagePath,e);if(!d.existsSync(r))throw this.logger.error(`Folder not found: ${e}`),new a.NotFoundException("Folder not found");const o=d.readdirSync(r);if(0===o.length)throw this.logger.warn(`No files found in folder: ${e}`),new a.BadRequestException("No files available in this folder");const i=p("zip",{zlib:{level:9}});t.attachment(`${e}.zip`),i.pipe(t),o.forEach((e=>{try{const t=this.getSafePath(r,e);i.file(t,{name:e})}catch(t){this.logger.error(`Error adding file ${e} to ZIP: ${t.message}`)}}));try{await i.finalize(),this.logger.log(`ZIP archive generated for folder: ${e}`)}catch(e){throw this.logger.error(`Error finalizing ZIP: ${e.message}`),new a.InternalServerErrorException("Error generating ZIP archive")}}getTemporaryLinks(e){const t=this.getSafePath(this.config.storagePath,e);if(!d.existsSync(t))throw this.logger.error(`Folder not found: ${e}`),new a.NotFoundException("Folder not found");const r=d.readdirSync(t);if(0===r.length)throw this.logger.warn(`No files found in folder: ${e}`),new a.BadRequestException("No files available in this folder");const o=r.map((t=>({filename:t,url:`${process.env.serviceUrl}/folders/${e}/files/${t}?temp=true`})));return{folder:e,fileLinks:o}}getTemporaryFileLink(e,t){return{url:`${process.env.serviceUrl}/folders/${e}/files/${t}?temp=true`}}searchFiles(e,t){const r=this.getSafePath(this.config.storagePath,e);if(!d.existsSync(r))throw this.logger.error(`Folder not found: ${e}`),new a.NotFoundException("Folder not found");let o;try{o=new RegExp(t,"i")}catch(e){throw console.log("error",e),this.logger.error(`Invalid regex: ${t}`),new a.BadRequestException("Invalid regular expression")}return{folder:e,pattern:t,matchingFiles:d.readdirSync(r).filter((e=>o.test(e)))}}async getJsonFile(e,t){const r=this.getSafePath(this.config.storagePath,e,`${t}.json`);if(!d.existsSync(r))throw this.logger.error(`JSON file not found: ${t}.json in folder ${e}`),new a.NotFoundException("JSON file not found");try{const e=d.readFileSync(r,"utf-8");return{content:JSON.parse(e)}}catch(e){throw this.logger.error(`Error parsing JSON file ${t}.json: ${e.message}`),new a.InternalServerErrorException("Error parsing JSON file")}}async getNestedJsonValue(e,t,r){const o=(r.path[0]||"").split("/").filter((e=>""!==e));try{m.JsonPathValidator.validate(o);const r=this.getSafePath(this.config.storagePath,e,`${t}.json`);if(!d.existsSync(r))throw this.logger.error(`JSON file not found: ${t}.json in folder ${e}`),new a.NotFoundException("JSON file not found");const i=d.readFileSync(r,"utf-8");let n=JSON.parse(i);for(const e of o){if(void 0===n[e])throw this.logger.error(`Key '${e}' not found in ${t}.json`),new a.BadRequestException(`Key '${e}' not found`);n=n[e]}return{value:n}}catch(e){if(e instanceof m.JsonPathValidationError)throw new a.BadRequestException(e.message);if(e instanceof a.BadRequestException)throw e;throw this.logger.error(`Error processing JSON file ${t}.json: ${e.message}`),new a.InternalServerErrorException("Error processing JSON file")}}async queryJsonFile(e,t,r){try{m.JsonPathValidator.validateJsonQuery(r);const o=this.getSafePath(this.config.storagePath,e,`${t}.json`);if(!d.existsSync(o))throw this.logger.error(`JSON file not found: ${t}.json in folder ${e}`),new a.NotFoundException("JSON file not found");const i=d.readFileSync(o,"utf-8"),n=JSON.parse(i),s=r.split(".");let l=n;for(const e of s){const t=e.match(/^(\w+)\[(\d+)\]$/);if(t){const[,e,r]=t;l=l[e]?.[parseInt(r,10)]}else l=l[e];if(void 0===l)throw new a.BadRequestException(`Path '${r}' not found in JSON`)}return{value:l}}catch(e){if(e instanceof m.JsonPathValidationError||e instanceof a.BadRequestException)throw new a.BadRequestException(e.message);throw this.logger.error(`Error querying JSON file ${t}.json: ${e.message}`),new a.InternalServerErrorException("Error processing JSON file")}}deleteFile(e,t){const r=this.getSafePath(this.config.storagePath,e,t);if(!d.existsSync(r))throw this.logger.error(`File not found: ${t} in folder: ${e}`),new a.NotFoundException("File not found");try{return d.rmSync(r),this.logger.log(`File deleted successfully: ${t} from folder: ${e}`),{message:"File deleted successfully"}}catch(e){throw this.logger.error(`Error deleting file ${t}: ${e.message}`),new a.InternalServerErrorException("Error deleting file")}}updateFileMetadata(e,t,r){const o=this.getSafePath(this.config.storagePath,e,t),i=r.newFolder||e,n=r.newFilename||t,s=this.getSafePath(this.config.storagePath,i);if(!d.existsSync(s))try{d.mkdirSync(s,{recursive:!0}),this.logger.log(`Created destination folder: ${i}`)}catch(e){throw this.logger.error(`Error creating folder ${i}: ${e.message}`),new a.InternalServerErrorException("Failed to create destination folder")}const l=this.getSafePath(s,n);if(d.existsSync(l))throw this.logger.error(`File already exists at destination: ${l}`),new a.BadRequestException("File already exists at destination");try{return d.renameSync(o,l),this.logger.log(`File metadata updated from ${o} to ${l}`),{message:"File metadata updated successfully",newPath:l}}catch(e){throw this.logger.error(`Error updating file metadata: ${e.message}`),new a.InternalServerErrorException("Error updating file metadata")}}getFolderSize(e){const t=this.getSafePath(this.config.storagePath,e);if(!d.existsSync(t))throw this.logger.error(`Folder not found: ${e}`),new a.NotFoundException("Folder not found");const r=e=>d.readdirSync(e).reduce(((t,o)=>{const i=this.getSafePath(e,o),n=d.statSync(i);return t+(n.isDirectory()?r(i):n.size)}),0);return{folder:e,size:r(t)}}listFiles(e){const t=this.getSafePath(this.config.storagePath,e);if(!d.existsSync(t))throw this.logger.error(`Folder not found: ${e}`),new a.NotFoundException("Folder not found");return{folder:e,files:d.readdirSync(t)}}getFile(e,t,r){const o=this.getSafePath(this.config.storagePath,e,t);if(!d.existsSync(o))throw this.logger.error(`File not found: ${t} in folder: ${e}`),new a.NotFoundException("File not found");return r.sendFile(o)}renameFolder(e,t){const r=this.getSafePath(this.config.storagePath,e),o=this.getSafePath(this.config.storagePath,t);if(!d.existsSync(r))throw this.logger.error(`Folder not found: ${e}`),new a.NotFoundException("Folder not found");if(d.existsSync(o))throw this.logger.error(`Folder already exists: ${t}`),new a.BadRequestException("Folder already exists");try{return d.renameSync(r,o),this.logger.log(`Folder renamed from ${e} to ${t}`),{message:"Folder renamed successfully",newFolderName:t}}catch(t){throw this.logger.error(`Error renaming folder ${e}: ${t.message}`),new a.InternalServerErrorException("Error renaming folder")}}moveFolder(e,t){const r=this.getSafePath(this.config.storagePath,e),o=this.getSafePath(this.config.storagePath,t,e);if(!d.existsSync(r))throw this.logger.error(`Folder not found: ${e}`),new a.NotFoundException("Folder not found");if(d.existsSync(o))throw this.logger.error(`Folder already exists at destination: ${o}`),new a.BadRequestException("Folder already exists at destination");try{return d.renameSync(r,o),this.logger.log(`Folder moved from ${r} to ${o}`),{message:"Folder moved successfully",newFolderPath:o}}catch(t){throw this.logger.error(`Error moving folder ${e}: ${t.message}`),new a.InternalServerErrorException("Error moving folder")}}async getFilePreview(e,t,r,o){const i=this.getSafePath(this.config.storagePath,e,t);if(!d.existsSync(i))throw this.logger.error(`File not found: ${t} in folder: ${e}`),new a.NotFoundException("File not found");const n=d.statSync(i),s=(0,u.lookup)(i)||"application/octet-stream";if(n.size>f.VIEW_CONFIG.PREVIEW_SIZE_LIMIT&&!this.isPreviewSupported(s))throw new a.BadRequestException("Preview not available for this file type or size");try{if(f.VIEW_CONFIG.IMAGE_TYPES.includes(s)){const e=d.readFileSync(i);return o.setHeader("Content-Type",s),o.send(e)}if(f.VIEW_CONFIG.VIDEO_TYPES.includes(s)||f.VIEW_CONFIG.AUDIO_TYPES.includes(s)){const e=r.headers.range;if(e){const t=e.replace(/bytes=/,"").split("-"),r=parseInt(t[0],10),a=t[1]?parseInt(t[1],10):n.size-1,l=a-r+1,p=d.createReadStream(i,{start:r,end:a}),c={"Content-Range":`bytes ${r}-${a}/${n.size}`,"Accept-Ranges":"bytes","Content-Length":l,"Content-Type":s};return o.writeHead(206,c),p.pipe(o)}{const e={"Content-Length":n.size,"Content-Type":s,"Accept-Ranges":"bytes"};return o.writeHead(200,e),d.createReadStream(i).pipe(o)}}if(f.VIEW_CONFIG.TEXT_TYPES.includes(s)){const e=d.readFileSync(i,"utf-8");return{preview:e.substring(0,1e3)+(e.length>1e3?"...":""),mimeType:s}}if(f.VIEW_CONFIG.PDF_TYPES.includes(s))return o.setHeader("Content-Type",s),o.setHeader("Content-Range",`bytes 0-${Math.min(n.size,f.VIEW_CONFIG.PREVIEW_SIZE_LIMIT)}`),(0,g.createReadStream)(i,{start:0,end:f.VIEW_CONFIG.PREVIEW_SIZE_LIMIT-1}).pipe(o);throw new a.BadRequestException("Preview not available for this file type")}catch(e){throw this.logger.error(`Error generating preview for ${t}: ${e.message}`),new a.InternalServerErrorException("Error generating file preview")}}async getThumbnail(e,t,r){const o=this.getSafePath(this.config.storagePath,e,t);if(!d.existsSync(o))throw this.logger.error(`File not found: ${t} in folder: ${e}`),new a.NotFoundException("File not found");const i=(0,u.lookup)(o)||"application/octet-stream";try{if(f.VIEW_CONFIG.IMAGE_TYPES.includes(i)){const e=d.readFileSync(o);return r.setHeader("Content-Type","image/jpeg"),r.send(e)}if(f.VIEW_CONFIG.VIDEO_TYPES.includes(i))return r.setHeader("Content-Type","image/jpeg"),r.send(void 0);throw new a.BadRequestException("Thumbnail not available for this file type")}catch(e){throw this.logger.error(`Error generating thumbnail for ${t}: ${e.message}`),new a.InternalServerErrorException("Error generating thumbnail")}}isPreviewSupported(e){return[...f.VIEW_CONFIG.IMAGE_TYPES,...f.VIEW_CONFIG.PDF_TYPES,...f.VIEW_CONFIG.TEXT_TYPES,...f.VIEW_CONFIG.AUDIO_TYPES,...f.VIEW_CONFIG.VIDEO_TYPES].includes(e)}async getFolderTree(){const e=t=>{const r={name:t.split("/").pop(),children:[]},o=d.readdirSync(t,{withFileTypes:!0});for(const i of o)i.isDirectory()?r.children.push(e((0,l.join)(t,i.name))):r.children.push({name:i.name});return r};return e(this.config.storagePath)}async generateShareableLink(e,t){const r=this.getSafePath(this.config.storagePath,e,t);if(!d.existsSync(r))throw this.logger.error(`File not found: ${t} in folder: ${e}`),new a.NotFoundException("File not found");return{shareableLink:`${process.env.serviceUrl}/folders/${e}/files/${t}?share=true`}}lockFile(e,t){const r=this.getSafePath(this.config.storagePath,e,t);if(!d.existsSync(r))throw this.logger.error(`File not found: ${t} in folder: ${e}`),new a.NotFoundException("File not found");const o=`${r}.lock`;if(d.existsSync(o))throw this.logger.error(`File is already locked: ${t}`),new a.BadRequestException("File is already locked");try{return d.writeFileSync(o,""),this.logger.log(`File locked successfully: ${t}`),{message:"File locked successfully"}}catch(e){throw this.logger.error(`Error locking file ${t}: ${e.message}`),new a.InternalServerErrorException("Error locking file")}}unlockFile(e,t){const r=this.getSafePath(this.config.storagePath,e,t);if(!d.existsSync(r))throw this.logger.error(`File not found: ${t} in folder: ${e}`),new a.NotFoundException("File not found");const o=`${r}.lock`;if(!d.existsSync(o))throw this.logger.error(`File is not locked: ${t}`),new a.BadRequestException("File is not locked");try{return d.rmSync(o),this.logger.log(`File unlocked successfully: ${t}`),{message:"File unlocked successfully"}}catch(e){throw this.logger.error(`Error unlocking file ${t}: ${e.message}`),new a.InternalServerErrorException("Error unlocking file")}}getRecentFiles(){const e=t=>{const r=d.readdirSync(t,{withFileTypes:!0});let o=[];for(const i of r){const r=(0,l.join)(t,i.name);if(i.isDirectory())o=o.concat(e(r));else{const e=d.statSync(r);o.push({name:i.name,modifiedAt:e.mtime})}}return o},t=e(this.config.storagePath);return t.sort(((e,t)=>t.modifiedAt-e.modifiedAt)),t.slice(0,10)}async getFileVersions(e,t){const r=this.getSafePath(this.config.storagePath,e,t);if(!d.existsSync(r))throw this.logger.error(`File not found: ${t} in folder: ${e}`),new a.NotFoundException("File not found");const o=d.readdirSync(this.config.storagePath).filter((e=>e.startsWith(`${t}.v`))).map((e=>({version:e.split(".v")[1],filename:e})));return{filename:t,versions:o}}onModuleInit(){const e=this.getSafePath(this.config.storagePath,".thumbnails");d.existsSync(e)||d.mkdirSync(e,{recursive:!0})}};t.FileService=S,t.FileService=S=o=i([(0,a.Injectable)(),s(0,(0,a.Optional)()),s(0,(0,a.Inject)(F.FILE_MODULE_OPTIONS)),n("design:paramtypes",[Object])],S)},212:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.JsonPathValidator=t.JsonPathValidationError=void 0;class r extends Error{constructor(e){super(e),this.name="JsonPathValidationError"}}t.JsonPathValidationError=r,t.JsonPathValidator=class{static validate(e){if(!Array.isArray(e)||0===e.length)throw new r("Path must be a non-empty array");const t=/^[a-zA-Z_$][a-zA-Z0-9_$]*$/;for(const o of e)if(!t.test(o))throw new r(`Invalid path segment: ${o}`);return!0}static validateJsonQuery(e){if(!/^[\w.[\]]+$/.test(e))throw new r("Invalid JSON query format");return!0}}},249:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FILE_MODULE_OPTIONS=void 0,t.FILE_MODULE_OPTIONS="FILE_MODULE_OPTIONS"},286:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const o=r(428);t.default=(0,o.registerAs)("telegram",(()=>{const e=parseInt(process.env.TELEGRAM_BOT_MAX_OPERATIONS||"10"),t=process.env.TELEGRAM_ADMIN_CHAT_ID,r=function(){const e=[],t=Object.keys(process.env).filter((e=>e.startsWith("TELEGRAM_CHANNEL_CONFIG_")));for(const r of t){const t=process.env[r];if(!t)continue;const[o,i,n]=t.split("::");o&&n?e.push({channelId:o.trim(),description:i?.trim(),botTokens:n.split(",").map((e=>e.trim())).filter(Boolean)}):console.warn(`Invalid channel configuration format in ${r}`)}return e}();r.length?console.log("Parsed channel configurations:",r.map((e=>({channelId:e.channelId,description:e.description||"no description",botCount:e.botTokens.length})))):console.warn("No Telegram channel configurations found!");const o=new Set,i=new Map;r.forEach((e=>{e.botTokens.forEach((t=>{o.add(t);const r=i.get(t)||[];r.push(e.channelId),i.set(t,r)}))})),o.size||console.warn("No Telegram bot tokens found in channel configurations!");const n={bots:Array.from(o).map((t=>({token:t.trim(),maxConcurrentOperations:e}))),channels:r,adminChatId:t};return console.log("Loaded Telegram configuration:",{botsCount:n.bots.length,channelsCount:n.channels.length,botMappings:Array.from(i.entries()).map((([e,t])=>({botToken:`${e.slice(0,6)}...`,channels:t}))),hasAdminChatId:!!n.adminChatId,maxOpsPerBot:e}),n}))},300:function(e,t,r){var o=this&&this.__decorate||function(e,t,r,o){var i,n=arguments.length,s=n<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(n<3?i(s):n>3?i(t,r,s):i(t,r))||s);return n>3&&s&&Object.defineProperty(t,r,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0}),t.FileSizeValidator=t.CustomFileValidator=void 0;const n=r(563),s=r(563);let a=class extends s.FileValidator{constructor(e){super(e)}isValid(e){return!!e&&this.validationOptions.fileTypes.includes(e.mimetype)}buildErrorMessage(){return`File type must be one of: ${this.validationOptions.fileTypes.join(", ")}`}};t.CustomFileValidator=a,t.CustomFileValidator=a=o([(0,n.Injectable)(),i("design:paramtypes",[Object])],a);let l=class extends s.FileValidator{constructor(e){super(e)}isValid(e){return!!e&&e.size<=this.validationOptions.maxSize}buildErrorMessage(){return`File size must not exceed ${this.validationOptions.maxSize/1048576}MB`}};t.FileSizeValidator=l,t.FileSizeValidator=l=o([(0,n.Injectable)(),i("design:paramtypes",[Object])],l)},321:function(e,t,r){var o=this&&this.__decorate||function(e,t,r,o){var i,n=arguments.length,s=n<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(n<3?i(s):n>3?i(t,r,s):i(t,r))||s);return n>3&&s&&Object.defineProperty(t,r,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0}),t.FileOperationMetricsResponse=t.FileOperationMetricDto=t.JsonValueResponse=t.JsonFileResponse=t.ErrorResponse=t.FolderTreeResponse=t.FileVersionResponse=t.ShareableLinkResponse=t.FolderDetailsResponse=t.FolderResponse=t.FileMetadataResponse=void 0;const n=r(742);class s{}t.FileMetadataResponse=s,o([(0,n.ApiProperty)({example:"document.pdf",description:"Name of the file"}),i("design:type",String)],s.prototype,"filename",void 0),o([(0,n.ApiProperty)({example:1024,description:"Size of file in bytes"}),i("design:type",Number)],s.prototype,"size",void 0),o([(0,n.ApiProperty)({example:"2024-02-20T10:00:00.000Z",description:"Creation timestamp"}),i("design:type",Date)],s.prototype,"createdAt",void 0),o([(0,n.ApiProperty)({example:"2024-02-20T11:30:00.000Z",description:"Last modification timestamp"}),i("design:type",Date)],s.prototype,"modifiedAt",void 0);class a{}t.FolderResponse=a,o([(0,n.ApiProperty)({example:["folder1","folder2"],description:"List of folder names"}),i("design:type",Array)],a.prototype,"folders",void 0);class l{}t.FolderDetailsResponse=l,o([(0,n.ApiProperty)({example:"documents",description:"Name of the folder"}),i("design:type",String)],l.prototype,"folder",void 0),o([(0,n.ApiProperty)({example:["file1.pdf","file2.jpg"],description:"List of files in the folder"}),i("design:type",Array)],l.prototype,"files",void 0),o([(0,n.ApiProperty)({example:100,description:"Total number of files in folder"}),i("design:type",Number)],l.prototype,"totalFiles",void 0),o([(0,n.ApiProperty)({example:1,description:"Current page number"}),i("design:type",Number)],l.prototype,"page",void 0),o([(0,n.ApiProperty)({example:10,description:"Number of items per page"}),i("design:type",Number)],l.prototype,"limit",void 0);class d{}t.ShareableLinkResponse=d,o([(0,n.ApiProperty)({example:"https://promoteClients2.glitch.me/folders/docs/files/example.pdf?share=true",description:"Generated shareable link for the file"}),i("design:type",String)],d.prototype,"shareableLink",void 0);class p{}t.FileVersionResponse=p,o([(0,n.ApiProperty)({example:"document.pdf",description:"Name of the original file"}),i("design:type",String)],p.prototype,"filename",void 0),o([(0,n.ApiProperty)({example:[{version:"1",filename:"document.pdf.v1"},{version:"2",filename:"document.pdf.v2"}],description:"List of available versions"}),i("design:type",Array)],p.prototype,"versions",void 0);class c{}t.FolderTreeResponse=c,o([(0,n.ApiProperty)({example:"root",description:"Name of the current node"}),i("design:type",String)],c.prototype,"name",void 0),o([(0,n.ApiProperty)({example:[{name:"folder1",children:[]},{name:"file1.pdf"}],description:"Child nodes (folders and files)"}),i("design:type",Array)],c.prototype,"children",void 0);class f{}t.ErrorResponse=f,o([(0,n.ApiProperty)({example:400,description:"HTTP status code"}),i("design:type",Number)],f.prototype,"statusCode",void 0),o([(0,n.ApiProperty)({example:"File not found",description:"Error message"}),i("design:type",String)],f.prototype,"message",void 0),o([(0,n.ApiProperty)({example:"Bad Request",description:"Error type"}),i("design:type",String)],f.prototype,"error",void 0);class g{}t.JsonFileResponse=g,o([(0,n.ApiProperty)({example:{key:"value"},description:"JSON file content"}),i("design:type",Object)],g.prototype,"content",void 0);class u{}t.JsonValueResponse=u,o([(0,n.ApiProperty)({example:"value",description:"Value at the specified path in the JSON file"}),i("design:type",Object)],u.prototype,"value",void 0);class m{}t.FileOperationMetricDto=m,o([(0,n.ApiProperty)({example:"createFolder",description:"Name of the file operation"}),i("design:type",String)],m.prototype,"operation",void 0),o([(0,n.ApiProperty)({example:!0,description:"Whether the operation succeeded"}),i("design:type",Boolean)],m.prototype,"success",void 0),o([(0,n.ApiProperty)({example:123,description:"Duration of operation in milliseconds"}),i("design:type",Number)],m.prototype,"duration",void 0),o([(0,n.ApiProperty)({example:1645564789123,description:"Timestamp of the operation"}),i("design:type",Number)],m.prototype,"timestamp",void 0),o([(0,n.ApiProperty)({example:"/uploads/docs",required:!1,description:"Path involved in the operation"}),i("design:type",String)],m.prototype,"path",void 0),o([(0,n.ApiProperty)({required:!1,description:"Error message if operation failed"}),i("design:type",String)],m.prototype,"error",void 0);class h{}t.FileOperationMetricsResponse=h,o([(0,n.ApiProperty)({type:[m],description:"Recent file operation metrics"}),i("design:type",Array)],h.prototype,"metrics",void 0),o([(0,n.ApiProperty)({example:.05,description:"Rate of failed operations in the time window"}),i("design:type",Number)],h.prototype,"failureRate",void 0),o([(0,n.ApiProperty)({example:36e5,description:"Time window in milliseconds"}),i("design:type",Number)],h.prototype,"timeWindow",void 0),o([(0,n.ApiProperty)({example:100,description:"Total number of operations recorded"}),i("design:type",Number)],h.prototype,"totalOperations",void 0)},403:e=>{e.exports=require("class-validator")},410:function(e,t,r){var o,i=this&&this.__decorate||function(e,t,r,o){var i,n=arguments.length,s=n<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(n<3?i(s):n>3?i(t,r,s):i(t,r))||s);return n>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0}),t.TelegramService=void 0;const s=r(563),a=r(428),l=r(576),d=r(730);let p=o=class{constructor(e,t){this.configService=e,this.loadBalancer=t,this.logger=new s.Logger(o.name),this.MAX_RETRIES=3,this.RETRY_DELAY=1e3,this.messageQueue=new Map,this.config=this.configService.get("telegram")}async onModuleInit(){this.logger.log("Initializing Telegram service..."),await this.initializeBots(),this.startMessageQueueProcessor(),this.logger.log("Telegram service initialized successfully")}async initializeBots(){if(!this.config?.bots?.length)return void this.logger.warn("No bots configured in telegram config");this.logger.debug(`Initializing ${this.config.bots.length} bots...`);const e=this.config.bots.map((async e=>{try{this.loadBalancer.addBot(e);const t=this.loadBalancer.getBotByToken(e.token);if(t){this.setupMessageHandlers(t);const e=await t.getMe();this.logger.log(`Bot @${e.username} initialized successfully`)}}catch(t){this.logger.error(`Failed to initialize bot with token ${e.token.slice(0,6)}...`,t.stack),this.queueBotRecovery(e)}}));await Promise.allSettled(e)}queueBotRecovery(e){this.logger.debug(`Queuing recovery for bot with token ${e.token.slice(0,6)}...`),setTimeout((()=>{try{this.loadBalancer.addBot(e);const t=this.loadBalancer.getBotByToken(e.token);t&&(this.setupMessageHandlers(t),this.logger.log(`Successfully recovered bot with token ${e.token.slice(0,6)}...`))}catch(t){this.logger.warn(`Bot recovery failed, retrying... Token: ${e.token.slice(0,6)}...`),this.queueBotRecovery(e)}}),this.RETRY_DELAY)}startMessageQueueProcessor(){this.logger.log("Starting message queue processor"),setInterval((()=>this.processMessageQueue()),1e3)}async processMessageQueue(){if(0!==this.messageQueue.size){this.logger.debug(`Processing message queue. Size: ${this.messageQueue.size}`);for(const[e,t]of this.messageQueue)try{const r=this.loadBalancer.getNextBot();await this.forwardMessage(r,t.message,t.channelId),this.messageQueue.delete(e),this.logger.debug(`Successfully processed queued message ${e}`)}catch(r){t.retries>=this.MAX_RETRIES?(this.messageQueue.delete(e),this.logger.error(`Failed to forward message ${e} after ${this.MAX_RETRIES} retries:`,r.stack),this.notifyAdmin(`Failed to forward message after ${this.MAX_RETRIES} retries: ${r.message}`)):(t.retries++,this.logger.warn(`Retry ${t.retries}/${this.MAX_RETRIES} for message ${e}`))}}}setupMessageHandlers(e){e.on("message",(t=>{this.handleIncomingMessage(e,t).catch((e=>this.handleMessageError(e,t)))})),e.on("error",(e=>{this.notifyAdmin(`Bot error occurred: ${e.message}`)}))}async handleMessageError(e,t){const r=`${t.chat.id}-${t.message_id}`;this.messageQueue.has(r)||this.messageQueue.set(r,{retries:0,message:t,channelId:this.findChannelForMessage(t)}),await this.notifyAdmin(`Message queued for retry: ${e.message}`)}findChannelForMessage(e){const t=this.config.channels[0];return t?.channelId}async notifyAdmin(e){if(this.config.adminChatId)try{const t=this.loadBalancer.getNextBot();await t.sendMessage(this.config.adminChatId,e)}catch{}}async handleIncomingMessage(e,t){const r=`${t.chat.id}-${t.message_id}`;if(t.text?.toLowerCase().startsWith("start"))return void this.logger.debug(`Skipping start command message ${r}`);const o=this.loadBalancer.getBotToken(e),i=this.config.channels.find((e=>e.botTokens.includes(o)));if(!i)return this.logger.warn(`No channel configured for bot token: ${o.slice(0,6)}...`),void await this.notifyAdmin(`⚠️ Configuration issue: No channel configured for bot token: ${o.slice(0,6)}...`);try{await this.forwardMessageWithRetry(e,t,i.channelId),await this.notifyAdmin(`Message forwarded to channel ${i.channelId}`)}catch(e){this.logger.warn(`Failed to forward message ${r}, queueing for retry: ${e.message}`),this.messageQueue.set(r,{retries:0,message:t,channelId:i.channelId}),await this.notifyAdmin(`Message queued for retry: ${e.message}`)}}async forwardMessageWithRetry(e,t,r,o=0){const i=`${t.chat.id}-${t.message_id}`;try{await this.forwardMessage(e,t,r)}catch(e){if(o<this.MAX_RETRIES){this.logger.debug(`Retry attempt ${o+1} failed, switching to next bot`),await new Promise((e=>setTimeout(e,this.RETRY_DELAY)));const e=this.loadBalancer.getNextBot();return this.forwardMessageWithRetry(e,t,r,o+1)}throw this.logger.error(`All retry attempts failed for message ${i}`),e}}async forwardMessage(e,t,r){const o=`${t.chat.id}-${t.message_id}`;try{await e.forwardMessage(r,t.chat.id,t.message_id),this.logger.debug(`Message ${o} forwarded successfully`)}catch(i){this.logger.debug(`Forward attempt failed, trying fallback bot for message ${o}`);const n=this.loadBalancer.getNextBot();if(n===e)throw this.logger.error(`No available bots for forwarding message ${o}`),new Error("No available bots for forwarding");await n.forwardMessage(r,t.chat.id,t.message_id),this.logger.debug(`Message ${o} forwarded successfully using fallback bot`)}}async broadcastMessage(e){this.logger.debug("Starting broadcast message operation");try{const t=this.loadBalancer.getNextBot(),r=this.config.channels[0],o=await this.sendMessageByType(t,r.channelId,e);return this.logger.log(`Successfully broadcasted message with ID: ${o.message_id}`),{success:!0,messageId:o.message_id.toString(),timestamp:(new Date).toISOString()}}catch(e){return this.logger.error("Failed to broadcast message:",e.stack),{success:!1,timestamp:(new Date).toISOString()}}}async sendMessageByType(e,t,r){switch(this.logger.debug(`Sending ${r.type} message to channel ${t}`),r.type){case d.MessageType.PHOTO:if(!r.mediaUrl)throw this.logger.error("Media URL is required for photo messages"),new Error("Media URL is required for photo messages");return e.sendPhoto(t,r.mediaUrl,{caption:r.message});case d.MessageType.VIDEO:if(!r.mediaUrl)throw this.logger.error("Media URL is required for video messages"),new Error("Media URL is required for video messages");return e.sendVideo(t,r.mediaUrl,{caption:r.message});case d.MessageType.TEXT:default:return e.sendMessage(t,r.message)}}async getBotStatus(){return this.logger.debug("Fetching bot status information"),(this.loadBalancer.getBots()||[]).map(((e,t)=>({id:t+1,activeOperations:this.loadBalancer.getBotOperationCount(e.bot),maxOperations:this.loadBalancer.getBotMaxOperations(e.bot),utilizationPercentage:this.loadBalancer.getBotUtilizationPercentage(e.bot)})))}async getConfiguration(){this.logger.debug("Fetching Telegram service configuration");const e=this.loadBalancer.getBots()?.[0]?.bot;return{channelConfigured:this.config.channels?.length>0,botsCount:this.config.bots?.length||0,maxOperationsPerBot:e?this.loadBalancer.getBotMaxOperations(e):0}}};t.TelegramService=p,t.TelegramService=p=o=i([(0,s.Injectable)(),n("design:paramtypes",[a.ConfigService,l.TelegramLoadBalancer])],p)},428:e=>{e.exports=require("@nestjs/config")},461:e=>{e.exports=require("multer")},464:function(e,t,r){var o,i=this&&this.__decorate||function(e,t,r,o){var i,n=arguments.length,s=n<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(n<3?i(s):n>3?i(t,r,s):i(t,r))||s);return n>3&&s&&Object.defineProperty(t,r,s),s};Object.defineProperty(t,"__esModule",{value:!0}),t.FileModule=void 0;const n=r(563),s=r(804),a=r(209),l=r(556),d=r(481),p=r(249);let c=o=class{static register(){return{module:o,imports:[l.MulterModule.register({dest:d.FILE_CONFIG.STORAGE_PATH})],controllers:[s.FileController],providers:[a.FileService],exports:[a.FileService]}}static forRoot(e={}){const t=[{provide:p.FILE_MODULE_OPTIONS,useValue:{storagePath:e.storagePath||d.FILE_CONFIG.STORAGE_PATH,maxFileSize:e.maxFileSize||d.FILE_CONFIG.MAX_FILE_SIZE,allowedFileTypes:e.allowedFileTypes||d.FILE_CONFIG.ALLOWED_FILE_TYPES}},a.FileService];return{module:o,imports:[l.MulterModule.register({dest:e.storagePath||d.FILE_CONFIG.STORAGE_PATH})],controllers:[s.FileController],providers:t,exports:[a.FileService]}}static forRootGlobal(e={}){return{...this.forRoot(e),global:!0}}};t.FileModule=c,t.FileModule=c=o=i([(0,n.Module)({})],c)},468:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FileOperationResult=void 0,t.withFileOperation=async function(e,t,r){const s=Date.now();try{const o=await t();return i.FileOperationMonitor.recordOperation({operation:e,success:!0,duration:Date.now()-s,timestamp:s,path:r}),n.success(o)}catch(t){const a=Date.now()-s;if(i.FileOperationMonitor.recordOperation({operation:e,success:!1,duration:a,timestamp:s,path:r,error:t.message}),t instanceof o.FileOperationError)return n.failure(t);let l;return l="ENOENT"===t.code?new o.FileOperationError("File or directory not found",o.FileErrorCodes.FILE_NOT_FOUND,e):"EACCES"===t.code?new o.FileOperationError("Access denied",o.FileErrorCodes.ACCESS_DENIED,e):"EEXIST"===t.code?new o.FileOperationError("File or folder already exists",o.FileErrorCodes.FILE_EXISTS,e):"ENOSPC"===t.code?new o.FileOperationError("No space left on storage",o.FileErrorCodes.STORAGE_FULL,e):new o.FileOperationError(t.message||"Unknown error occurred",o.FileErrorCodes.INVALID_OPERATION,e,t),n.failure(l)}};const o=r(573),i=r(661);class n{constructor(e,t,r){this.success=e,this.data=t,this.error=r}static success(e){return new n(!0,e)}static failure(e){return new n(!1,void 0,e)}}t.FileOperationResult=n},481:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FILE_CONFIG=void 0;const o=r(928);t.FILE_CONFIG={MAX_FILE_SIZE:104857600,MAX_FILES_PER_UPLOAD:10,ALLOWED_FILE_TYPES:["image/jpeg","image/png","application/pdf"],TEMP_LINK_EXPIRY:864e5,STORAGE_PATH:(0,o.join)(process.cwd(),"uploads")}},509:function(e,t,r){var o=this&&this.__decorate||function(e,t,r,o){var i,n=arguments.length,s=n<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(n<3?i(s):n>3?i(t,r,s):i(t,r))||s);return n>3&&s&&Object.defineProperty(t,r,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0}),t.AppController=void 0;const n=r(563),s=r(742),a=r(918);let l=class{constructor(e){this.appService=e}getHello(){return this.appService.getHello()}};t.AppController=l,o([(0,n.Get)(),(0,s.ApiOperation)({summary:"Health check endpoint"}),(0,s.ApiResponse)({status:200,description:"The service is up and running"}),i("design:type",Function),i("design:paramtypes",[]),i("design:returntype",String)],l.prototype,"getHello",null),t.AppController=l=o([(0,s.ApiTags)("Health Check"),(0,n.Controller)(),i("design:paramtypes",[a.AppService])],l)},556:e=>{e.exports=require("@nestjs/platform-express")},563:e=>{e.exports=require("@nestjs/common")},573:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FileErrorCodes=t.FileOperationError=void 0;class r extends Error{constructor(e,t,r,o){super(e),this.code=t,this.operation=r,this.details=o,this.name="FileOperationError"}}t.FileOperationError=r,t.FileErrorCodes={FILE_NOT_FOUND:"FILE_NOT_FOUND",INVALID_PATH:"INVALID_PATH",ACCESS_DENIED:"ACCESS_DENIED",INVALID_OPERATION:"INVALID_OPERATION",STORAGE_FULL:"STORAGE_FULL",FILE_TOO_LARGE:"FILE_TOO_LARGE",INVALID_FILE_TYPE:"INVALID_FILE_TYPE",FOLDER_EXISTS:"FOLDER_EXISTS",FILE_EXISTS:"FILE_EXISTS",FOLDER_NOT_EMPTY:"FOLDER_NOT_EMPTY"}},576:function(e,t,r){var o,i=this&&this.__decorate||function(e,t,r,o){var i,n=arguments.length,s=n<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(n<3?i(s):n>3?i(t,r,s):i(t,r))||s);return n>3&&s&&Object.defineProperty(t,r,s),s};Object.defineProperty(t,"__esModule",{value:!0}),t.TelegramLoadBalancer=void 0;const n=r(563),s=r(590);let a=o=class{constructor(){this.bots=[],this.logger=new n.Logger(o.name)}getBotOperationCount(e){const t=this.bots.find((t=>t.bot===e));return t?.operationCount||0}getBotMaxOperations(e){const t=this.bots.find((t=>t.bot===e));return t?.config.maxConcurrentOperations||0}getBotUtilizationPercentage(e){const t=this.getBotMaxOperations(e);return t?this.getBotOperationCount(e)/t*100:0}addBot(e){const t=new s(e.token,{polling:!0});this.bots.push({bot:t,operationCount:0,config:e}),this.logger.log(`Added new bot to the pool. Total bots: ${this.bots.length}`)}getNextBot(){if(!this.bots.length)throw new Error("No bots available in the pool");const e=this.bots.reduce(((e,t)=>e.operationCount<=t.operationCount?e:t));return e.operationCount,e.config.maxConcurrentOperations,e.operationCount++,e.bot}releaseBot(e){const t=this.bots.find((t=>t.bot===e));t&&(t.operationCount=Math.max(0,t.operationCount-1))}getAllBots(){return this.bots.map((e=>e.bot))}getBotToken(e){const t=this.bots.find((t=>t.bot===e));return t?.config.token}getBotByToken(e){for(const t of this.bots)if(t.config.token===e)return t.bot}getBots(){return this.bots}};t.TelegramLoadBalancer=a,t.TelegramLoadBalancer=a=o=i([(0,n.Injectable)()],a)},590:e=>{e.exports=require("node-telegram-bot-api")},661:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FileOperationMonitor=void 0;class r{static recordOperation(e){this.metrics.unshift(e),this.metrics.length>this.MAX_METRICS&&this.metrics.pop()}static getMetrics(e=100){return this.metrics.slice(0,e)}static getFailureRate(e=36e5){const t=Date.now(),r=this.metrics.filter((r=>t-r.timestamp<e));return 0===r.length?0:r.filter((e=>!e.success)).length/r.length}static clearMetrics(){this.metrics=[]}}t.FileOperationMonitor=r,r.metrics=[],r.MAX_METRICS=1e3},730:function(e,t,r){var o=this&&this.__decorate||function(e,t,r,o){var i,n=arguments.length,s=n<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(n<3?i(s):n>3?i(t,r,s):i(t,r))||s);return n>3&&s&&Object.defineProperty(t,r,s),s},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0}),t.BroadcastResponseDto=t.ConfigurationResponseDto=t.BotStatusResponseDto=t.BroadcastMessageDto=t.MessageType=void 0;const n=r(742),s=r(403);var a;!function(e){e.TEXT="text",e.PHOTO="photo",e.VIDEO="video"}(a||(t.MessageType=a={}));class l{constructor(){this.type=a.TEXT}}t.BroadcastMessageDto=l,o([(0,n.ApiProperty)({description:"Message text or caption for media",example:"Hello everyone! Check out this photo."}),(0,s.IsString)(),(0,s.IsNotEmpty)(),i("design:type",String)],l.prototype,"message",void 0),o([(0,n.ApiPropertyOptional)({enum:a,default:a.TEXT,description:"Type of message to broadcast"}),(0,s.IsEnum)(a),(0,s.IsOptional)(),i("design:type",String)],l.prototype,"type",void 0),o([(0,n.ApiPropertyOptional)({description:"URL of the media to be sent (required for photo/video types)",example:"https://example.com/image.jpg"}),(0,s.IsUrl)({protocols:["http","https"],require_protocol:!0}),(0,s.IsOptional)(),i("design:type",String)],l.prototype,"mediaUrl",void 0);class d{}t.BotStatusResponseDto=d,o([(0,n.ApiProperty)({description:"Unique identifier for the bot",example:1}),i("design:type",Number)],d.prototype,"id",void 0),o([(0,n.ApiProperty)({description:"Number of current active operations",example:5}),i("design:type",Number)],d.prototype,"activeOperations",void 0),o([(0,n.ApiProperty)({description:"Maximum allowed concurrent operations",example:10}),i("design:type",Number)],d.prototype,"maxOperations",void 0),o([(0,n.ApiProperty)({description:"Current utilization percentage",example:50}),i("design:type",Number)],d.prototype,"utilizationPercentage",void 0);class p{}t.ConfigurationResponseDto=p,o([(0,n.ApiProperty)({description:"List of allowed media types",example:["photo","video"],isArray:!0}),(0,n.ApiProperty)({description:"Whether the target channel is properly configured",example:!0}),i("design:type",Boolean)],p.prototype,"channelConfigured",void 0),o([(0,n.ApiProperty)({description:"Total number of configured bots",example:3}),i("design:type",Number)],p.prototype,"botsCount",void 0),o([(0,n.ApiProperty)({description:"Maximum concurrent operations allowed per bot",example:10}),i("design:type",Number)],p.prototype,"maxOperationsPerBot",void 0);class c{}t.BroadcastResponseDto=c,o([(0,n.ApiProperty)({description:"Whether the broadcast was successful",example:!0}),i("design:type",Boolean)],c.prototype,"success",void 0),o([(0,n.ApiProperty)({description:"Message ID in the channel (if available)",example:"12345",required:!1}),i("design:type",String)],c.prototype,"messageId",void 0),o([(0,n.ApiProperty)({description:"Timestamp of the broadcast",example:"2025-05-01T12:00:00Z"}),i("design:type",String)],c.prototype,"timestamp",void 0)},742:e=>{e.exports=require("@nestjs/swagger")},781:e=>{e.exports=require("@nestjs/core")},804:function(e,t,r){var o,i=this&&this.__decorate||function(e,t,r,o){var i,n=arguments.length,s=n<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(n<3?i(s):n>3?i(t,r,s):i(t,r))||s);return n>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},s=this&&this.__param||function(e,t){return function(r,o){t(r,o,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.FileController=void 0;const a=r(563),l=r(556),d=r(461),p=r(300),c=r(481),f=r(209),g=r(742),u=r(896),m=r(928),h=r(173),y=r(321),F=r(173),S=r(661),v=(0,m.join)(process.cwd(),"uploads");let P=o=class{constructor(e){if(this.logger=new a.Logger(o.name),!e)throw new Error("FileService is required");this.fileService=e}async uploadFiles(e,t){if(!t?.length)throw new a.BadRequestException("No files provided");return this.fileService.uploadFiles(e,t)}listFolders(){return this.fileService.listFolders()}getFolderDetails(e,t,r){return this.fileService.getFolderDetails(e,t,r)}createFolder(e){return this.fileService.createFolder(e.folderName)}deleteFolder(e){return this.fileService.deleteFolder(e)}downloadFile(e,t,r){return this.fileService.downloadFile(e,t,r)}getFileMetadata(e,t){return this.fileService.getFileMetadata(e,t)}moveFile(e,t,r){return this.fileService.moveFile(e,t,r)}copyFile(e,t,r){return this.fileService.copyFile(e,t,r)}async downloadAllFiles(e,t){return this.fileService.downloadAllFiles(e,t)}getTemporaryLinks(e){return this.fileService.getTemporaryLinks(e)}getTemporaryFileLink(e,t){return this.fileService.getTemporaryFileLink(e,t)}searchFiles(e,t){return this.fileService.searchFiles(e,t)}getJsonFile(e,t){return this.fileService.getJsonFile(e,t)}getNestedJsonValue(e,t,r){return this.fileService.getNestedJsonValue(e,t,r)}queryJsonFile(e,t,r){return this.fileService.queryJsonFile(e,t,r)}deleteFile(e,t){return this.fileService.deleteFile(e,t)}updateFileMetadata(e,t,r){return this.fileService.updateFileMetadata(e,t,r)}getFolderSize(e){return this.fileService.getFolderSize(e)}listFiles(e){return this.fileService.listFiles(e)}getThumbnail(e,t,r){return this.fileService.getThumbnail(e,t,r)}getFile(e,t,r){return this.fileService.getFile(e,t,r)}renameFolder(e,t){return this.fileService.renameFolder(e,t.newFolderName)}moveFolder(e,t){return this.fileService.moveFolder(e,t.newLocation)}getFilePreview(e,t,r,o){return this.fileService.getFilePreview(e,t,r,o)}getFolderTree(){return this.fileService.getFolderTree()}generateShareableLink(e,t){return this.fileService.generateShareableLink(e,t)}lockFile(e,t){return this.fileService.lockFile(e,t)}unlockFile(e,t){return this.fileService.unlockFile(e,t)}getRecentFiles(){return this.fileService.getRecentFiles()}getFileVersions(e,t){return this.fileService.getFileVersions(e,t)}getFileOperationMetrics(e,t){const r=S.FileOperationMonitor.getMetrics(t);return{metrics:r,failureRate:S.FileOperationMonitor.getFailureRate(e),timeWindow:e,totalOperations:r.length}}};t.FileController=P,i([(0,a.Post)("folders/:folder/files"),(0,a.UseInterceptors)((0,l.FilesInterceptor)("files",10,{storage:(0,d.diskStorage)({destination:(e,t,r)=>{try{const t=e.params.folder,o=function(...e){const t=(0,m.join)(...e),r=(0,m.resolve)(t),o=(0,m.resolve)(v);if(!r.startsWith(o))throw new Error(`Invalid path detected: ${r}`);return t}(v,t);(0,u.existsSync)(o)||((0,u.mkdirSync)(o,{recursive:!0}),console.log(`Created folder: ${o}`)),r(null,o)}catch(e){console.error(`Error setting destination: ${e.message}`),r(e,null)}},filename:(e,t,r)=>{try{const o=e.query.filename,{originalname:i}=t,n=i.substring(i.lastIndexOf("."));e.fileCounter||(e.fileCounter=0),e.fileCounter++;let s=i;o&&(s=`${o}${e.fileCounter}${n}`),console.log(`Saving file as: ${s}`),r(null,s)}catch(e){console.error(`Error setting filename: ${e.message}`),r(e,null)}}}),limits:{fileSize:104857600}})),(0,g.ApiOperation)({summary:"Upload files to a folder",description:"Upload single or multiple files to a specified folder"}),(0,g.ApiConsumes)("multipart/form-data"),(0,g.ApiBody)({schema:{type:"object",required:["files"],properties:{files:{type:"array",items:{type:"string",format:"binary"},description:"Files to upload"}}}}),(0,g.ApiParam)({name:"folder",description:"Target folder name"}),(0,g.ApiQuery)({name:"filename",required:!1,description:"Optional custom filename for single file upload"}),s(0,(0,a.Param)("folder")),s(1,(0,a.UploadedFiles)(new a.ParseFilePipe({validators:[new p.CustomFileValidator({fileTypes:c.FILE_CONFIG.ALLOWED_FILE_TYPES}),new p.FileSizeValidator({maxSize:c.FILE_CONFIG.MAX_FILE_SIZE})],errorHttpStatusCode:400}))),n("design:type",Function),n("design:paramtypes",[String,Array]),n("design:returntype",Promise)],P.prototype,"uploadFiles",null),i([(0,g.ApiTags)("Folder Management"),(0,a.Get)("folders"),(0,g.ApiOperation)({summary:"List all folders"}),(0,g.ApiResponse)({status:200,description:"Folders listed successfully",type:y.FolderResponse}),(0,g.ApiResponse)({status:500,description:"Server error while listing folders",type:y.ErrorResponse}),n("design:type",Function),n("design:paramtypes",[]),n("design:returntype",Promise)],P.prototype,"listFolders",null),i([(0,a.Get)("folders/:folder"),(0,g.ApiOperation)({summary:"Get folder details and list files"}),(0,g.ApiResponse)({status:200,description:"Folder details retrieved successfully",type:y.FolderDetailsResponse}),(0,g.ApiResponse)({status:404,description:"Folder not found"}),(0,g.ApiParam)({name:"folder",description:"Folder name"}),(0,g.ApiQuery)({name:"page",required:!1,description:"Page number for pagination"}),(0,g.ApiQuery)({name:"limit",required:!1,description:"Number of files per page"}),s(0,(0,a.Param)("folder")),s(1,(0,a.Query)("page",new a.DefaultValuePipe(1),a.ParseIntPipe)),s(2,(0,a.Query)("limit",new a.DefaultValuePipe(10),a.ParseIntPipe)),n("design:type",Function),n("design:paramtypes",[String,Number,Number]),n("design:returntype",Promise)],P.prototype,"getFolderDetails",null),i([(0,g.ApiTags)("Folder Management"),(0,a.Post)("folders"),(0,g.ApiOperation)({summary:"Create a new folder"}),(0,g.ApiResponse)({status:201,description:"Folder created successfully"}),(0,g.ApiResponse)({status:400,description:"Invalid folder name"}),(0,g.ApiBody)({schema:{type:"object",properties:{folderName:{type:"string"}}}}),s(0,(0,a.Body)()),n("design:type",Function),n("design:paramtypes",[h.CreateFolderDto]),n("design:returntype",void 0)],P.prototype,"createFolder",null),i([(0,g.ApiTags)("Folder Management"),(0,a.Delete)("folders/:folder"),(0,g.ApiOperation)({summary:"Delete a folder and all its contents"}),(0,g.ApiParam)({name:"folder",description:"Folder to delete"}),s(0,(0,a.Param)("folder")),n("design:type",Function),n("design:paramtypes",[String]),n("design:returntype",void 0)],P.prototype,"deleteFolder",null),i([(0,g.ApiTags)("File Operations"),(0,a.Get)("folders/:folder/files/:filename/download"),(0,g.ApiOperation)({summary:"Download a file from a folder"}),(0,g.ApiParam)({name:"folder",description:"Folder name"}),(0,g.ApiParam)({name:"filename",description:"File name"}),s(0,(0,a.Param)("folder")),s(1,(0,a.Param)("filename")),s(2,(0,a.Res)()),n("design:type",Function),n("design:paramtypes",[String,String,Object]),n("design:returntype",void 0)],P.prototype,"downloadFile",null),i([(0,g.ApiTags)("File Metadata"),(0,a.Get)("folders/:folder/files/:filename/metadata"),(0,g.ApiOperation)({summary:"Get metadata of a file"}),(0,g.ApiResponse)({status:200,description:"File metadata retrieved successfully",type:y.FileMetadataResponse}),(0,g.ApiResponse)({status:404,description:"File not found"}),(0,g.ApiParam)({name:"folder",description:"Folder name"}),(0,g.ApiParam)({name:"filename",description:"File name"}),s(0,(0,a.Param)("folder")),s(1,(0,a.Param)("filename")),n("design:type",Function),n("design:paramtypes",[String,String]),n("design:returntype",Promise)],P.prototype,"getFileMetadata",null),i([(0,a.Put)("folders/:folder/files/:filename/move"),(0,g.ApiOperation)({summary:"Move or rename a file"}),(0,g.ApiResponse)({status:200,description:"File moved successfully"}),(0,g.ApiResponse)({status:400,description:"Invalid destination"}),(0,g.ApiResponse)({status:404,description:"File not found"}),(0,g.ApiParam)({name:"folder",description:"Current folder of the file"}),(0,g.ApiParam)({name:"filename",description:"Current file name"}),(0,g.ApiBody)({schema:{type:"object",properties:{newFolder:{type:"string"},newFilename:{type:"string"}}}}),s(0,(0,a.Param)("folder")),s(1,(0,a.Param)("filename")),s(2,(0,a.Body)()),n("design:type",Function),n("design:paramtypes",[String,String,h.MoveFileDto]),n("design:returntype",void 0)],P.prototype,"moveFile",null),i([(0,a.Post)("folders/:folder/files/:filename/copy"),(0,g.ApiOperation)({summary:"Copy a file to another location"}),(0,g.ApiResponse)({status:201,description:"File copied successfully"}),(0,g.ApiResponse)({status:400,description:"Invalid destination"}),(0,g.ApiResponse)({status:404,description:"File not found"}),(0,g.ApiParam)({name:"folder",description:"Source folder"}),(0,g.ApiParam)({name:"filename",description:"File to copy"}),(0,g.ApiBody)({schema:{type:"object",properties:{newFolder:{type:"string"}}}}),s(0,(0,a.Param)("folder")),s(1,(0,a.Param)("filename")),s(2,(0,a.Body)()),n("design:type",Function),n("design:paramtypes",[String,String,h.CopyFileDto]),n("design:returntype",void 0)],P.prototype,"copyFile",null),i([(0,a.Get)("folders/:folder/files/download-all"),(0,g.ApiOperation)({summary:"Download all files in a folder as a ZIP archive"}),(0,g.ApiParam)({name:"folder",description:"Folder name"}),s(0,(0,a.Param)("folder")),s(1,(0,a.Res)()),n("design:type",Function),n("design:paramtypes",[String,Object]),n("design:returntype",Promise)],P.prototype,"downloadAllFiles",null),i([(0,a.Get)("folders/:folder/files/temp-links"),(0,g.ApiOperation)({summary:"Get temporary access links for all files in a folder"}),(0,g.ApiParam)({name:"folder",description:"Folder name"}),s(0,(0,a.Param)("folder")),n("design:type",Function),n("design:paramtypes",[String]),n("design:returntype",void 0)],P.prototype,"getTemporaryLinks",null),i([(0,g.ApiTags)("File Sharing"),(0,a.Get)("folders/:folder/files/:filename/temp-link"),(0,g.ApiOperation)({summary:"Generate a temporary access link for a file"}),(0,g.ApiParam)({name:"folder",description:"Folder name"}),(0,g.ApiParam)({name:"filename",description:"File name"}),s(0,(0,a.Param)("folder")),s(1,(0,a.Param)("filename")),n("design:type",Function),n("design:paramtypes",[String,String]),n("design:returntype",void 0)],P.prototype,"getTemporaryFileLink",null),i([(0,g.ApiTags)("Search & Browse"),(0,a.Get)("folders/:folder/files/search"),(0,g.ApiOperation)({summary:"Search for files by name in a folder"}),(0,g.ApiParam)({name:"folder",description:"Folder name"}),(0,g.ApiQuery)({name:"pattern",description:"Regex pattern for matching filenames"}),s(0,(0,a.Param)("folder")),s(1,(0,a.Query)("pattern")),n("design:type",Function),n("design:paramtypes",[String,String]),n("design:returntype",void 0)],P.prototype,"searchFiles",null),i([(0,g.ApiTags)("JSON Operations"),(0,a.Get)("json/folders/:folder/files/:filename"),(0,g.ApiOperation)({summary:"Retrieve the entire JSON file",description:"Returns the complete contents of a JSON file"}),(0,g.ApiResponse)({status:200,description:"JSON file contents retrieved successfully",type:y.JsonFileResponse}),(0,g.ApiResponse)({status:404,description:"JSON file not found",type:y.ErrorResponse}),(0,g.ApiResponse)({status:500,description:"Error parsing JSON file",type:y.ErrorResponse}),s(0,(0,a.Param)("folder")),s(1,(0,a.Param)("filename")),n("design:type",Function),n("design:paramtypes",[String,String]),n("design:returntype",void 0)],P.prototype,"getJsonFile",null),i([(0,g.ApiTags)("JSON Operations"),(0,a.Get)("json/folders/:folder/files/:filename/*path"),(0,g.ApiOperation)({summary:"Retrieve a nested value from a JSON file by key path",description:"Returns a specific value from a JSON file using a path with / as separator"}),(0,g.ApiResponse)({status:200,description:"JSON value retrieved successfully",type:y.JsonValueResponse}),(0,g.ApiResponse)({status:400,description:"Invalid path or key not found",type:y.ErrorResponse}),(0,g.ApiResponse)({status:404,description:"JSON file not found",type:y.ErrorResponse}),(0,g.ApiParam)({name:"path",description:"Path to the nested value (e.g., user/profile/name)",type:String}),s(0,(0,a.Param)("folder")),s(1,(0,a.Param)("filename")),s(2,(0,a.Param)()),n("design:type",Function),n("design:paramtypes",[String,String,F.JsonPathParams]),n("design:returntype",void 0)],P.prototype,"getNestedJsonValue",null),i([(0,g.ApiTags)("JSON Operations"),(0,a.Get)("json/folders/:folder/files/:filename/query"),(0,g.ApiOperation)({summary:"Query a JSON file using dot notation",description:"Query JSON data using dot notation and array indices. Example: users[0].profile.name"}),(0,g.ApiResponse)({status:200,description:"JSON value retrieved successfully",type:y.JsonValueResponse}),(0,g.ApiResponse)({status:400,description:"Invalid query format or path not found",type:y.ErrorResponse}),(0,g.ApiResponse)({status:404,description:"JSON file not found",type:y.ErrorResponse}),(0,g.ApiQuery)({name:"query",description:"JSON path query using dot notation (e.g., users[0].profile.name)",required:!0,type:String}),s(0,(0,a.Param)("folder")),s(1,(0,a.Param)("filename")),s(2,(0,a.Query)("query")),n("design:type",Function),n("design:paramtypes",[String,String,String]),n("design:returntype",void 0)],P.prototype,"queryJsonFile",null),i([(0,g.ApiTags)("File Operations"),(0,a.Delete)("folders/:folder/files/:filename"),(0,g.ApiOperation)({summary:"Delete a file from a folder"}),(0,g.ApiParam)({name:"folder",description:"Folder name"}),(0,g.ApiParam)({name:"filename",description:"File name"}),s(0,(0,a.Param)("folder")),s(1,(0,a.Param)("filename")),n("design:type",Function),n("design:paramtypes",[String,String]),n("design:returntype",void 0)],P.prototype,"deleteFile",null),i([(0,g.ApiTags)("File Metadata"),(0,a.Put)("folders/:folder/files/:filename/metadata"),(0,g.ApiOperation)({summary:"Update file metadata"}),(0,g.ApiResponse)({status:200,description:"File metadata updated successfully"}),(0,g.ApiResponse)({status:400,description:"Invalid metadata"}),(0,g.ApiResponse)({status:404,description:"File not found"}),(0,g.ApiParam)({name:"folder",description:"Folder name"}),(0,g.ApiParam)({name:"filename",description:"File name"}),(0,g.ApiBody)({schema:{type:"object",properties:{newFilename:{type:"string",description:"New filename"},newFolder:{type:"string",description:"New folder"}}}}),s(0,(0,a.Param)("folder")),s(1,(0,a.Param)("filename")),s(2,(0,a.Body)()),n("design:type",Function),n("design:paramtypes",[String,String,h.UpdateFileMetadataDto]),n("design:returntype",void 0)],P.prototype,"updateFileMetadata",null),i([(0,a.Get)("folders/:folder/size"),(0,g.ApiOperation)({summary:"Get the total size of a folder"}),(0,g.ApiParam)({name:"folder",description:"Folder name"}),s(0,(0,a.Param)("folder")),n("design:type",Function),n("design:paramtypes",[String]),n("design:returntype",void 0)],P.prototype,"getFolderSize",null),i([(0,a.Get)("folders/:folder/files"),(0,g.ApiOperation)({summary:"List all files in a folder"}),(0,g.ApiParam)({name:"folder",description:"Folder name"}),s(0,(0,a.Param)("folder")),n("design:type",Function),n("design:paramtypes",[String]),n("design:returntype",void 0)],P.prototype,"listFiles",null),i([(0,a.Get)("folders/:folder/files/:filename/thumbnail"),(0,g.ApiOperation)({summary:"Get a thumbnail of an image or video file"}),(0,g.ApiParam)({name:"folder",description:"Folder name"}),(0,g.ApiParam)({name:"filename",description:"File name"}),s(0,(0,a.Param)("folder")),s(1,(0,a.Param)("filename")),s(2,(0,a.Res)()),n("design:type",Function),n("design:paramtypes",[String,String,Object]),n("design:returntype",void 0)],P.prototype,"getThumbnail",null),i([(0,g.ApiTags)("File Operations"),(0,a.Get)("folders/:folder/files/:filename"),(0,g.ApiOperation)({summary:"Retrieve a file from a folder"}),(0,g.ApiParam)({name:"folder",description:"Folder name"}),(0,g.ApiParam)({name:"filename",description:"File name"}),s(0,(0,a.Param)("folder")),s(1,(0,a.Param)("filename")),s(2,(0,a.Res)()),n("design:type",Function),n("design:paramtypes",[String,String,Object]),n("design:returntype",void 0)],P.prototype,"getFile",null),i([(0,g.ApiTags)("Folder Management"),(0,a.Put)("folders/:folder/rename"),(0,g.ApiOperation)({summary:"Rename a folder"}),(0,g.ApiResponse)({status:200,description:"Folder renamed successfully"}),(0,g.ApiResponse)({status:400,description:"Invalid folder name"}),(0,g.ApiResponse)({status:404,description:"Folder not found"}),(0,g.ApiParam)({name:"folder",description:"Current folder name"}),(0,g.ApiBody)({schema:{type:"object",properties:{newFolderName:{type:"string"}}}}),s(0,(0,a.Param)("folder")),s(1,(0,a.Body)()),n("design:type",Function),n("design:paramtypes",[String,h.RenameFolderDto]),n("design:returntype",void 0)],P.prototype,"renameFolder",null),i([(0,g.ApiTags)("Folder Management"),(0,a.Put)("folders/:folder/move"),(0,g.ApiOperation)({summary:"Move a folder to a different location"}),(0,g.ApiResponse)({status:200,description:"Folder moved successfully"}),(0,g.ApiResponse)({status:400,description:"Invalid destination"}),(0,g.ApiResponse)({status:404,description:"Folder not found"}),(0,g.ApiParam)({name:"folder",description:"Current folder name"}),(0,g.ApiBody)({schema:{type:"object",properties:{newLocation:{type:"string"}}}}),s(0,(0,a.Param)("folder")),s(1,(0,a.Body)()),n("design:type",Function),n("design:paramtypes",[String,h.MoveFolderDto]),n("design:returntype",void 0)],P.prototype,"moveFolder",null),i([(0,a.Get)("folders/:folder/files/:filename/preview"),(0,g.ApiOperation)({summary:"Get a preview of a file"}),(0,g.ApiParam)({name:"folder",description:"Folder name"}),(0,g.ApiParam)({name:"filename",description:"File name"}),s(0,(0,a.Param)("folder")),s(1,(0,a.Param)("filename")),s(2,(0,a.Req)()),s(3,(0,a.Res)()),n("design:type",Function),n("design:paramtypes",[String,String,Object,Object]),n("design:returntype",void 0)],P.prototype,"getFilePreview",null),i([(0,g.ApiTags)("Search & Browse"),(0,a.Get)("folders/tree"),(0,g.ApiOperation)({summary:"Get a hierarchical tree structure of folders and files"}),(0,g.ApiResponse)({status:200,description:"Folder tree retrieved successfully",type:y.FolderTreeResponse}),n("design:type",Function),n("design:paramtypes",[]),n("design:returntype",Promise)],P.prototype,"getFolderTree",null),i([(0,g.ApiTags)("File Sharing"),(0,a.Post)("folders/:folder/files/:filename/share"),(0,g.ApiOperation)({summary:"Generate a shareable link for a file"}),(0,g.ApiResponse)({status:200,description:"Shareable link generated",type:y.ShareableLinkResponse}),(0,g.ApiResponse)({status:404,description:"File not found"}),(0,g.ApiParam)({name:"folder",description:"Folder name"}),(0,g.ApiParam)({name:"filename",description:"File name"}),s(0,(0,a.Param)("folder")),s(1,(0,a.Param)("filename")),n("design:type",Function),n("design:paramtypes",[String,String]),n("design:returntype",Promise)],P.prototype,"generateShareableLink",null),i([(0,g.ApiTags)("File Locking"),(0,a.Put)("folders/:folder/files/:filename/lock"),(0,g.ApiOperation)({summary:"Lock a file for editing"}),(0,g.ApiParam)({name:"folder",description:"Folder name"}),(0,g.ApiParam)({name:"filename",description:"File name"}),(0,g.ApiResponse)({status:400,description:"File is already locked",type:y.ErrorResponse}),(0,g.ApiResponse)({status:404,description:"File not found",type:y.ErrorResponse}),(0,g.ApiResponse)({status:500,description:"Error locking file",type:y.ErrorResponse}),s(0,(0,a.Param)("folder")),s(1,(0,a.Param)("filename")),n("design:type",Function),n("design:paramtypes",[String,String]),n("design:returntype",void 0)],P.prototype,"lockFile",null),i([(0,g.ApiTags)("File Locking"),(0,a.Put)("folders/:folder/files/:filename/unlock"),(0,g.ApiOperation)({summary:"Unlock a file for editing"}),(0,g.ApiParam)({name:"folder",description:"Folder name"}),(0,g.ApiParam)({name:"filename",description:"File name"}),s(0,(0,a.Param)("folder")),s(1,(0,a.Param)("filename")),n("design:type",Function),n("design:paramtypes",[String,String]),n("design:returntype",void 0)],P.prototype,"unlockFile",null),i([(0,g.ApiTags)("Search & Browse"),(0,a.Get)("files/recent"),(0,g.ApiOperation)({summary:"Get a list of recently modified files"}),n("design:type",Function),n("design:paramtypes",[]),n("design:returntype",void 0)],P.prototype,"getRecentFiles",null),i([(0,g.ApiTags)("File Versions"),(0,a.Get)("folders/:folder/files/:filename/versions"),(0,g.ApiOperation)({summary:"Get different versions of a file"}),(0,g.ApiResponse)({status:200,description:"File versions retrieved successfully",type:y.FileVersionResponse}),(0,g.ApiResponse)({status:404,description:"File not found"}),(0,g.ApiParam)({name:"folder",description:"Folder name"}),(0,g.ApiParam)({name:"filename",description:"File name"}),s(0,(0,a.Param)("folder")),s(1,(0,a.Param)("filename")),n("design:type",Function),n("design:paramtypes",[String,String]),n("design:returntype",Promise)],P.prototype,"getFileVersions",null),i([(0,a.Get)("metrics/file-operations"),(0,g.ApiOperation)({summary:"Get file operation metrics",description:"Retrieve metrics about recent file operations including success rate and performance data"}),(0,g.ApiResponse)({status:200,description:"File operation metrics retrieved successfully",type:y.FileOperationMetricsResponse}),(0,g.ApiQuery)({name:"timeWindow",required:!1,description:"Time window in milliseconds for failure rate calculation",type:Number,example:36e5}),(0,g.ApiQuery)({name:"limit",required:!1,description:"Maximum number of metrics to return",type:Number,example:100}),s(0,(0,a.Query)("timeWindow",new a.DefaultValuePipe(36e5),a.ParseIntPipe)),s(1,(0,a.Query)("limit",new a.DefaultValuePipe(100),a.ParseIntPipe)),n("design:type",Function),n("design:paramtypes",[Number,Number]),n("design:returntype",y.FileOperationMetricsResponse)],P.prototype,"getFileOperationMetrics",null),t.FileController=P=o=i([(0,g.ApiTags)("Folders & Files"),(0,a.Injectable)(),(0,a.Controller)(),n("design:paramtypes",[f.FileService])],P)},818:e=>{e.exports=require("dotenv")},896:e=>{e.exports=require("fs")},904:e=>{e.exports=require("mime-types")},905:function(e,t,r){var o=this&&this.__decorate||function(e,t,r,o){var i,n=arguments.length,s=n<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(n<3?i(s):n>3?i(t,r,s):i(t,r))||s);return n>3&&s&&Object.defineProperty(t,r,s),s};Object.defineProperty(t,"__esModule",{value:!0}),t.TelegramModule=void 0;const i=r(563),n=r(428),s=r(410),a=r(576);let l=class{};t.TelegramModule=l,t.TelegramModule=l=o([(0,i.Module)({imports:[n.ConfigModule],providers:[s.TelegramService,a.TelegramLoadBalancer],exports:[s.TelegramService]})],l)},918:function(e,t,r){var o=this&&this.__decorate||function(e,t,r,o){var i,n=arguments.length,s=n<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(n<3?i(s):n>3?i(t,r,s):i(t,r))||s);return n>3&&s&&Object.defineProperty(t,r,s),s};Object.defineProperty(t,"__esModule",{value:!0}),t.AppService=void 0;const i=r(563);let n=class{getHello(){return"Hello World!"}};t.AppService=n,t.AppService=n=o([(0,i.Injectable)()],n)},928:e=>{e.exports=require("path")}},t={};function r(o){var i=t[o];if(void 0!==i)return i.exports;var n=t[o]={exports:{}};return e[o].call(n.exports,n,n.exports,r),n.exports}var o={};(()=>{var e=o;Object.defineProperty(e,"__esModule",{value:!0}),r(818).config();const t=r(781),i=r(205),n=r(35),s=r(563);process.on("unhandledRejection",((e,t)=>{console.error("Unhandled Rejection at:",t,"reason:",e)})),process.on("uncaughtException",(e=>{console.error("Uncaught Exception:",e)})),process.on("SIGTERM",(async()=>{console.log("Received SIGTERM signal. Starting graceful shutdown..."),process.exit(0)})),process.on("SIGINT",(async()=>{console.log("Received SIGINT signal. Starting graceful shutdown..."),process.exit(0)})),async function(){const e=await t.NestFactory.create(i.AppModule,{logger:["error","warn","log","debug","verbose"]});(0,n.setupSwagger)(e),e.useGlobalPipes(new s.ValidationPipe({whitelist:!0,transform:!0,forbidNonWhitelisted:!0,transformOptions:{enableImplicitConversion:!0}})),e.enableCors({origin:"*",methods:"GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS",allowedHeaders:"Content-Type, Accept, Authorization",credentials:!0}),await e.listen(8e3)}()})();var i=exports;for(var n in o)i[n]=o[n];o.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})})();
//# sourceMappingURL=index.js.map